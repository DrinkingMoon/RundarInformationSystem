<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PlatformService</name>
    </assembly>
    <members>
        <member name="T:PlatformManagement.IGrantedAuthority">
            <summary>
            代表用户的授权
            </summary>
        </member>
        <member name="P:PlatformManagement.IGrantedAuthority.ResourceCode">
            <summary>
            资源编号，编码规则：4个字符为一级
            </summary>
        </member>
        <member name="P:PlatformManagement.IGrantedAuthority.ResourceName">
            <summary>
            资源名称
            </summary>
        </member>
        <member name="P:PlatformManagement.IGrantedAuthority.GUID">
            <summary>
            资源唯一识别码
            </summary>
        </member>
        <member name="P:PlatformManagement.IGrantedAuthority.Authority">
            <summary>
            权限
            </summary>
        </member>
        <member name="P:PlatformManagement.IGrantedAuthority.ResourceLevel">
            <summary>
            资源等级
            </summary>
        </member>
        <member name="P:PlatformManagement.IGrantedAuthority.DataRules">
            <summary>
            数据规则集
            </summary>
        </member>
        <member name="T:PlatformManagement.GrantedAuthority">
            <summary>
            代表用户的授权
            </summary>
        </member>
        <member name="P:PlatformManagement.GrantedAuthority.ResourceCode">
            <summary>
            资源编号，编码规则：4个字符为一级
            </summary>
        </member>
        <member name="P:PlatformManagement.GrantedAuthority.ResourceName">
            <summary>
            资源名称
            </summary>
        </member>
        <member name="P:PlatformManagement.GrantedAuthority.GUID">
            <summary>
            资源唯一识别码
            </summary>
        </member>
        <member name="P:PlatformManagement.GrantedAuthority.Authority">
            <summary>
            权限
            </summary>
        </member>
        <member name="P:PlatformManagement.GrantedAuthority.ResourceLevel">
            <summary>
            资源等级
            </summary>
        </member>
        <member name="P:PlatformManagement.GrantedAuthority.DataRules">
            <summary>
            数据规则集
            </summary>
        </member>
        <member name="T:PlatformManagement.SensitiveDomain">
            <summary>
            敏感域数据库操作类
            </summary>
        </member>
        <member name="T:PlatformManagement.ISensitiveDomain">
            <summary>
            敏感域数据库操作接口
            </summary>
        </member>
        <member name="M:PlatformManagement.ISensitiveDomain.AddSensitiveDomain(PlatformManagement.View_Auth_SensitiveDomain)">
            <summary>
            添加新敏感域
            </summary>
            <param name="sensitiveDomain">要添加的新敏感域</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.ISensitiveDomain.DeleteSensitiveDomain(PlatformManagement.View_Auth_SensitiveDomain)">
            <summary>
            删除敏感域
            </summary>
            <param name="sensitiveDomain">要删除的敏感域</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.ISensitiveDomain.GetSensitiveDomain">
            <summary>
            获取所有敏感域
            </summary>
            <returns>返回获取到的敏感域</returns>
        </member>
        <member name="M:PlatformManagement.ISensitiveDomain.GetBusinessDomain(System.String)">
            <summary>
            获取业务敏感域
            </summary>
            <param name="businessID">业务编号</param>
            <returns>返回获取到的敏感域</returns>
        </member>
        <member name="M:PlatformManagement.ISensitiveDomain.UpdateSensitiveDomain(PlatformManagement.View_Auth_SensitiveDomain)">
            <summary>
            更新敏感域
            </summary>
            <param name="sensitiveDomain">要更新的敏感域</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="F:PlatformManagement.SensitiveDomain.m_ctx">
            <summary>
            权限管理数据库操作器
            </summary>
        </member>
        <member name="M:PlatformManagement.SensitiveDomain.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:PlatformManagement.SensitiveDomain.GetSensitiveDomain">
            <summary>
            获取所有敏感域
            </summary>
            <returns>返回获取到的敏感域</returns>
        </member>
        <member name="M:PlatformManagement.SensitiveDomain.GetBusinessDomain(System.String)">
            <summary>
            获取业务敏感域
            </summary>
            <param name="businessID">业务编号</param>
            <returns>返回获取到的敏感域</returns>
        </member>
        <member name="M:PlatformManagement.SensitiveDomain.AddSensitiveDomain(PlatformManagement.View_Auth_SensitiveDomain)">
            <summary>
            添加新敏感域
            </summary>
            <param name="sensitiveDomain">要添加的新敏感域</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.SensitiveDomain.DeleteSensitiveDomain(PlatformManagement.View_Auth_SensitiveDomain)">
            <summary>
            删除敏感域
            </summary>
            <param name="sensitiveDomain">要删除的敏感域</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.SensitiveDomain.UpdateSensitiveDomain(PlatformManagement.View_Auth_SensitiveDomain)">
            <summary>
            更新敏感域
            </summary>
            <param name="sensitiveDomain">要更新的敏感域</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="T:PlatformManagement.AuthenticationModeType">
            <summary>
            用户认证模式
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthenticationModeType.密码认证">
            <summary>
            用户认证模式
            </summary>
        </member>
        <member name="T:PlatformManagement.IUserManagement">
            <summary>
            数据库用户表操作类
            </summary>
        </member>
        <member name="M:PlatformManagement.IUserManagement.GetUser(System.String)">
            <summary>
            获取指定用户
            </summary>
            <param name="loginName">用户登录名</param>
            <returns>成功返回指定的用户，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IUserManagement.GetAllUser">
            <summary>
            获取所有用户
            </summary>
            <returns>成功返回用户集，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IUserManagement.GetUsers(System.String)">
            <summary>
            获取指定角色所拥有的用户
            </summary>
            <param name="roleCode">角色代码</param>
            <returns>成功返回用户集，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IUserManagement.GetUsers(System.String[])">
            <summary>
            获取指定角色集所拥有的用户
            </summary>
            <param name="roleCodes">角色代码集合</param>
            <returns>成功返回用户集，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IUserManagement.DataConvert(PlatformManagement.View_Auth_User)">
            <summary>
            数据转换器(将视图对象转换为表对象)
            </summary>
            <param name="user">用户数据</param>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:PlatformManagement.IUserManagement.AddUser(PlatformManagement.Auth_User)">
            <summary>
            添加用户
            </summary>
            <param name="user">要添加的用户信息</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.IUserManagement.DeleteUser(System.String)">
            <summary>
            删除用户
            </summary>
            <param name="loginName">用户登录名</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.IUserManagement.UpdateUser(PlatformManagement.Auth_User)">
            <summary>
            更新用户
            </summary>
            <param name="user">要更新的用户信息</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.IUserManagement.UpdatePassword(System.String,System.String,System.String)">
            <summary>
            更新用户密码
            </summary>
            <param name="loginName">用户登录名</param>
            <param name="oldPwd">旧密码</param>
            <param name="newPwd">新密码</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="T:PlatformManagement.ILogicGroup">
            <summary>
            逻辑组数据库操作接口
            </summary>
            <remarks>逻辑组表达的是多个表达式之间是OR或AND关系</remarks>
        </member>
        <member name="M:PlatformManagement.ILogicGroup.GetLogicGroups">
            <summary>
            获取所有逻辑组信息
            </summary>
            <returns>成功返回获取到的逻辑组，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.ILogicGroup.GetLogicGroups(System.String)">
            <summary>
            获取指定业务包含的逻辑组
            </summary>
            <param name="businessID">业务编码</param>
            <returns>返回获取到的逻辑组，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.ILogicGroup.GetLogicGroups(System.Int32[])">
            <summary>
            批量获取指定编号的逻辑组
            </summary>
            <param name="logicGroupIds">逻辑组编码数组</param>
            <returns>返回获取到的逻辑组，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.ILogicGroup.GetRootLogicGroups(System.String)">
            <summary>
            获取指定业务包含的根逻辑组
            </summary>
            <param name="businessID">业务编码</param>
            <returns>返回获取到的根逻辑组，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.ILogicGroup.GetChildLogicGroups(PlatformManagement.Auth_LogicGroup)">
            <summary>
            获取指定逻辑组所包含的子逻辑组
            </summary>
            <param name="parentGroup">父逻辑组</param>
            <returns>返回获取到的逻辑组，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.ILogicGroup.GetLogicGroup(System.Int32)">
            <summary>
            获取指定编号的逻辑组
            </summary>
            <param name="logicGroupId">组编码</param>
            <returns>返回获取到的逻辑组，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.ILogicGroup.GetLogicGroupIds(System.String)">
            <summary>
            获取指定业务包含的逻辑组编号列表
            </summary>
            <param name="businessID">业务编码</param>
            <returns>成功返回获取到的逻辑组编号列表，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.ILogicGroup.AddLogicGroup(PlatformManagement.Auth_LogicGroup)">
            <summary>
            添加新逻辑组
            </summary>
            <param name="logicGroup">要添加的新逻辑组</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.ILogicGroup.DeleteLogicGroup(PlatformManagement.Auth_LogicGroup)">
            <summary>
            删除逻辑组
            </summary>
            <param name="logicGroup">要删除的逻辑组</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.ILogicGroup.UpdateLogicGroup(PlatformManagement.Auth_LogicGroup)">
            <summary>
            更新逻辑组
            </summary>
            <param name="logicGroup">要更新的逻辑组</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="T:PlatformManagement.IExpression">
            <summary>
            表达式数据库操作接口
            </summary>
        </member>
        <member name="M:PlatformManagement.IExpression.GetExpression">
            <summary>
            获取所有表达式信息
            </summary>
            <returns>成功返回获取到的表达式，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IExpression.GetExpression(System.Int32)">
            <summary>
            获取表达式
            </summary>
            <param name="expressionID">表达式编号</param>
            <returns>成功返回获取到的表达式,失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IExpression.GetExpression(System.Int32[])">
            <summary>
            根据表达式编号数组批量获取表达式
            </summary>
            <param name="expressionIds">表达式编号数组</param>
            <returns>成功返回获取到的表达式集,失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IExpression.GetExpression(System.String)">
            <summary>
            获取包含指定变量表达式信息集
            </summary>
            <param name="variantName">变量名</param>
            <returns>成功返回获取到的表达式集,失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IExpression.AddExpression(PlatformManagement.Auth_Expression)">
            <summary>
            添加新表达式
            </summary>
            <param name="expression">要添加的新表达式</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.IExpression.DeleteExpression(PlatformManagement.Auth_Expression)">
            <summary>
            删除表达式
            </summary>
            <param name="expression">要删除的表达式</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.IExpression.UpdateExpression(PlatformManagement.Auth_Expression)">
            <summary>
            更新表达式
            </summary>
            <param name="expression">要更新的表达式</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="T:PlatformManagement.IDatabaseInfo">
            <summary>
            数据库信息接口
            </summary>
        </member>
        <member name="M:PlatformManagement.IDatabaseInfo.GetDatabaseName">
            <summary>
            获取数据库名称列表
            </summary>
            <returns>返回获取到的数据库名称列表</returns>
        </member>
        <member name="M:PlatformManagement.IDatabaseInfo.GetTableViewOfDatabase(System.String)">
            <summary>
            获取数据库表
            </summary>
            <param name="dbName">数据库名称</param>
            <returns>返回获取到的数据库中的用户表名称列表</returns>
        </member>
        <member name="M:PlatformManagement.IDatabaseInfo.GetFieldsOfTable(System.String,System.String)">
            <summary>
            获取指定表中的字段
            </summary>
            <param name="dbName">数据库名称</param>
            <param name="tableName">表名称</param>
            <returns>返回表中的字段信息</returns>
        </member>
        <member name="T:PlatformManagement.UpgradeManagement">
            <summary>
            升级管理数据库操作类
            </summary>
        </member>
        <member name="T:PlatformManagement.IUpgradeManagement">
            <summary>
            升级管理数据库操作接口
            </summary>
        </member>
        <member name="M:PlatformManagement.IUpgradeManagement.GetUpgradeInfo">
            <summary>
            获取所有升级信息
            </summary>
            <returns>成功返回获取到的升级信息，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IUpgradeManagement.GetUpgradeInfo(System.Int32)">
            <summary>
            获取升级信息
            </summary>
            <param name="id">纪录编号</param>
            <returns>成功返回获取到的升级信息,失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IUpgradeManagement.GetUpgradeInfo(System.String)">
            <summary>
            获取指定软件系统名称下的所有升级信息集
            </summary>
            <param name="softSystemName">软件系统名称</param>
            <returns>成功返回获取到的升级信息集,失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IUpgradeManagement.AddUpgradeInfo(PlatformManagement.Sys_AutoUpgrade)">
            <summary>
            添加新升级信息
            </summary>
            <param name="record">要添加的新升级信息</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.IUpgradeManagement.DeleteUpgradeInfo(PlatformManagement.Sys_AutoUpgrade)">
            <summary>
            删除升级信息
            </summary>
            <param name="record">要删除的升级信息</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.IUpgradeManagement.UpdateUpgradeInfo(PlatformManagement.Sys_AutoUpgrade)">
            <summary>
            更新升级信息
            </summary>
            <param name="record">要更新的升级信息</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="F:PlatformManagement.UpgradeManagement.m_ctx">
            <summary>
            权限管理数据库操作器
            </summary>
        </member>
        <member name="M:PlatformManagement.UpgradeManagement.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:PlatformManagement.UpgradeManagement.GetUpgradeInfo">
            <summary>
            获取所有升级信息
            </summary>
            <returns>成功返回获取到的升级信息，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.UpgradeManagement.GetUpgradeInfo(System.String)">
            <summary>
            获取指定软件系统名称下的所有升级信息集
            </summary>
            <param name="softSystemName">软件系统名称</param>
            <returns>成功返回获取到的升级信息集,失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.UpgradeManagement.GetUpgradeInfo(System.Int32)">
            <summary>
            获取指定纪录编号下的升级信息
            </summary>
            <param name="id">纪录编号</param>
            <returns>成功返回获取到的升级信息,失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.UpgradeManagement.AddUpgradeInfo(PlatformManagement.Sys_AutoUpgrade)">
            <summary>
            添加新升级信息
            </summary>
            <param name="record">要添加的新升级信息</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.UpgradeManagement.DeleteUpgradeInfo(PlatformManagement.Sys_AutoUpgrade)">
            <summary>
            删除升级信息
            </summary>
            <param name="record">要删除的升级信息</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.UpgradeManagement.UpdateUpgradeInfo(PlatformManagement.Sys_AutoUpgrade)">
            <summary>
            更新升级信息
            </summary>
            <param name="record">要更新的升级信息</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="T:PlatformManagement.Authorization">
            <summary>
            授权实体类
            </summary>
        </member>
        <member name="T:PlatformManagement.WebAuthorization">
            <summary>
            授权实体类
            </summary>
        </member>
        <member name="T:PlatformManagement.IWebAuthorization">
            <summary>
            Web授权接口
            </summary>
        </member>
        <member name="M:PlatformManagement.IWebAuthorization.ExecuteQuery(System.String)">
            <summary>
            执行查询命令获取查询结果
            </summary>
            <param name="sql">要执行的SQL语句</param>
            <returns>返回查询结果</returns>
            <remarks>仅有管理员才能调用此方法</remarks>
        </member>
        <member name="M:PlatformManagement.IWebAuthorization.GetSql(System.String,System.String,System.Object,System.String,System.Int32)">
            <summary>
            获取SQL语句
            </summary>
            <param name="businessID">业务编码</param>
            <param name="businessData">业务数据</param>
            <param name="sqlWhere">条件语句</param>
            <param name="recordAmount">要获取的记录条数</param>
            <returns>返回获取到的记录条数</returns>
        </member>
        <member name="M:PlatformManagement.IWebAuthorization.Query(System.String,System.String,System.Object)">
            <summary>
            执行查询业务
            </summary>
            <param name="userName">用户名</param>
            <param name="businessID">业务编号</param>
            <param name="businessData">业务数据</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PlatformManagement.IWebAuthorization.Query(System.String,System.String,System.Object,System.String)">
            <summary>
            执行查询业务
            </summary>
            <param name="userName">用户名</param>
            <param name="businessID">业务编号</param>
            <param name="businessData">业务数据</param>
            <param name="sqlWhere">用户自定义的where语句</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PlatformManagement.IWebAuthorization.QueryMultParam(System.String,System.String,System.Object[])">
            <summary>
            执行多参数查询业务
            </summary>
            <param name="userName">用户名</param>
            <param name="businessID">业务编号</param>
            <param name="lstParam">列表参数</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PlatformManagement.IWebAuthorization.QueryMultParam(System.String,System.String,System.Object[],System.String)">
            <summary>
            执行多参数查询业务
            </summary>
            <param name="userName">用户名</param>
            <param name="businessID">业务编号</param>
            <param name="paras">参数数组</param>
            <param name="sqlWhere">用户自定义的where语句</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PlatformManagement.IWebAuthorization.Query(System.String,System.String,System.Object,System.String,System.Int32)">
            <summary>
            执行查询业务
            </summary>
            <param name="userName">用户名</param>
            <param name="businessID">业务编号</param>
            <param name="businessData">业务数据</param>
            <param name="sqlWhere">用户自定义的where语句</param>
            <param name="recordAmount">要获取的记录数</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PlatformManagement.IWebAuthorization.TestBizLogic(System.Boolean,System.String,System.String,System.Object,System.Text.StringBuilder@)">
            <summary>
            测试查询类型的业务逻辑
            </summary>
            <param name="executeBizSqlFlag">是否执行业务SQL语句的标志</param>
            <param name="loginName">要测试的用户编码</param>
            <param name="businessID">业务编号</param>
            <param name="businessData">业务数据</param>
            <param name="bizSql">输出的业务SQL语句</param>
            <returns>查询结果</returns>
            <remarks>仅有管理员才能调用此方法</remarks>
        </member>
        <member name="F:PlatformManagement.WebAuthorization.m_businessData">
            <summary>
            业务数据
            </summary>
        </member>
        <member name="F:PlatformManagement.WebAuthorization.m_testUserName">
            <summary>
            测试时用的用户名称
            </summary>
        </member>
        <member name="F:PlatformManagement.WebAuthorization.m_authentication">
            <summary>
            用户授权
            </summary>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.VerifyAuthentication(PlatformManagement.IAuthentication,System.String)">
            <summary>
            校验授权
            </summary>
            <param name="authentication">授权</param>
            <param name="businessID">业务编码</param>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.VerifyBusiness(PlatformManagement.Auth_Business)">
            <summary>
            校验业务
            </summary>
            <param name="business">业务对象</param>
            <returns>成功返回ture</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.GetSql(System.String,System.String,System.Object,System.String,System.Int32)">
            <summary>
            获取SQL语句
            </summary>
            <param name="userName">用户名</param>
            <param name="businessID">业务编码</param>
            <param name="businessData">业务数据</param>
            <param name="sqlWhere">条件语句</param>
            <param name="recordAmount">要获取的记录条数</param>
            <returns>返回获取到的记录条数</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.Query(System.String,System.String,System.Object)">
            <summary>
            执行查询业务
            </summary>
            <param name="userName">用户名</param>
            <param name="businessID">业务编号</param>
            <param name="businessData">业务数据</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.Query(System.String,System.String,System.Object,System.String)">
            <summary>
            执行查询业务
            </summary>
            <param name="userName">用户名</param>
            <param name="businessID">业务编号</param>
            <param name="businessData">业务数据</param>
            <param name="sqlWhere">用户自定义的where语句</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.QueryMultParam(System.String,System.String,System.Object[])">
            <summary>
            执行多参数查询业务
            </summary>
            <param name="userName">用户名</param>
            <param name="businessID">业务编号</param>
            <param name="paras">参数数组</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.QueryMultParam(System.String,System.String,System.Object[],System.String)">
            <summary>
            执行多参数查询业务
            </summary>
            <param name="userName">用户名</param>
            <param name="businessID">业务编号</param>
            <param name="paras">参数数组</param>
            <param name="sqlWhere">用户自定义的where语句</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.Query(System.String,System.String,System.Object,System.String,System.Int32)">
            <summary>
            执行查询业务
            </summary>
            <param name="userName">用户名</param>
            <param name="businessID">业务编号</param>
            <param name="businessData">业务数据</param>
            <param name="sqlWhere">用户自定义的where语句</param>
            <param name="recordAmount">要获取的记录数</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.TestBizLogic(System.Boolean,System.String,System.String,System.Object,System.Text.StringBuilder@)">
            <summary>
            测试查询类型的业务逻辑
            </summary>
            <param name="executeBizSqlFlag">是否执行业务SQL语句的标志</param>
            <param name="loginName">要测试的用户编码</param>
            <param name="businessID">业务编号</param>
            <param name="businessData">业务数据</param>
            <param name="bizSql">输出的业务SQL语句</param>
            <returns>查询结果</returns>
            <remarks>仅有管理员才能调用此方法</remarks>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.IsValidParam(System.String)">
            <summary>
            判断是否正确的查询参数
            </summary>
            <param name="param">要检查的参数</param>
            <returns>正确返回true，失败抛出异常</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.IsValidQuery(System.String)">
            <summary>
            判断是否正确的查询语句
            </summary>
            <param name="sql">要检查的SQL语句</param>
            <returns>正确返回true，失败抛出异常</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.ExecuteQuery(System.String)">
            <summary>
            执行查询命令获取查询结果
            </summary>
            <param name="sql">要执行的SQL语句</param>
            <returns>返回查询结果</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.ExecuteQuery(System.String,System.String)">
            <summary>
            执行业务对应的查询命令获取查询结果
            </summary>
            <param name="businessID">业务编号</param>
            <param name="sql">要执行的SQL语句</param>
            <returns>返回查询结果</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.GetSensitiveFields(System.String)">
            <summary>
            获取事务的敏感字段及相应权限
            </summary>
            <param name="businessID">事务编号</param>
            <returns>获取到的敏感字段及相应权限</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.GetHideFields(PlatformManagement.FieldAuthorization[])">
            <summary>
            获取隐藏字段
            </summary>
            <param name="fa">敏感字段授权数组</param>
            <returns>返回获取到的隐藏字段数据, 没有返回null</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.ExecuteSql(System.String,PlatformManagement.QueryResult)">
            <summary>
            执行SQL语句
            </summary>
            <param name="sql">要执行的SQL语句</param>
            <param name="queryResult">返回的查询结果</param>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.GetLogicGroup(System.String,System.String,System.Collections.Generic.Dictionary{PlatformManagement.View_Auth_Role,System.Collections.Generic.List{System.Int32}})">
            <summary>
            获取过滤用的逻辑组编号列表
            </summary>
            <param name="loginName">用户登录名</param>
            <param name="businessID">业务编号</param>
            <param name="roleGroupIds">角色逻辑组</param>
            <returns>成功返回逻辑组编号列表，失败抛出异常</returns>
            <remarks>
            2010.11.02 进行了修改, 不再只选择最高级角色对指定业务的逻辑组，而是选择此用户所有角色的逻辑组
            举例如下，张三拥有质量总监、制造主管、普通人员等多种角色，在获取报废单查询业务时他应该可以获得质量总监的已经经过主管审批的单据，
            也可以获取主管的责任部门为本部门、单据为本部门提交的所有单据，也可以获取普通人员自己提交的单据
            </remarks>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.GenerateWhere(System.Collections.Generic.List{System.Int32})">
            <summary>
            根据逻辑组编号生成过滤用的where语句
            </summary>
            <param name="lstLogicGroupIds">过滤用的逻辑组编号数组</param>
            <returns>生成的where语句</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.GenerateLogicGroup(PlatformManagement.Auth_LogicGroup)">
            <summary>
            生成逻辑组字符串
            </summary>
            <param name="authLogicGroup">逻辑组</param>
            <returns>返回生成的逻辑组字符串</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.GenerateLogicExpression(PlatformManagement.Auth_LogicGroup)">
            <summary>
            根据逻辑组生成逻辑表达式
            </summary>
            <param name="logicGroup">逻辑组</param>
            <returns>生成的逻辑表达式</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.GenerateExpression(System.Int32)">
            <summary>
            生成表达式
            </summary>
            <param name="expressionId">表达式编号</param>
            <returns>生成的表达式</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.GetManageDepartmentCode(System.String)">
            <summary>
            从变量中提取其管辖的部门编码
            </summary>
            <param name="variantName">变量名称</param>
            <returns>成功返回获取到的部门编码，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.GetDepartmentCode(System.String)">
            <summary>
            从变量中提取部门编码
            </summary>
            <param name="variantName">变量名称</param>
            <returns>成功返回获取到的部门编码，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.GenerateIncludedSql(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            生成包含关系的SQL语句
            ( xx in ('xx', 'xx') )
            </summary>
            <param name="dataName">数据名称</param>
            <param name="lstData">数据项</param>
            <returns>返回生成的SQL语句</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.GenerateVariant(System.String)">
            <summary>
            生成变量描述
            </summary>
            <param name="variantName">变量名称</param>
            <returns>生成的变量描述</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.GetUserData(System.String)">
            <summary>
            获取用户数据
            </summary>
            <param name="fieldName">字段名</param>
            <returns>成功返回用户数据, 失败抛出异常</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthorization.GetBusinessData(System.String)">
            <summary>
            获取业务数据
            </summary>
            <param name="fieldName">字段名</param>
            <returns>成功返回用户数据, 失败抛出异常</returns>
        </member>
        <member name="T:PlatformManagement.IAuthorization">
            <summary>
            授权接口
            </summary>
        </member>
        <member name="M:PlatformManagement.IAuthorization.ExecuteQuery(System.String)">
            <summary>
            执行查询命令获取查询结果
            </summary>
            <param name="sql">要执行的SQL语句</param>
            <returns>返回查询结果</returns>
            <remarks>仅有管理员才能调用此方法</remarks>
        </member>
        <member name="M:PlatformManagement.IAuthorization.GetSql(System.String,System.Object,System.String,System.Int32)">
            <summary>
            获取SQL语句
            </summary>
            <param name="businessID">业务编码</param>
            <param name="businessData">业务数据</param>
            <param name="sqlWhere">条件语句</param>
            <param name="recordAmount">要获取的记录条数</param>
            <returns>返回获取到的记录条数</returns>
        </member>
        <member name="M:PlatformManagement.IAuthorization.Query(System.String,System.Object)">
            <summary>
            执行查询业务
            </summary>
            <param name="businessID">业务编号</param>
            <param name="businessData">业务数据</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PlatformManagement.IAuthorization.Query(System.String,System.Object,System.String)">
            <summary>
            执行查询业务
            </summary>
            <param name="businessID">业务编号</param>
            <param name="businessData">业务数据</param>
            <param name="sqlWhere">用户自定义的where语句</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PlatformManagement.IAuthorization.Query(System.String,System.Object,System.String,System.Int32)">
            <summary>
            执行查询业务
            </summary>
            <param name="businessID">业务编号</param>
            <param name="businessData">业务数据</param>
            <param name="sqlWhere">用户自定义的where语句</param>
            <param name="recordAmount">要获取的记录数</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PlatformManagement.IAuthorization.QueryMultParam(System.String,System.Object[])">
            <summary>
            执行多参数查询业务
            </summary>
            <param name="businessID">业务编号</param>
            <param name="paras">参数数组</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PlatformManagement.IAuthorization.QueryMultParam(System.String,System.String,System.Object[])">
            <summary>
            执行多参数查询业务
            </summary>
            <param name="businessID">业务编号</param>
            <param name="sqlWhere">附加的where语句</param>
            <param name="paras">参数数组</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PlatformManagement.IAuthorization.TestBizLogic(System.Boolean,System.String,System.String,System.Object,System.Text.StringBuilder@)">
            <summary>
            测试查询类型的业务逻辑
            </summary>
            <param name="executeBizSqlFlag">是否执行业务SQL语句的标志</param>
            <param name="loginName">要测试的用户编码</param>
            <param name="businessID">业务编号</param>
            <param name="businessData">业务数据</param>
            <param name="bizSql">输出的业务SQL语句</param>
            <returns>查询结果</returns>
            <remarks>仅有管理员才能调用此方法</remarks>
        </member>
        <member name="M:PlatformManagement.Authorization.GetSql(System.String,System.Object,System.String,System.Int32)">
            <summary>
            获取SQL语句
            </summary>
            <param name="businessID">业务编码</param>
            <param name="businessData">业务数据</param>
            <param name="sqlWhere">条件语句</param>
            <param name="recordAmount">要获取的记录条数</param>
            <returns>返回获取到的记录条数</returns>
        </member>
        <member name="M:PlatformManagement.Authorization.Query(System.String,System.Object)">
            <summary>
            执行查询业务
            </summary>
            <param name="businessID">业务编号</param>
            <param name="businessData">业务数据</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PlatformManagement.Authorization.Query(System.String,System.Object,System.String)">
            <summary>
            执行查询业务
            </summary>
            <param name="businessID">业务编号</param>
            <param name="businessData">业务数据</param>
            <param name="sqlWhere">用户自定义的where语句</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PlatformManagement.Authorization.Query(System.String,System.Object,System.String,System.Int32)">
            <summary>
            执行查询业务
            </summary>
            <param name="businessID">业务编号</param>
            <param name="businessData">业务数据</param>
            <param name="sqlWhere">用户自定义的where语句</param>
            <param name="recordAmount">要获取的记录数</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PlatformManagement.Authorization.QueryMultParam(System.String,System.Object[])">
            <summary>
            执行多参数查询业务
            </summary>
            <param name="businessID">业务编号</param>
            <param name="paras">参数数组</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PlatformManagement.Authorization.QueryMultParam(System.String,System.String,System.Object[])">
            <summary>
            执行多参数查询业务
            </summary>
            <param name="businessID">业务编号</param>
            <param name="sqlWhere">附加的where语句</param>
            <param name="paras">参数数组</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PlatformManagement.Authorization.QueryMultParam(System.String,System.String,System.Object,System.String,System.Object[])">
            <summary>
            执行多参数查询业务
            </summary>
            <param name="userName">执行此查询的用户编号</param>
            <param name="businessID">业务编号</param>
            <param name="businessData">业务数据</param>
            <param name="sqlWhere">附加的where语句</param>
            <param name="paras">参数数组</param>
            <returns>查询结果</returns>
        </member>
        <member name="T:PlatformManagement.IBasicServer">
            <summary>
            基础服务接口
            </summary>
        </member>
        <member name="M:PlatformManagement.IBasicServer.GetPlatformDataContext">
            <summary>
            获取平台管理数据库上下文
            </summary>
            <returns>返回数据库上下文</returns>
        </member>
        <member name="P:PlatformManagement.IBasicServer.QueryResultFilter">
            <summary>
            获取或设置查询过滤器
            </summary>
        </member>
        <member name="T:PlatformManagement.BasicServer">
            <summary>
            服务类基类
            </summary>
        </member>
        <member name="F:PlatformManagement.BasicServer.m_queryResultFilter">
            <summary>
            查询结果过滤器
            </summary>
        </member>
        <member name="F:PlatformManagement.BasicServer.m_ctx">
            <summary>
            数据库操作上下文
            </summary>
        </member>
        <member name="M:PlatformManagement.BasicServer.GetPlatformDataContext">
            <summary>
            获取数据库操作上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:PlatformManagement.BasicServer.ResetDataContext">
            <summary>
            重建数据库操作接口
            </summary>
        </member>
        <member name="M:PlatformManagement.BasicServer.DisposeException">
            <summary>
            处理异常
            </summary>
        </member>
        <member name="M:PlatformManagement.BasicServer.SetReturnError(System.Object,System.Object@,System.String@)">
            <summary>
            设置出错返回值
            </summary>
            <param name="err">传入的错误信息</param>
            <param name="returnResult">返回结果</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:PlatformManagement.BasicServer.SetReturnError(System.Object,PlatformManagement.IQueryResult@,System.String@)">
            <summary>
            设置出错返回值
            </summary>
            <param name="err">传入的错误信息</param>
            <param name="returnBill">报检入库单信息</param>
            <param name="error">返回的错误信息</param>
            <returns>永远只返回false</returns>
        </member>
        <member name="M:PlatformManagement.BasicServer.SetReturnError(System.Object,System.String@)">
            <summary>
            设置出错返回值
            </summary>
            <param name="err">传入的错误信息</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="P:PlatformManagement.BasicServer.QueryResultFilter">
            <summary>
            获取或设置查询结果过滤器
            </summary>
        </member>
        <member name="T:PlatformManagement.CloneObject">
            <summary>
            为对象提供克隆
            </summary>
        </member>
        <member name="M:PlatformManagement.CloneObject.DeepClone``1(System.Object)">
            <summary>
            深度克隆(采用序列化方式效率低, 需要被克隆对象标记为[Serializable])
            </summary>
            <typeparam name="T">要克隆对象的数据类型</typeparam>
            <param name="surObject">源数据</param>
            <returns>克隆后的数据</returns>
        </member>
        <member name="M:PlatformManagement.CloneObject.LowClone``1(System.Object)">
            <summary>
            Clone the object, and returning a reference to a cloned object.
            </summary>
            <param name="surObject">Clone the object</param>
            <returns>Reference to the new cloned object.</returns>
        </member>
        <member name="M:PlatformManagement.CloneObject.CloneProperties``1(System.Object)">
            <summary>
            Clone the object, and returning a reference to a cloned object.
            </summary>
            <param name="surObject">Clone the object</param>
            <returns>Reference to the new cloned object.</returns>
        </member>
        <member name="T:PlatformManagement.FunctionTree">
            <summary>
            功能树数据库操作类
            </summary>
        </member>
        <member name="T:PlatformManagement.IFunctionTree">
            <summary>
            功能树数据库操作接口
            </summary>
        </member>
        <member name="M:PlatformManagement.IFunctionTree.GetFunctionTree(System.Int32)">
            <summary>
            通过树编号获取功能树
            </summary>
            <param name="treeNumber">要功能的功能树的编号</param>
            <returns>返回获取到的功能树，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.IFunctionTree.GetTree(System.Int32,System.Collections.Generic.List{PlatformManagement.FunctionTreeNodeInfo}@,System.String@)">
            <summary>
            获取功能树
            </summary>
            <param name="treeNumber">要获取的功能树编号</param>
            <param name="lstFT">获取到的功能树信息列表</param>
            <param name="err">错误信息, 没有错误该值为null</param>
            <returns>成功获取得到的功能树信息返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.IFunctionTree.AddFunctionTree(PlatformManagement.Auth_FunTreeSystem,System.Collections.Generic.List{PlatformManagement.Auth_FunctionTree})">
            <summary>
            添加功能树
            </summary>
            <param name="funTreeSystem">功能树编号与名称间的映射</param>
            <param name="funTreeNodes">功能树节点列表</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.IFunctionTree.UpdateFunctionTree(PlatformManagement.Auth_FunTreeSystem,System.Collections.Generic.List{PlatformManagement.Auth_FunctionTree})">
            <summary>
            更新功能树
            </summary>
            <param name="funTreeSystem">功能树编号与名称间的映射</param>
            <param name="funTreeNodes">功能树节点列表</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.IFunctionTree.UpdateFunctionTree(PlatformManagement.AuthorityManagementDataContext,PlatformManagement.Auth_FunTreeSystem,System.Collections.Generic.List{PlatformManagement.Auth_FunctionTree})">
            <summary>
            更新功能树
            </summary>
            <param name="ctx">LINQ 数据库上下文, 必须开启事务功能</param>       
            <param name="funTreeSystem">功能树编号与名称间的映射</param>
            <param name="funTreeNodes">功能树节点列表</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.IFunctionTree.DeleteFunctionTree(PlatformManagement.AuthorityManagementDataContext,System.Int32)">
            <summary>
            从数据库中删除功能树节点信息
            </summary>
            <param name="ctx">LINQ 数据库上下文</param>
            <param name="treeNumber">功能树编号</param>
        </member>
        <member name="F:PlatformManagement.FunctionTree.m_ctx">
            <summary>
            数据内容操作器
            </summary>
        </member>
        <member name="M:PlatformManagement.FunctionTree.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:PlatformManagement.FunctionTree.GetFunctionTreeNodeInfo(System.Linq.IQueryable{PlatformManagement.Auth_FunctionTree},PlatformManagement.Auth_FunctionTree)">
            <summary>
            从数据行中获取功能树节点信息
            </summary>
            <param name="funcTrees">功能树信息集</param>
            <param name="data">功能树数据行</param>
            <returns>从数据行获取到的信息</returns>
        </member>
        <member name="M:PlatformManagement.FunctionTree.GetFunctionTree(System.Int32)">
            <summary>
            通过树编号获取功能树
            </summary>
            <param name="treeNumber">要功能的功能树的编号</param>
            <returns>返回获取到的功能树，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.FunctionTree.GetTree(System.Int32,System.Collections.Generic.List{PlatformManagement.FunctionTreeNodeInfo}@,System.String@)">
            <summary>
            获取功能树
            </summary>
            <param name="treeNumber">要获取的功能树编号</param>
            <param name="lstFT">获取到的功能树信息列表</param>
            <param name="err">错误信息, 没有错误该值为null</param>
            <returns>成功获取得到的功能树信息返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.FunctionTree.AddFunctionTree(PlatformManagement.Auth_FunTreeSystem,System.Collections.Generic.List{PlatformManagement.Auth_FunctionTree})">
            <summary>
            添加功能树
            </summary>
            <param name="funTreeSystem">功能树编号与名称间的映射</param>
            <param name="funTree">功能树列表</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.FunctionTree.UpdateFunctionTree(PlatformManagement.Auth_FunTreeSystem,System.Collections.Generic.List{PlatformManagement.Auth_FunctionTree})">
            <summary>
            更新功能树
            </summary>
            <param name="funTreeSystem">功能树编号与名称间的映射</param>
            <param name="funTreeNodes">功能树节点列表</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.FunctionTree.UpdateFunctionTree(PlatformManagement.AuthorityManagementDataContext,PlatformManagement.Auth_FunTreeSystem,System.Collections.Generic.List{PlatformManagement.Auth_FunctionTree})">
            <summary>
            更新功能树
            </summary>
            <param name="ctx">LINQ 数据库上下文</param>       
            <param name="funTreeSystem">功能树编号与名称间的映射</param>
            <param name="funTreeNodes">功能树节点列表</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.FunctionTree.DeleteFunctionTree(System.Int32)">
            <summary>
            从数据库中删除功能树节点信息
            </summary>
            <param name="treeNumber">功能树编号</param>
        </member>
        <member name="M:PlatformManagement.FunctionTree.DeleteFunctionTree(PlatformManagement.AuthorityManagementDataContext,System.Int32)">
            <summary>
            从数据库中删除功能树节点信息
            </summary>
            <param name="ctx">LINQ 数据库上下文</param>
            <param name="treeNumber">功能树编号</param>
        </member>
        <member name="T:PlatformManagement.Business">
            <summary>
            业务数据库操作类
            </summary>
        </member>
        <member name="T:PlatformManagement.IBusiness">
            <summary>
            业务数据库操作接口
            </summary>
        </member>
        <member name="M:PlatformManagement.IBusiness.GetBusiness">
            <summary>
            获取所有业务信息
            </summary>
            <returns>成功返回获取到的业务，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IBusiness.GetEntityBusiness">
            <summary>
            获取所有实体业务信息
            </summary>
            <returns>成功返回获取到的业务，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IBusiness.GetEntityBusinessView">
            <summary>
            获取所有实体业务视图信息
            </summary>
            <returns>成功返回获取到的业务，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IBusiness.GetBusiness(System.String)">
            <summary>
            获取指定的业务
            </summary>
            <param name="businessID">业务编码</param>
            <returns>成功返回获取到的业务，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IBusiness.GetBusinessView(System.String)">
            <summary>
            获取指定的业务视图
            </summary>
            <param name="businessID">业务编码</param>
            <returns>成功返回获取到的业务，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IBusiness.AddBusiness(PlatformManagement.Auth_Business)">
            <summary>
            添加新业务
            </summary>
            <param name="business">要添加的新业务</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.IBusiness.DeleteBusiness(PlatformManagement.Auth_Business)">
            <summary>
            删除业务
            </summary>
            <param name="business">要删除的业务</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.IBusiness.UpdateBusiness(PlatformManagement.Auth_Business)">
            <summary>
            更新业务
            </summary>
            <param name="business">要更新的业务</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="F:PlatformManagement.Business.m_ctx">
            <summary>
            权限管理数据库操作器
            </summary>
        </member>
        <member name="M:PlatformManagement.Business.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:PlatformManagement.Business.GetBusiness">
            <summary>
            获取所有业务信息
            </summary>
            <returns>成功返回获取到的业务，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.Business.GetEntityBusiness">
            <summary>
            获取所有实体业务信息
            </summary>
            <returns>成功返回获取到的业务，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.Business.GetEntityBusinessView">
            <summary>
            获取所有实体业务视图信息
            </summary>
            <returns>成功返回获取到的业务，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.Business.GetBusiness(System.String)">
            <summary>
            获取指定的业务
            </summary>
            <param name="businessID">业务编码</param>
            <returns>成功返回获取到的业务，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.Business.GetBusinessView(System.String)">
            <summary>
            获取指定的业务视图
            </summary>
            <param name="businessID">业务编码</param>
            <returns>成功返回获取到的业务，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.Business.AddBusiness(PlatformManagement.Auth_Business)">
            <summary>
            添加新业务
            </summary>
            <param name="business">要添加的新业务</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.Business.DeleteBusiness(PlatformManagement.Auth_Business)">
            <summary>
            删除业务
            </summary>
            <param name="business">要删除的业务</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.Business.UpdateBusiness(PlatformManagement.Auth_Business)">
            <summary>
            更新业务
            </summary>
            <param name="business">要更新的业务</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="T:PlatformManagement.RoleBaseInfo">
            <summary>
            角色基本信息
            </summary>
        </member>
        <member name="P:PlatformManagement.RoleBaseInfo.RoleCode">
            <summary>
            角色编码
            </summary>
        </member>
        <member name="P:PlatformManagement.RoleBaseInfo.IsInherited">
            <summary>
            是否是继承的角色
            </summary>
        </member>
        <member name="P:PlatformManagement.RoleBaseInfo.AuthorityMask">
            <summary>
            权限过滤
            </summary>
        </member>
        <member name="T:PlatformManagement.BusinessOperation">
            <summary>
            业务操作枚举
            </summary>
        </member>
        <member name="T:PlatformManagement.ExpressionOperation">
            <summary>
            表达式操作枚举
            </summary>
        </member>
        <member name="F:PlatformManagement.ExpressionOperation.Like">
            <summary>
            用于模糊查询
            </summary>
        </member>
        <member name="T:PlatformManagement.AuthorityBasicInfo">
            <summary>
            权限基础信息
            </summary>
        </member>
        <member name="M:PlatformManagement.AuthorityBasicInfo.GetBusinessOperation">
            <summary>
            获取业务操作集合
            </summary>
            <returns>返回获取到的业务操作集合</returns>
        </member>
        <member name="M:PlatformManagement.AuthorityBasicInfo.GetExpressionOperation">
            <summary>
            获取表达式操作集合
            </summary>
            <returns>返回获取到的表达式操作集合</returns>
        </member>
        <member name="M:PlatformManagement.AuthorityBasicInfo.GetLogicOperation">
            <summary>
            获取逻辑操作集合
            </summary>
            <returns>返回获取到的逻辑操作集合</returns>
        </member>
        <member name="T:PlatformManagement.ExpressionOperationConverter">
            <summary>
            表达式操作符转换器
            </summary>
            <remarks>将枚举转换成对应的SQL字符</remarks>
        </member>
        <member name="M:PlatformManagement.ExpressionOperationConverter.ToString(PlatformManagement.ExpressionOperation)">
            <summary>
            将表达式操作符转换为数据库可理解的字符串
            </summary>
            <param name="eo">表达式操作符</param>
            <returns>字符串</returns>
        </member>
        <member name="T:PlatformManagement.LogicOperation">
            <summary>
            逻辑操作枚举
            </summary>
        </member>
        <member name="T:PlatformManagement.VariantType">
            <summary>
            变量类型
            </summary>
        </member>
        <member name="F:PlatformManagement.VariantType.固定值">
            <summary>
            固定值
            </summary>
        </member>
        <member name="F:PlatformManagement.VariantType.用户属性名">
            <summary>
            用户属性名
            </summary>
        </member>
        <member name="F:PlatformManagement.VariantType.用户属性相关值">
            <summary>
            用户属性相关值
            </summary>
        </member>
        <member name="F:PlatformManagement.VariantType.业务属性名">
            <summary>
            业务属性名
            </summary>
        </member>
        <member name="F:PlatformManagement.VariantType.业务属性相关值">
            <summary>
            业务属性相关值
            </summary>
        </member>
        <member name="T:PlatformManagement.WebFaceAuthoritySetting">
            <summary>
            Web界面级权限设置管理类
            </summary>
        </member>
        <member name="M:PlatformManagement.WebFaceAuthoritySetting.AllowAccessPage(System.Collections.Generic.List{PlatformManagement.FunctionTreeNodeInfo},System.String)">
            <summary>
            判断是否允许访问指定页面
            </summary>
            <param name="authNodes">已授权节点</param>
            <param name="curNodeName">当前页面对应的节点名称</param>
            <returns>允许返回true</returns>
        </member>
        <member name="M:PlatformManagement.WebFaceAuthoritySetting.SetVisibly(System.Web.UI.Page,PlatformManagement.FunctionTreeNodeInfo)">
            <summary>
            设置WEB页面授权验证后页面元素的可见性
            </summary>
            <param name="page">要进行权限控制的页面</param>
            <param name="authNode">包含许可权限的节点信息</param>
        </member>
        <member name="M:PlatformManagement.WebFaceAuthoritySetting.SetVisibly(System.Web.UI.Control,PlatformManagement.FunctionTreeNodeInfo)">
            <summary>
            设置WEB页面指定控件授权验证后元素的可见性
            </summary>
            <param name="functionToolStrip">要进行权限控制的工具栏</param>
            <param name="authNode">包含许可权限的节点信息</param>
        </member>
        <member name="M:PlatformManagement.WebFaceAuthoritySetting.SetHtmlVisibly(System.Web.UI.Page,PlatformManagement.FunctionTreeNodeInfo,System.Boolean)">
            <summary>
            设置WEB页面HTML元素的可见性
            </summary>
            <param name="page">要进行权限控制的页面</param>
            <param name="authNode">包含许可权限的节点信息</param>
            <param name="isAjax">是否Ajax环境</param>
        </member>
        <member name="M:PlatformManagement.WebFaceAuthoritySetting.GetAuthFlag(System.String,PlatformManagement.AuthorityFlag)">
            <summary>
            根据权限字符串返回相应的权限标志
            </summary>
            <param name="strAuth">权限字符串</param>
            <param name="defaultAuth">权限字符串为空时给定的缺省权限</param>
            <returns>返回获取到的权限标志</returns>
        </member>
        <member name="M:PlatformManagement.WebFaceAuthoritySetting.GetAuthFlag(System.String,System.Collections.Generic.List{PlatformManagement.FunctionTreeNodeInfo},PlatformManagement.AuthorityFlag)">
            <summary>
            通过功能性节点返回相应的权限标志
            </summary>
            <param name="strAuth">权限字符串</param>
            <param name="defaultAuth">权限字符串为空时给定的缺省权限</param>
            <returns>返回获取到的权限标志</returns>
        </member>
        <member name="T:PlatformManagement.Properties.Resources">
            <summary>
              强类型资源类，用于查找本地化字符串等。
            </summary>
        </member>
        <member name="P:PlatformManagement.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:PlatformManagement.Properties.Resources.Culture">
            <summary>
              为使用此强类型资源类的所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:PlatformManagement.Properties.Resources.PlatformServiceConnectionString">
            <summary>
              查找类似 Data Source=INFOSYSDBSERVER;Initial Catalog=PlatformService;Persist Security Info=True;User ID=InfoSysUser 的本地化字符串。
            </summary>
        </member>
        <member name="T:PlatformManagement.IBusinessVariant">
            <summary>
            业务变量数据库操作接口
            </summary>
        </member>
        <member name="M:PlatformManagement.IBusinessVariant.GetBusinessVariant">
            <summary>
            获取所有业务变量信息
            </summary>
            <returns>成功返回获取到的业务变量，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IBusinessVariant.GetVariantNames(System.String)">
            <summary>
            获取指定业务对应的变量
            </summary>
            <param name="businessID">业务编码</param>
            <returns>成功返回获取到的变量编号列表,失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IBusinessVariant.AddBusinessVariant(PlatformManagement.Auth_BusinessVariant)">
            <summary>
            添加新业务变量
            </summary>
            <param name="businessVariant">要添加的新业务变量</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.IBusinessVariant.DeleteBusinessVariant(PlatformManagement.Auth_BusinessVariant)">
            <summary>
            删除业务变量
            </summary>
            <param name="businessVariant">要删除的业务变量</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="T:PlatformManagement.IUserDetails">
            <summary>
            用户详细信息
            </summary>
        </member>
        <member name="P:PlatformManagement.IUserDetails.IsAccountNonExpired">
            <summary>
            帐号是否没有过期
            </summary>
        </member>
        <member name="P:PlatformManagement.IUserDetails.IsAccountNonLocked">
            <summary>
            帐号是否没有锁定
            </summary>
        </member>
        <member name="P:PlatformManagement.IUserDetails.IsNonActived">
            <summary>
            帐号是否没有处于活动状态
            </summary>
            <remarks>用户登录后即为活动状态</remarks>
        </member>
        <member name="P:PlatformManagement.IUserDetails.IsCredentialsNonExpired">
            <summary>
            凭证是否没有过期
            </summary>
        </member>
        <member name="P:PlatformManagement.IUserDetails.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:PlatformManagement.IUserDetails.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:PlatformManagement.IUserDetails.RealName">
            <summary>
            真实姓名
            </summary>
        </member>
        <member name="P:PlatformManagement.IUserDetails.DeptCode">
            <summary>
            部门编码
            </summary>
        </member>
        <member name="P:PlatformManagement.IUserDetails.DeptName">
            <summary>
            部门名称
            </summary>
        </member>
        <member name="P:PlatformManagement.IUserDetails.IsAdmin">
            <summary>
            是否是管理员
            </summary>
        </member>
        <member name="P:PlatformManagement.IUserDetails.GrantedAuthorities">
            <summary>
            用户授权字典集
            </summary>
        </member>
        <member name="P:PlatformManagement.IUserDetails.GrantedBusiness">
            <summary>
            获取或设置用户授权业务集
            </summary>
        </member>
        <member name="P:PlatformManagement.IUserDetails.Roles">
            <summary>
            用户角色列表
            </summary>
        </member>
        <member name="T:PlatformManagement.IAuthentication">
            <summary>
            代表一个和应用程序交互的待认证用户
            </summary>
        </member>
        <member name="P:PlatformManagement.IAuthentication.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:PlatformManagement.IAuthentication.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:PlatformManagement.IAuthentication.RealName">
            <summary>
            真实姓名
            </summary>
        </member>
        <member name="P:PlatformManagement.IAuthentication.DeptCode">
            <summary>
            部门编码
            </summary>
        </member>
        <member name="P:PlatformManagement.IAuthentication.DeptName">
            <summary>
            部门名称
            </summary>
        </member>
        <member name="P:PlatformManagement.IAuthentication.IsAdmin">
            <summary>
            是否是管理员
            </summary>
        </member>
        <member name="P:PlatformManagement.IAuthentication.Roles">
            <summary>
            用户角色列表
            </summary>
        </member>
        <member name="P:PlatformManagement.IAuthentication.GrantedAuthorities">
            <summary>
            用户授权字典集
            </summary>
        </member>
        <member name="P:PlatformManagement.IAuthentication.GrantedBusiness">
            <summary>
            用户授权业务集
            </summary>
        </member>
        <member name="T:Encrypt.Encrypt_MD5">
            <summary>
            MD5加密
            </summary>
        </member>
        <member name="T:Encrypt.IEncrypt">
            <summary>
            Tcu编号加密解密接口
            </summary>
        </member>
        <member name="M:Encrypt.IEncrypt.EncryptData(System.String)">
            <summary>
            数据加密
            </summary>
            <param name="data">要加密的数据</param>
            <returns>加密后的值</returns>
        </member>
        <member name="M:Encrypt.IEncrypt.Collate(System.String,System.String)">
            <summary>
            数据与加密信息校对
            </summary>
            <param name="data">数据</param>
            <param name="EncryptValue">当前数据加密后的值</param>
            <returns>校对结果，数据的实际加密值与参数中输入的加密值一致时返回true</returns>
        </member>
        <member name="M:Encrypt.Encrypt_MD5.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Encrypt.Encrypt_MD5.EncryptData(System.String)">
            <summary>
            数据加密
            </summary>
            <param name="surData">要加密的数据</param>
            <returns>加密后的值</returns>
        </member>
        <member name="M:Encrypt.Encrypt_MD5.Collate(System.String,System.String)">
            <summary>
            Tcu编号校对
            </summary>
            <param name="surData">Tcu编号</param>
            <param name="EncryptValue">加密后的值</param>
            <returns>校对结果</returns>
        </member>
        <member name="T:PlatformManagement.TaskNotice">
            <summary>
            任务通知
            </summary>
        </member>
        <member name="T:PlatformManagement.ITaskNotice">
            <summary>
            任务通知
            </summary>
        </member>
        <member name="M:PlatformManagement.ITaskNotice.GetTaskNotice(System.String)">
            <summary>
            获取各类用户未读的任务通知
            </summary>
            <param name="userCode">用户编码</param>
            <returns>返回的查询结果</returns>
        </member>
        <member name="M:PlatformManagement.ITaskNotice.GetTaskNotice(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            获取指定的任务通知
            </summary>
            <param name="dicParams">传入的查询参数, 主键是字段名，键值是字段名对应的检索值</param>
            <returns>返回的查询结果</returns>
        </member>
        <member name="M:PlatformManagement.ITaskNotice.Send(PlatformManagement.Flow_TaskNotice)">
            <summary>
            发送任务通知类消息
            </summary>
            <param name="msg">消息内容</param>
            <returns>发送成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.ITaskNotice.Send(PlatformManagement.Flow_TaskNotice,System.Collections.Generic.List{System.String})">
            <summary>
            发送任务通知类消息
            </summary>
            <param name="msg">消息内容</param>
            <param name="lstUserCode">要知会的用户编码列表</param>
            <returns>发送成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.ITaskNotice.Delete(PlatformManagement.Flow_TaskNotice,System.Collections.Generic.List{System.String})">
            <summary>
            销毁指定任务消息
            </summary>
            <param name="msg">消息内容</param>
            <param name="lstUserCode">知会的用户编码列表</param>
            <returns>删除成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.ITaskNotice.Read(System.String,System.Int64)">
            <summary>
            对任务消息批示已阅
            </summary>
            <param name="userCode">接收方用户编码</param>
            <param name="msgID">消息编号</param>
            <returns>成功更新消息返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.ITaskNotice.Read(PlatformManagement.View_Flow_TaskNotice)">
            <summary>
            对任务消息批示已阅（参数中不为null的属性作为查询条件，将满足要求的消息批示已阅）
            </summary>
            <param name="taskNotice">任务知会消息（查询条件参数）</param>
            <returns>成功更新消息返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.ITaskNotice.WriteAdditionalInfo(System.String,System.Int64,PlatformManagement.Flow_TaskNotice)">
            <summary>
            任务消息写附加信息
            </summary>
            <param name="userCode">接收方用户编码</param>
            <param name="msgID">消息编号</param>
            <param name="additionalInfo">将查询结果集的附加信息更新成参数中不为空的值</param>
            <returns>成功更新消息返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.ITaskNotice.WriteAdditionalInfo(PlatformManagement.View_Flow_TaskNotice,PlatformManagement.Flow_TaskNotice)">
            <summary>
            任务消息写附加信息
            </summary>
            <param name="searchParam">查询条件参数，参数中不为null的属性作为查询条件</param>
            <param name="additionalInfo">将查询结果集的附加信息更新成参数中不为空的值</param>
            <returns>成功更新消息返回true, 失败返回false</returns>
        </member>
        <member name="F:PlatformManagement.TaskNotice.m_roleManagement">
            <summary>
            角色数据库操作接口
            </summary>
        </member>
        <member name="M:PlatformManagement.TaskNotice.GetTaskNotice(System.String)">
            <summary>
            获取各类用户未读的任务通知
            </summary>
            <param name="userCode">用户编码</param>
            <returns>返回的查询结果</returns>
        </member>
        <member name="M:PlatformManagement.TaskNotice.GetTaskNotice(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            获取指定的任务通知
            </summary>
            <param name="dicParams">传入的查询参数, 主键是字段名，键值是字段名对应的检索值</param>
            <returns>成功则返回的查询结果, 失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.TaskNotice.Send(PlatformManagement.Flow_TaskNotice)">
            <summary>
            发送任务通知类消息
            </summary>
            <param name="msg">消息内容</param>
            <returns>发送成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.TaskNotice.InitTaskNotice(PlatformManagement.Flow_TaskNotice)">
            <summary>
            初始化任务知会消息实体（如果属性为null则将其设置为""）
            </summary>
            <param name="msg">要初始化的消息</param>
        </member>
        <member name="M:PlatformManagement.TaskNotice.Send(PlatformManagement.Flow_TaskNotice,System.Collections.Generic.List{System.String})">
            <summary>
            发送任务通知类消息
            </summary>
            <param name="msg">消息内容</param>
            <param name="lstUserCode">要知会的用户编码列表</param>
            <returns>发送成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.TaskNotice.Delete(PlatformManagement.Flow_TaskNotice,System.Collections.Generic.List{System.String})">
            <summary>
            销毁指定任务消息
            如果消息实体参数发送人与接收人同时为空时则将指定任务编号的所有知会信息删除
            </summary>
            <param name="msg">消息内容</param>
            <param name="lstUserCode">知会的用户编码列表</param>
            <returns>删除成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.TaskNotice.Read(System.String,System.Int64)">
            <summary>
            对任务消息批示已阅
            </summary>
            <param name="userCode">接收方用户编码</param>
            <param name="msgID">消息编号</param>
            <returns>成功更新消息返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.TaskNotice.Read(PlatformManagement.View_Flow_TaskNotice)">
            <summary>
            对任务消息批示已阅（参数中不为null的属性作为查询条件，将满足要求的消息批示已阅）
            </summary>
            <param name="taskNotice">任务知会消息（查询条件参数）</param>
            <returns>成功更新消息返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.TaskNotice.WriteAdditionalInfo(System.String,System.Int64,PlatformManagement.Flow_TaskNotice)">
            <summary>
            任务消息写附加信息
            </summary>
            <param name="userCode">接收方用户编码</param>
            <param name="msgID">消息编号</param>
            <param name="additionalInfo">将查询结果集的附加信息更新成参数中不为空的值</param>
            <returns>成功更新消息返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.TaskNotice.WriteAdditionalInfo(PlatformManagement.View_Flow_TaskNotice,PlatformManagement.Flow_TaskNotice)">
            <summary>
            任务消息写附加信息
            </summary>
            <param name="searchParam">查询条件参数，参数中不为null的属性作为查询条件</param>
            <param name="additionalInfo">将查询结果集的附加信息更新成参数中不为空的值</param>
            <returns>成功更新消息返回true, 失败返回false</returns>
        </member>
        <member name="T:PlatformManagement.PlatformFactory">
            <summary>
            平台类厂, 获取平台管理系统中的各种接口
            </summary>
        </member>
        <member name="M:PlatformManagement.PlatformFactory.GetUserManagement">
            <summary>
            获取用户管理接口
            </summary>
            <returns>用户管理接口</returns>
        </member>
        <member name="M:PlatformManagement.PlatformFactory.GetRoleManagement">
            <summary>
            获取角色管理接口
            </summary>
            <returns>角色管理接口</returns>
        </member>
        <member name="M:PlatformManagement.PlatformFactory.GetDeptManagement">
            <summary>
            获取部门管理接口
            </summary>
            <returns>部门管理接口</returns>
        </member>
        <member name="M:PlatformManagement.PlatformFactory.GetObject``1">
            <summary>
            对象获取器
            </summary>
            <typeparam name="T">要获取的对象的类型</typeparam>
            <returns>成功返回获取到的对象, 失败返回null</returns>
        </member>
        <member name="T:PlatformManagement.Authentication">
            <summary>
            代表一个和应用程序交互的待认证用户
            </summary>
        </member>
        <member name="M:PlatformManagement.Authentication.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="username">用户名</param>
            <param name="password">密码</param>
        </member>
        <member name="P:PlatformManagement.Authentication.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:PlatformManagement.Authentication.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:PlatformManagement.Authentication.RealName">
            <summary>
            真实姓名
            </summary>
        </member>
        <member name="P:PlatformManagement.Authentication.DeptCode">
            <summary>
            部门编码
            </summary>
        </member>
        <member name="P:PlatformManagement.Authentication.DeptName">
            <summary>
            部门名称
            </summary>
        </member>
        <member name="P:PlatformManagement.Authentication.IsAdmin">
            <summary>
            获取或设置是否是管理员的标志
            </summary>
        </member>
        <member name="P:PlatformManagement.Authentication.GrantedAuthorities">
            <summary>
            用户授权字典集
            </summary>
        </member>
        <member name="P:PlatformManagement.Authentication.GrantedBusiness">
            <summary>
            用户授权业务集
            </summary>
        </member>
        <member name="P:PlatformManagement.Authentication.Roles">
            <summary>
            用户角色列表
            </summary>
        </member>
        <member name="T:PlatformManagement.UserDetails">
            <summary>
            用户详细信息
            </summary>
        </member>
        <member name="F:PlatformManagement.UserDetails.m_userManagement">
            <summary>
            用户管理器
            </summary>
        </member>
        <member name="F:PlatformManagement.UserDetails.m_roleManagement">
            <summary>
            角色管理器
            </summary>
        </member>
        <member name="F:PlatformManagement.UserDetails.m_lstGrantedBusiness">
            <summary>
            当前用户授权业务列表
            </summary>
        </member>
        <member name="F:PlatformManagement.UserDetails.m_lstRole">
            <summary>
            用户角色列表
            </summary>
        </member>
        <member name="M:PlatformManagement.UserDetails.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="loginName">用户登录名</param>
        </member>
        <member name="M:PlatformManagement.UserDetails.InitGrantedBusiness(System.Linq.IQueryable{PlatformManagement.View_Auth_Role})">
            <summary>
            初始化许可的业务
            </summary>
            <param name="roles">用户角色列表</param>
        </member>
        <member name="P:PlatformManagement.UserDetails.IsAccountNonExpired">
            <summary>
            帐号是否没有过期
            </summary>
        </member>
        <member name="P:PlatformManagement.UserDetails.IsAccountNonLocked">
            <summary>
            帐号是否没有锁定
            </summary>
        </member>
        <member name="P:PlatformManagement.UserDetails.IsNonActived">
            <summary>
            帐号是否没有处于活动状态
            </summary>
            <remarks>用户登录后即为活动状态</remarks>
        </member>
        <member name="P:PlatformManagement.UserDetails.IsCredentialsNonExpired">
            <summary>
            凭证是否没有过期
            </summary>
        </member>
        <member name="P:PlatformManagement.UserDetails.UserName">
            <summary>
            获取或设置用户名
            </summary>
        </member>
        <member name="P:PlatformManagement.UserDetails.Password">
            <summary>
            获取或设置密码
            </summary>
        </member>
        <member name="P:PlatformManagement.UserDetails.RealName">
            <summary>
            获取或设置用户真实姓名
            </summary>
        </member>
        <member name="P:PlatformManagement.UserDetails.DeptCode">
            <summary>
            部门编码
            </summary>
        </member>
        <member name="P:PlatformManagement.UserDetails.DeptName">
            <summary>
            部门名称
            </summary>
        </member>
        <member name="P:PlatformManagement.UserDetails.IsAdmin">
            <summary>
            获取或设置是否是管理员的标志
            </summary>
        </member>
        <member name="P:PlatformManagement.UserDetails.GrantedAuthorities">
            <summary>
            获取或设置用户授权字典集
            </summary>
        </member>
        <member name="P:PlatformManagement.UserDetails.GrantedBusiness">
            <summary>
            获取或设置用户授权业务集
            </summary>
        </member>
        <member name="P:PlatformManagement.UserDetails.Roles">
            <summary>
            用户角色列表
            </summary>
        </member>
        <member name="P:PlatformManagement.UserDetails.RoleInfo">
            <summary>
            角色信息
            </summary>
        </member>
        <member name="T:PlatformManagement.TransactionPriority">
            <summary>
            事务优先级
            </summary>
        </member>
        <member name="T:PlatformManagement.NoticeSource">
            <summary>
            通知来源
            </summary>
        </member>
        <member name="T:PlatformManagement.NoticeStatus">
            <summary>
            通知状态
            </summary>
        </member>
        <member name="T:PlatformManagement.IFlowNoticeManagement">
            <summary>
            通知类消息数据库操作类
            </summary>
        </member>
        <member name="M:PlatformManagement.IFlowNoticeManagement.GetNotice(System.String)">
            <summary>
            获取各类用户未读的接收通知
            </summary>
            <param name="userCode">用户编码</param>
            <returns>返回的查询结果，没有消息返回null</returns>
        </member>
        <member name="M:PlatformManagement.IFlowNoticeManagement.GetNotice(System.String,PlatformManagement.NoticeSource)">
            <summary>
            获取指定源类型用户未读的接收通知
            </summary>
            <param name="userCode">用户编码</param>
            <param name="sourceType">通知来源</param>
            <returns>返回的查询结果，没有消息返回null</returns>
        </member>
        <member name="M:PlatformManagement.IFlowNoticeManagement.SendNotice(PlatformManagement.Flow_Notice)">
            <summary>
            发送通知类消息
            </summary>
            <param name="msg">消息内容</param>
            <returns>发送成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.IFlowNoticeManagement.ReadNotice(System.String,System.Int64)">
            <summary>
            批阅通知(表示已阅)
            </summary>
            <param name="userCode">用户编码</param>
            <param name="msgID">通知序号</param>
            <returns>成功批阅消息返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.IFlowNoticeManagement.UpdateNotice(System.String,PlatformManagement.Flow_Notice)">
            <summary>
            更新通知类消息
            </summary>
            <param name="userCode">用户编码</param>
            <param name="msg">消息内容</param>
            <returns>成功更新消息返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.IFlowNoticeManagement.DeleteNotice(System.String,System.Int64)">
            <summary>
            销毁指定消息
            </summary>
            <param name="userCode">用户编码</param>
            <param name="msgID">消息编号</param>
            <returns>处理成功返回true, 失败返回false</returns>
        </member>
        <member name="T:PlatformManagement.DatabaseInfo">
            <summary>
            数据库信息实现类
            </summary>
        </member>
        <member name="M:PlatformManagement.DatabaseInfo.GetDatabaseName">
            <summary>
            获取数据库名称列表
            </summary>
            <returns>返回获取到的数据库名称列表</returns>
        </member>
        <member name="M:PlatformManagement.DatabaseInfo.GetTableViewOfDatabase(System.String)">
            <summary>
            获取数据库表及视图
            </summary>
            <param name="dbName">数据库名称</param>
            <returns>返回获取到的数据库中的用户级表和视图的名称列表</returns>
        </member>
        <member name="M:PlatformManagement.DatabaseInfo.GetFieldsOfTable(System.String,System.String)">
            <summary>
            获取指定表中的字段
            </summary>
            <param name="dbName">数据库名称</param>
            <param name="tableName">表名称</param>
            <returns>返回表中的字段信息</returns>
        </member>
        <member name="T:PlatformManagement.WebAuthenticationManager">
            <summary>
            网站授权管理者
            </summary>
        </member>
        <member name="F:PlatformManagement.WebAuthenticationManager.m_authentication">
            <summary>
            认证用户
            </summary>
        </member>
        <member name="M:PlatformManagement.WebAuthenticationManager.IdentifyAuthority(System.Object)">
            <summary>
            鉴定用户权限
            </summary>
            <param name="credential">用户权限凭证，如数字证书等</param>
            <returns>通过鉴定返回返回返回true</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthenticationManager.IdentifyAuthority(System.String,System.String)">
            <summary>
            鉴定用户权限
            </summary>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <returns>通过鉴定返回返回返回true</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthenticationManager.GetUseableTreeNode(System.Int32)">
            <summary>
            获取指定功能树的授权节点信息
            </summary>
            <param name="treeNumber">功能树编号</param>
            <returns>成功返回获取到的授权节点信息</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthenticationManager.GetUserInfo(System.String)">
            <summary>
            获取用户信息
            </summary>
            <param name="username">用户名</param>
            <returns>返回获取到的用户信息</returns>
        </member>
        <member name="M:PlatformManagement.WebAuthenticationManager.GetAuthenticationInfo(System.String)">
            <summary>
            获取用户认证信息
            </summary>
            <param name="username">用户名</param>
            <returns>返回获取到的认证信息</returns>
        </member>
        <member name="P:PlatformManagement.WebAuthenticationManager.Authentication">
            <summary>
            获取当前认证用户
            </summary>
            <returns>成功获取返回认证用信息, 失败返回null</returns>
        </member>
        <member name="T:PlatformManagement.ISensitiveInfoGroup">
            <summary>
            敏感信息组数据库操作接口
            </summary>
        </member>
        <member name="M:PlatformManagement.ISensitiveInfoGroup.AddSensitiveInfoGroup(PlatformManagement.View_Auth_SensitiveInfoGroup)">
            <summary>
            添加新敏感信息组
            </summary>
            <param name="sensitiveInfoGroup">要添加的新敏感信息组</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.ISensitiveInfoGroup.DeleteSensitiveInfoGroup(PlatformManagement.View_Auth_SensitiveInfoGroup)">
            <summary>
            删除敏感信息组
            </summary>
            <param name="sensitiveInfoGroup">要删除的敏感信息组</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.ISensitiveInfoGroup.GetSensitiveInfoGroup">
            <summary>
            获取所有敏感信息组
            </summary>
            <returns>返回获取到的敏感信息组</returns>
        </member>
        <member name="M:PlatformManagement.ISensitiveInfoGroup.UpdateSensitiveInfoGroup(PlatformManagement.View_Auth_SensitiveInfoGroup)">
            <summary>
            更新敏感信息组
            </summary>
            <param name="sensitiveInfoGroup">要更新的敏感信息组</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="T:PlatformManagement.BusinessVariant">
            <summary>
            业务变量数据库操作类
            </summary>
        </member>
        <member name="F:PlatformManagement.BusinessVariant.m_ctx">
            <summary>
            权限管理数据库操作器
            </summary>
        </member>
        <member name="M:PlatformManagement.BusinessVariant.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:PlatformManagement.BusinessVariant.GetBusinessVariant">
            <summary>
            获取所有业务变量信息
            </summary>
            <returns>成功返回获取到的业务变量，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.BusinessVariant.GetVariantNames(System.String)">
            <summary>
            获取指定业务对应的变量
            </summary>
            <param name="businessID">业务编码</param>
            <returns>成功返回获取到的变量编号列表,失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.BusinessVariant.AddBusinessVariant(PlatformManagement.Auth_BusinessVariant)">
            <summary>
            添加新业务变量
            </summary>
            <param name="businessVariant">要添加的新业务变量</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.BusinessVariant.DeleteBusinessVariant(PlatformManagement.Auth_BusinessVariant)">
            <summary>
            删除业务变量
            </summary>
            <param name="businessVariant">要删除的业务变量</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="T:PlatformManagement.GrantedBusiness">
            <summary>
            许可业务
            </summary>
        </member>
        <member name="T:PlatformManagement.IGrantedBusiness">
            <summary>
            许可的业务
            </summary>
        </member>
        <member name="P:PlatformManagement.IGrantedBusiness.BusinessID">
            <summary>
            业务编号
            </summary>
        </member>
        <member name="P:PlatformManagement.GrantedBusiness.BusinessID">
            <summary>
            业务编号
            </summary>
        </member>
        <member name="T:PlatformManagement.IBusinessAuthorization">
            <summary>
            业务授权数据库操作接口
            </summary>
        </member>
        <member name="M:PlatformManagement.IBusinessAuthorization.GetData">
            <summary>
            获取所有业务授权信息
            </summary>
            <returns>返回获取到的授权业务，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.IBusinessAuthorization.GetData(System.String)">
            <summary>
            获取指定角色所授权的业务
            </summary>
            <param name="roleCode">角色编码</param>
            <returns>返回获取到的授权业务，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.IBusinessAuthorization.GetAuthorizationRole(System.String)">
            <summary>
            获取指定业务所授权的角色编码
            </summary>
            <param name="businessID">业务编码</param>
            <returns>成功返回获取到的角色编码列表，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.IBusinessAuthorization.Add(PlatformManagement.Auth_BusinessAuthorization)">
            <summary>
            添加新授权业务
            </summary>
            <param name="businessAuthorization">要添加的新授权业务</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.IBusinessAuthorization.Delete(PlatformManagement.Auth_BusinessAuthorization)">
            <summary>
            删除授权业务
            </summary>
            <param name="businessAuthorization">要删除的授权业务</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.IBusinessAuthorization.Update(PlatformManagement.Auth_BusinessAuthorization)">
            <summary>
            更新授权业务
            </summary>
            <param name="businessAuthorization">要更新的授权业务</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="T:PlatformManagement.LogicGroup">
            <summary>
            逻辑组数据库操作类
            </summary>
        </member>
        <member name="F:PlatformManagement.LogicGroup.m_ctx">
            <summary>
            权限管理数据库操作器
            </summary>
        </member>
        <member name="M:PlatformManagement.LogicGroup.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:PlatformManagement.LogicGroup.GetLogicGroups">
            <summary>
            获取所有逻辑组信息
            </summary>
            <returns>返回获取到的逻辑组，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.LogicGroup.GetLogicGroups(System.String)">
            <summary>
            获取指定业务包含的逻辑组
            </summary>
            <param name="businessID">业务编码</param>
            <returns>返回获取到的逻辑组，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.LogicGroup.GetLogicGroups(System.Int32[])">
            <summary>
            批量获取指定编号的逻辑组
            </summary>
            <param name="logicGroupIds">逻辑组编码数组</param>
            <returns>返回获取到的逻辑组，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.LogicGroup.GetRootLogicGroups(System.String)">
            <summary>
            获取指定业务包含的根逻辑组
            </summary>
            <param name="businessID">业务编码</param>
            <returns>返回获取到的根逻辑组，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.LogicGroup.GetChildLogicGroups(PlatformManagement.Auth_LogicGroup)">
            <summary>
            获取指定逻辑组所包含的子逻辑组
            </summary>
            <param name="parentGroup">父逻辑组</param>
            <returns>返回获取到的逻辑组，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.LogicGroup.GetLogicGroup(System.Int32)">
            <summary>
            获取指定编号的逻辑组
            </summary>
            <param name="logicGroupId">组编码</param>
            <returns>返回获取到的逻辑组，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.LogicGroup.GetLogicGroupIds(System.String)">
            <summary>
            获取指定业务包含的逻辑组编号列表
            </summary>
            <param name="businessID">业务编码</param>
            <returns>成功返回获取到的逻辑组编号列表，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.LogicGroup.AddLogicGroup(PlatformManagement.Auth_LogicGroup)">
            <summary>
            添加新逻辑组
            </summary>
            <param name="logicGroup">要添加的新逻辑组</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.LogicGroup.DeleteLogicGroup(PlatformManagement.Auth_LogicGroup)">
            <summary>
            删除逻辑组
            </summary>
            <param name="logicGroup">要删除的逻辑组</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.LogicGroup.UpdateLogicGroup(PlatformManagement.Auth_LogicGroup)">
            <summary>
            更新逻辑组
            </summary>
            <param name="logicGroup">要更新的逻辑组</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="T:PlatformManagement.IWarningNotice">
            <summary>
            预警通知
            </summary>
        </member>
        <member name="M:PlatformManagement.IWarningNotice.GetWarningNotice(System.String)">
            <summary>
            获取各类用户未读的预警通知
            </summary>
            <param name="userCode">用户编码</param>
            <returns>返回的查询结果</returns>
        </member>
        <member name="M:PlatformManagement.IWarningNotice.GetWarningNotice(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            获取指定的预警通知
            </summary>
            <param name="dicParams">传入的查询参数, 主键是字段名，键值是字段名对应的检索值</param>
            <returns>返回的查询结果</returns>
        </member>
        <member name="M:PlatformManagement.IWarningNotice.SendWarningNotice(PlatformManagement.Flow_WarningNotice)">
            <summary>
            发送预警通知类消息
            </summary>
            <param name="msg">消息内容</param>
            <returns>发送成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.IWarningNotice.DeleteWarningNotice(System.Int64)">
            <summary>
            销毁指定预警消息
            </summary>
            <param name="msgID">消息编号</param>
            <returns>处理成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.IWarningNotice.ReadWarningNotice(System.String,System.Int64)">
            <summary>
            对预警消息批示已阅
            </summary>
            <param name="userCode">接收方用户编码</param>
            <param name="msgID">消息编号</param>
            <returns>成功更新消息返回true, 失败返回false</returns>
        </member>
        <member name="T:PlatformManagement.Expression">
            <summary>
            表达式数据库操作类
            </summary>
        </member>
        <member name="F:PlatformManagement.Expression.m_ctx">
            <summary>
            权限管理数据库操作器
            </summary>
        </member>
        <member name="M:PlatformManagement.Expression.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:PlatformManagement.Expression.GetExpression">
            <summary>
            获取所有表达式信息
            </summary>
            <returns>成功返回获取到的表达式，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.Expression.GetExpression(System.Int32[])">
            <summary>
            根据表达式编号数组批量获取表达式
            </summary>
            <param name="expressionIds">表达式编号数组</param>
            <returns>成功返回获取到的表达式集,失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.Expression.GetExpression(System.String)">
            <summary>
            获取包含指定变量表达式信息集
            </summary>
            <param name="variantName">变量名</param>
            <returns>成功返回获取到的表达式集,失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.Expression.GetExpression(System.Int32)">
            <summary>
            获取表达式
            </summary>
            <param name="expressionID">表达式编号</param>
            <returns>成功返回获取到的表达式,失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.Expression.AddExpression(PlatformManagement.Auth_Expression)">
            <summary>
            添加新表达式
            </summary>
            <param name="expression">要添加的新表达式</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.Expression.DeleteExpression(PlatformManagement.Auth_Expression)">
            <summary>
            删除表达式
            </summary>
            <param name="expression">要删除的表达式</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.Expression.UpdateExpression(PlatformManagement.Auth_Expression)">
            <summary>
            更新表达式
            </summary>
            <param name="expression">要更新的表达式</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="T:PlatformManagement.BusinessFilter">
            <summary>
            业务过滤器数据库操作类
            </summary>
        </member>
        <member name="T:PlatformManagement.IBusinessFilter">
            <summary>
            业务过滤器数据库操作接口
            </summary>
        </member>
        <member name="M:PlatformManagement.IBusinessFilter.GetData">
            <summary>
            获取所有业务过滤器过滤器信息
            </summary>
            <returns>成功返回获取到的业务过滤器，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IBusinessFilter.GetLogicGroupOfBusinessFilter(System.String,System.String)">
            <summary>
            获取角色对应业务过滤器的逻辑组
            </summary>
            <param name="roleCode">角色编码</param>
            <param name="businessID">业务编码</param>
            <returns>成功返回获取到的逻辑组编号,失败返回null, 如果角色没有此业务授权抛出异常</returns>
        </member>
        <member name="M:PlatformManagement.IBusinessFilter.GetRoleCodeOfBusinessFilter(System.Int32)">
            <summary>
            获取逻辑组所授予的角色编码列表
            </summary>
            <param name="logicGroupId">逻辑组编号</param>
            <returns>成功返回获取到的角色编码列表,失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IBusinessFilter.Add(PlatformManagement.Auth_BusinessFilter)">
            <summary>
            添加新业务过滤器
            </summary>
            <param name="businessFilter">要添加的新业务过滤器</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.IBusinessFilter.Delete(PlatformManagement.Auth_BusinessFilter)">
            <summary>
            删除业务过滤器
            </summary>
            <param name="businessFilter">要删除的业务过滤器</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="F:PlatformManagement.BusinessFilter.m_ctx">
            <summary>
            权限管理数据库操作器
            </summary>
        </member>
        <member name="M:PlatformManagement.BusinessFilter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:PlatformManagement.BusinessFilter.GetData">
            <summary>
            获取所有业务过滤器信息
            </summary>
            <returns>成功返回获取到的业务过滤器，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.BusinessFilter.GetLogicGroupOfBusinessFilter(System.String,System.String)">
            <summary>
            获取角色对应业务过滤器的逻辑组
            </summary>
            <param name="roleCode">角色编码</param>
            <param name="businessID">业务编码</param>
            <returns>成功返回获取到的逻辑组编号,失败返回null, 如果角色没有此业务授权抛出异常</returns>
        </member>
        <member name="M:PlatformManagement.BusinessFilter.GetRoleCodeOfBusinessFilter(System.Int32)">
            <summary>
            获取逻辑组所授予的角色编码列表
            </summary>
            <param name="logicGroupId">逻辑组编号</param>
            <returns>成功返回获取到的角色编码列表,失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.BusinessFilter.Add(PlatformManagement.Auth_BusinessFilter)">
            <summary>
            添加新业务过滤器
            </summary>
            <param name="businessFilter">要添加的新业务过滤器</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.BusinessFilter.Delete(PlatformManagement.Auth_BusinessFilter)">
            <summary>
            删除业务过滤器
            </summary>
            <param name="businessFilter">要删除的业务过滤器</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="T:PlatformManagement.StackTracer">
            <summary>
            堆栈跟踪器
            </summary>
        </member>
        <member name="M:PlatformManagement.StackTracer.GetCurrentMethodFullName(System.Int32)">
            <summary>
            获取当前的方法全名
            </summary>
            <param name="depth">堆栈深度，此值为1才能获取到上级堆栈值</param>
            <returns>获取到的名称，构成方式为：名称空间、类名、方法名</returns>
        </member>
        <member name="P:PlatformManagement.StackTracer.CurrentMethodFullName">
            <summary>
            获取当前的方法全名
            </summary>
            <returns>获取到的名称，构成方式为：名称空间、类名、方法名</returns>
        </member>
        <member name="M:PlatformManagement.MyRandom.RandomString(System.Int32,System.Int32[])">
            <summary>
            获取随机字符串
            </summary>
            <param name="strLength">字符串长度</param>
            <param name="Seed">随机函数种子值</param>
            <returns>指定长度的随机字符串</returns>
        </member>
        <member name="T:PlatformManagement.SensitiveInfoAuthorization">
            <summary>
            敏感信息授权数据库操作类
            </summary>
        </member>
        <member name="T:PlatformManagement.ISensitiveInfoAuthorization">
            <summary>
            敏感信息授权数据库操作接口
            </summary>
        </member>
        <member name="M:PlatformManagement.ISensitiveInfoAuthorization.AddAuthorization(PlatformManagement.View_Auth_SensitiveInfoAuthorization)">
            <summary>
            添加新敏感信息授权
            </summary>
            <param name="sensitiveInfoAuthorization">要添加的新敏感信息授权</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.ISensitiveInfoAuthorization.DeleteAuthorization(PlatformManagement.View_Auth_SensitiveInfoAuthorization)">
            <summary>
            删除敏感信息授权
            </summary>
            <param name="sensitiveInfoAuthorization">要删除的敏感信息授权</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.ISensitiveInfoAuthorization.DeleteAuthorization(System.Collections.Generic.List{PlatformManagement.View_Auth_SensitiveInfoAuthorization})">
            <summary>
            批量删除敏感信息授权
            </summary>
            <param name="lstSensitiveInfoAuthorization">要删除的敏感信息授权列表</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.ISensitiveInfoAuthorization.DeleteAuthorization(System.String,System.Int32)">
            <summary>
            删除指定角色编码对应敏感域下的所有敏感信息授权
            </summary>
            <param name="roleCode">角色编码</param>
            <param name="domainID">域ID</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.ISensitiveInfoAuthorization.GetSensitiveInfoAuthorization">
            <summary>
            获取所有敏感信息授权
            </summary>
            <returns>返回获取到的敏感信息授权</returns>
        </member>
        <member name="M:PlatformManagement.ISensitiveInfoAuthorization.GetSensitiveInfoAuthorization(System.String)">
            <summary>
            获取角色的敏感信息授权
            </summary>
            <param name="roleCode">角色编码</param>
            <returns>返回获取到的敏感信息授权</returns>
        </member>
        <member name="M:PlatformManagement.ISensitiveInfoAuthorization.GetSensitiveInfoAuthorization(System.String,System.Int32)">
            <summary>
            获取角色及敏感信息域对应的敏感信息授权
            </summary>
            <param name="roleCode">角色编码</param>
            <param name="domainID">敏感信息域编号</param>
            <returns>返回获取到的敏感信息授权</returns>
        </member>
        <member name="M:PlatformManagement.ISensitiveInfoAuthorization.UpdateAuthorization(PlatformManagement.View_Auth_SensitiveInfoAuthorization)">
            <summary>
            更新敏感信息授权
            </summary>
            <param name="sensitiveInfoAuthorization">要更新的敏感信息授权</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.ISensitiveInfoAuthorization.IsExist(PlatformManagement.View_Auth_SensitiveInfoAuthorization)">
            <summary>
            是否存在指定授权信息
            </summary>
            <param name="sensitiveInfoAuthorization">要检查的授权信息</param>
            <returns>存在返回true</returns>
        </member>
        <member name="M:PlatformManagement.SensitiveInfoAuthorization.GetSensitiveInfoAuthorization">
            <summary>
            获取所有敏感信息授权
            </summary>
            <returns>返回获取到的敏感信息授权</returns>
        </member>
        <member name="M:PlatformManagement.SensitiveInfoAuthorization.GetSensitiveInfoAuthorization(System.String)">
            <summary>
            获取角色的敏感信息授权
            </summary>
            <param name="roleCode">角色编码</param>
            <returns>返回获取到的敏感信息授权</returns>
        </member>
        <member name="M:PlatformManagement.SensitiveInfoAuthorization.GetSensitiveInfoAuthorization(System.String,System.Int32)">
            <summary>
            获取角色及敏感信息域对应的敏感信息授权
            </summary>
            <param name="roleCode">角色编码</param>
            <param name="domainID">敏感信息域编号</param>
            <returns>返回获取到的敏感信息授权</returns>
        </member>
        <member name="M:PlatformManagement.SensitiveInfoAuthorization.AddAuthorization(PlatformManagement.View_Auth_SensitiveInfoAuthorization)">
            <summary>
            添加新敏感信息授权
            </summary>
            <param name="sensitiveInfoAuthorization">要添加的新敏感信息授权</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.SensitiveInfoAuthorization.DeleteAuthorization(PlatformManagement.View_Auth_SensitiveInfoAuthorization)">
            <summary>
            删除敏感信息授权
            </summary>
            <param name="sensitiveInfoAuthorization">要删除的敏感信息授权</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.SensitiveInfoAuthorization.DeleteAuthorization(System.Collections.Generic.List{PlatformManagement.View_Auth_SensitiveInfoAuthorization})">
            <summary>
            批量删除敏感信息授权
            </summary>
            <param name="lstSensitiveInfoAuthorization">要删除的敏感信息授权列表</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.SensitiveInfoAuthorization.DeleteAuthorization(System.String,System.Int32)">
            <summary>
            删除指定角色编码对应敏感域下的所有敏感信息授权
            </summary>
            <param name="roleCode">角色编码</param>
            <param name="domainID">域ID</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.SensitiveInfoAuthorization.UpdateAuthorization(PlatformManagement.View_Auth_SensitiveInfoAuthorization)">
            <summary>
            更新敏感信息授权
            </summary>
            <param name="sensitiveInfoAuthorization">要更新的敏感信息授权</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.SensitiveInfoAuthorization.IsExist(PlatformManagement.View_Auth_SensitiveInfoAuthorization)">
            <summary>
            是否存在指定授权信息
            </summary>
            <param name="sensitiveInfoAuthorization">要检查的授权信息</param>
            <returns>存在返回true</returns>
        </member>
        <member name="T:PlatformManagement.DataContextFactory">
            <summary>
            数据内容类厂
            </summary>
        </member>
        <member name="P:PlatformManagement.DataContextFactory.AuthorityDataContext">
            <summary>
            获取权限管理数据库上下文操作对象
            </summary>
        </member>
        <member name="P:PlatformManagement.DataContextFactory.PlatformDataContext">
            <summary>
            获取平台管理数据库上下文操作对象
            </summary>
        </member>
        <member name="T:PlatformManagement.IFunctionTreeSystem">
            <summary>
            功能树系统数据库操作接口
            </summary>
            <remarks>功能树系统表只包含：功能树编号、功能树名称</remarks>
        </member>
        <member name="M:PlatformManagement.IFunctionTreeSystem.GetFunTreeSystem">
            <summary>
            获取功能树系统
            </summary>
            <returns>返回获取到的功能树系统，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.IFunctionTreeSystem.GetFunTreeSystem(System.Int32)">
            <summary>
            获取功能树系统
            </summary>
            <param name="treeNumber">要获取的功能树系统的编号</param>
            <returns>返回获取到的功能树系统，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.IFunctionTreeSystem.AddFunTreeSystem(PlatformManagement.AuthorityManagementDataContext,PlatformManagement.Auth_FunTreeSystem)">
            <summary>
            添加功能树
            </summary>
            <param name="ctx">LINQ数据库上下文</param>
            <param name="funTreeSystem">要添加的新功能树系统</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.IFunctionTreeSystem.DeleteFunTreeSystem(PlatformManagement.Auth_FunTreeSystem)">
            <summary>
            删除功能树
            </summary>
            <param name="funTreeSystem">要删除的功能树系统</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.IFunctionTreeSystem.UpdateFunTreeSystem(PlatformManagement.Auth_FunTreeSystem)">
            <summary>
            更新功能树
            </summary>
            <param name="funTreeSystem">要更新的功能树系统</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="T:PlatformManagement.RoleFunctionTree">
            <summary>
            角色功能树
            </summary>
        </member>
        <member name="T:PlatformManagement.IRoleFunctionTree">
            <summary>
            角色功能树数据库操作接口
            </summary>
        </member>
        <member name="M:PlatformManagement.IRoleFunctionTree.GetTree(System.Int32)">
            <summary>
            获取指定树编号的角色功能树列表
            </summary>
            <param name="treeNumber">要获取的功能树编号</param>
            <returns>成功则返回获取得到的功能树信息, 失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IRoleFunctionTree.GetUseableTree(System.Int32,System.String[])">
            <summary>
            获取已经授权的功能树节点信息（已经过滤掉无权限的节点，但功能性节点除外，功能性节点在FuncNodes属性中体现）
            </summary>
            <param name="treeNumber">功能树编号</param>
            <param name="roleCodes">用户角色数组</param>
            <returns>成功返回获取到的授权信息</returns>
        </member>
        <member name="M:PlatformManagement.IRoleFunctionTree.GetTree(System.Int32,System.String[],System.Collections.Generic.List{PlatformManagement.FunctionTreeNodeInfo}@,System.String@)">
            <summary>
            获取指定用户的功能树(没有滤掉无权限的节点)
            </summary>
            <param name="treeNumber">要获取的功能树编号</param>
            <param name="roleCodes">角色编号数组</param>
            <param name="lstFT">获取到的功能树信息列表</param>
            <param name="err">错误信息, 没有错误该值为null</param>
            <returns>成功获取得到的功能树信息返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.IRoleFunctionTree.GetViewData(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            获取角色功能树视图数据
            </summary>
            <param name="roleCodes">角色编码列表</param>
            <param name="treeNames">功能树名称列表，如果参数为null则表示获取所有的功能树</param>
            <returns>返回检索到的数据</returns>
        </member>
        <member name="M:PlatformManagement.IRoleFunctionTree.Delete(System.String,System.Int32,System.String@)">
            <summary>
            将匹配角色、树号的功能树删除
            </summary>
            <param name="roleCode">角色编号</param>
            <param name="treeNumber">树编号</param>
            <param name="err">错误信息, 没有错误该值为null</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.IRoleFunctionTree.SaveTree(System.String,System.Int32,System.String[],PlatformManagement.AuthorityFlag[],System.String@)">
            <summary>
            保存角色功能树
            </summary>
            <param name="roleCode">角色编号</param>
            <param name="treeNumber">树ID, 表示是哪颗树, 如：业务树</param>
            <param name="treeNodeCodes">树节点编号数组</param>
            <param name="authorities">树节点权限构成数组</param>
            <param name="err">错误信息, 没有错误该值为null</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.IRoleFunctionTree.UpdateTree(PlatformManagement.Auth_FunTreeSystem,System.Collections.Generic.List{PlatformManagement.Auth_FunctionTree})">
            <summary>
            更新角色功能树
            </summary>
            <param name="fts">功能树系统信息</param>
            <param name="lstFunTree">功能树信息</param>
            <returns>成功返回true, 其它为false</returns>
            <remarks>
            因为Auth_FunctionTree表与Auth_RoleFunctionTree表之间存在级联更新删除的关系，在功能树被改变后角色功能树信息会丢失
            通过此方法重建角色功能树的记录
            </remarks>
        </member>
        <member name="F:PlatformManagement.RoleFunctionTree.m_splitChars">
            <summary>
            原功能树节点因位置发生变化时会同时保留原节点编号和新节点编号，中间用此分隔符隔开
            </summary>
        </member>
        <member name="M:PlatformManagement.RoleFunctionTree.GetTree(System.Int32)">
            <summary>
            获取指定树编号的角色功能树列表
            </summary>
            <param name="treeNumber">要获取的功能树编号</param>
            <returns>成功则返回获取得到的功能树信息, 失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.RoleFunctionTree.GetTree(System.Int32,System.String[],System.Collections.Generic.List{PlatformManagement.FunctionTreeNodeInfo}@,System.String@)">
            <summary>
            获取指定用户的功能树(没有滤掉无权限的节点)
            </summary>
            <param name="treeNumber">要获取的功能树编号</param>
            <param name="roleCodes">角色编号数组</param>
            <param name="lstFT">获取到的功能树信息列表</param>
            <param name="err">错误信息, 没有错误该值为null</param>
            <returns>成功获取得到的功能树信息返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.RoleFunctionTree.GetUseableTree(System.Int32,System.String[])">
            <summary>
            获取已经授权的功能树节点信息（已经过滤掉无权限的节点，但功能性节点除外，功能性节点在FuncNodes属性中体现）
            </summary>
            <param name="treeNumber">功能树编号</param>
            <param name="roleCodes">用户角色数组</param>
            <returns>成功返回获取到的授权信息</returns>
        </member>
        <member name="M:PlatformManagement.RoleFunctionTree.Delete(System.String,System.Int32,System.String@)">
            <summary>
            将匹配角色、树号的功能树删除
            </summary>
            <param name="roleCode">角色编号</param>
            <param name="treeNumber">树编号</param>
            <param name="err">错误信息, 没有错误该值为null</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.RoleFunctionTree.DeleteFunctionTree(PlatformManagement.AuthorityManagementDataContext,System.Int32)">
            <summary>
            将匹配树号的功能树删除
            </summary>
            <param name="ctx">LINQ数据库上下文</param>
            <param name="treeNumber">树编号</param>
        </member>
        <member name="M:PlatformManagement.RoleFunctionTree.SaveTree(System.String,System.Int32,System.String[],PlatformManagement.AuthorityFlag[],System.String@)">
            <summary>
            保存角色功能树
            </summary>
            <param name="roleCode">角色编号</param>
            <param name="treeNumber">树ID, 表示是哪颗树, 如：业务树</param>
            <param name="treeNodeCodes">树节点编号数组</param>
            <param name="authorities">树节点权限构成数组</param>
            <param name="err">错误信息, 没有错误该值为null</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.RoleFunctionTree.UpdateTree(PlatformManagement.Auth_FunTreeSystem,System.Collections.Generic.List{PlatformManagement.Auth_FunctionTree})">
            <summary>
            更新角色功能树
            </summary>
            <param name="fts">功能树系统信息</param>
            <param name="lstFunTree">功能树信息</param>
            <returns>成功返回true, 其它为false</returns>
            <remarks>
            因为Auth_FunctionTree表与Auth_RoleFunctionTree表之间存在级联更新删除的关系，在功能树被改变后角色功能树信息会丢失
            通过此方法重建角色功能树的记录
            </remarks>
        </member>
        <member name="M:PlatformManagement.RoleFunctionTree.GetViewData(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            获取角色功能树视图数据
            </summary>
            <param name="roleCodes">角色编码列表</param>
            <param name="treeNames">功能树名称列表，如果参数为null则表示获取所有的功能树</param>
            <returns>返回检索到的数据</returns>
        </member>
        <member name="M:PlatformManagement.RoleFunctionTree.GetParentNode(System.String,System.Collections.Generic.List{PlatformManagement.Auth_FunctionTree})">
            <summary>
            获取指定节点在功能树中新的父节点(使用新编号扫描得到新的父节点)
            </summary>
            <param name="childNodeCode">子节点编号(只能是新编号)</param>
            <param name="lstFunTreeNode">功能树节点列表</param>
            <returns>返回获取到的父节点,没有返回null</returns>
        </member>
        <member name="M:PlatformManagement.RoleFunctionTree.GetParentNodeAllowAuthorityInFunctionTree(System.String,System.Collections.Generic.List{PlatformManagement.Auth_FunctionTree})">
            <summary>
            获取节点在功能树中所有父节点合并的许可权限
            </summary>
            <param name="newCode">节点新编号</param>
            <param name="lstFunTreeNode">功能树节点列表</param>
            <returns>返回获取到的许可权限</returns>
        </member>
        <member name="M:PlatformManagement.RoleFunctionTree.GetParentNodeAuthority(System.String,System.String,PlatformManagement.Auth_FunctionTree,System.Collections.Generic.List{PlatformManagement.Auth_RoleFunctionTree})">
            <summary>
            获取父节点权限
            </summary>
            <param name="roleCode">角色编码</param>
            <param name="newCode">发生变化后的节点编码</param>
            <param name="parentFunTreeNode">新节点在功能树中的父节点</param>
            <param name="lstRoleFunTree">角色功能树表</param>
            <remarks>当发生了功能树节点的位置变化(右移)时如果父节点没有权限，子节点也不能有权限</remarks>
        </member>
        <member name="M:PlatformManagement.RoleFunctionTree.GetRoleFunctionTree(System.String,System.String@)">
            <summary>
            根据角色ID获取该角色对应的功能树
            </summary>
            <param name="roleCode">角色编号</param>
            <param name="err">错误信息, 没有错误该值为null</param>
            <returns>成功则返回获取得到的角色功能树信息, 其它为null</returns>
        </member>
        <member name="M:PlatformManagement.RoleFunctionTree.GetFunTreeNode(System.Collections.Generic.List{PlatformManagement.FunctionTreeNodeInfo},PlatformManagement.Auth_RoleFunctionTree)">
            <summary>
            根据角色功能树节点信息从功能树节点列表中查找相应的树节点
            </summary>
            <param name="lstFunTreeNodeInfo">要查找的功能树节点列表</param>
            <param name="roleFunTree">角色功能树节点信息</param>
            <returns>成功返回树节点信息,失败返回null</returns>
        </member>
        <member name="T:PlatformManagement.IExpressionGroup">
            <summary>
            表达式组数据库操作接口
            </summary>
        </member>
        <member name="M:PlatformManagement.IExpressionGroup.GetExpressionGroup">
            <summary>
            获取所有表达式组信息
            </summary>
            <returns>成功返回获取到的表达式组，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IExpressionGroup.GetExpressionGroup(System.Int32)">
            <summary>
            获取逻辑组中所含的所有表达式组
            </summary>
            <param name="logicGroupID">逻辑组编号</param>
            <returns>成功返回获取到的逻辑组,失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IExpressionGroup.GetExpressionGroup(System.Int32,System.Int32)">
            <summary>
            获取表达式组信息
            </summary>
            <param name="logicGroupID">逻辑组编号</param>
            <param name="expressionID">表达式编号</param>
            <returns>成功返回获取到的表达式组，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IExpressionGroup.GetExpressionIds(System.Int32)">
            <summary>
            获取逻辑组编号对应的表达式编号
            </summary>
            <param name="logicGroupID">逻辑组编号</param>
            <returns>成功返回获取到的逻辑组编号,失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IExpressionGroup.AddExpressionGroup(PlatformManagement.Auth_ExpressionGroup)">
            <summary>
            添加新表达式组
            </summary>
            <param name="expressionGroup">要添加的新表达式组</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.IExpressionGroup.DeleteExpressionGroup(PlatformManagement.Auth_ExpressionGroup)">
            <summary>
            删除表达式组
            </summary>
            <param name="expressionGroup">要删除的表达式组</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="T:PlatformManagement.BusinessAuthorization">
            <summary>
            业务授权数据库操作类
            </summary>
        </member>
        <member name="F:PlatformManagement.BusinessAuthorization.m_ctx">
            <summary>
            权限管理数据库操作器
            </summary>
        </member>
        <member name="M:PlatformManagement.BusinessAuthorization.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:PlatformManagement.BusinessAuthorization.GetData">
            <summary>
            获取所有业务授权信息
            </summary>
            <returns>返回获取到的授权业务，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.BusinessAuthorization.GetData(System.String)">
            <summary>
            获取指定角色所授权的业务
            </summary>
            <param name="roleCode">角色编码</param>
            <returns>返回获取到的授权业务，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.BusinessAuthorization.GetAuthorizationRole(System.String)">
            <summary>
            获取指定业务所授权的角色编码
            </summary>
            <param name="businessID">业务编码</param>
            <returns>成功返回获取到的角色编码列表，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.BusinessAuthorization.Add(PlatformManagement.Auth_BusinessAuthorization)">
            <summary>
            添加新授权业务
            </summary>
            <param name="businessAuthorization">要添加的新授权业务</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.BusinessAuthorization.Delete(PlatformManagement.Auth_BusinessAuthorization)">
            <summary>
            删除授权业务
            </summary>
            <param name="businessAuthorization">要删除的授权业务</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.BusinessAuthorization.Update(PlatformManagement.Auth_BusinessAuthorization)">
            <summary>
            更新授权业务
            </summary>
            <param name="businessAuthorization">要更新的授权业务</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="T:PlatformManagement.ILogManagement">
            <summary>
            日志管理接口
            </summary>
        </member>
        <member name="M:PlatformManagement.ILogManagement.GetLog(System.DateTime,System.DateTime)">
            <summary>
            获取日期范围内的记录
            </summary>
            <param name="beginDate">开始时间</param>
            <param name="endDate">结束时间</param>
            <returns>获取到的记录</returns>
        </member>
        <member name="M:PlatformManagement.ILogManagement.WriteLog(PlatformManagement.SYS_Log,System.String@)">
            <summary>
            写日志
            </summary>
            <param name="log">要写入的日子内容</param>
            <param name="error">出错时返回的错误信息</param>
            <returns>操作是否成功的标志</returns>
        </member>
        <member name="M:PlatformManagement.ILogManagement.WriteException(System.String,System.String,System.String@)">
            <summary>
            写异常消息日志
            </summary>
            <param name="name">事件名称</param>
            <param name="content">异常内容</param>
            <param name="error">出错时返回的错误信息</param>
            <returns>操作是否成功的标志</returns>
        </member>
        <member name="M:PlatformManagement.ILogManagement.WriteException(System.String,System.String@)">
            <summary>
            写异常消息日志(事件名称默认为：名称空间、类名、方法名)
            </summary>
            <param name="content">异常内容</param>
            <param name="error">出错时返回的错误信息</param>
            <returns>操作是否成功的标志</returns>
        </member>
        <member name="M:PlatformManagement.ILogManagement.WriteUpdateLog``1(System.String,System.String,System.Collections.Generic.List{System.String},``0,``0)">
            <summary>
            写更新日志
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="userCode">操作人员工号</param>
            <param name="name">事件名称</param>
            <param name="keyNames">主键名称</param>
            <param name="oldObj">更新前的数据</param>
            <param name="newObj">更新后的数据</param>
            <returns>返回生成的日志</returns>
        </member>
        <member name="M:PlatformManagement.LogManagement.WriteLog(PlatformManagement.SYS_Log,System.String@)">
            <summary>
            写日志
            </summary>
            <param name="log">要写入的日子内容</param>
            <param name="error">出错时返回的错误信息</param>
            <returns>操作是否成功的标志</returns>
        </member>
        <member name="M:PlatformManagement.LogManagement.WriteUpdateLog``1(System.String,System.String,System.Collections.Generic.List{System.String},``0,``0)">
            <summary>
            写更新日志
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="userCode">操作人员工号</param>
            <param name="name">事件名称</param>
            <param name="keyNames">主键名称</param>
            <param name="oldObj">更新前的数据</param>
            <param name="newObj">更新后的数据</param>
            <returns>返回生成的日志</returns>
        </member>
        <member name="M:PlatformManagement.LogManagement.WriteException(System.String,System.String,System.String@)">
            <summary>
            写异常消息日志
            </summary>
            <param name="name">事件名称</param>
            <param name="content">异常内容</param>
            <param name="error">出错时返回的错误信息</param>
            <returns>操作是否成功的标志</returns>
        </member>
        <member name="M:PlatformManagement.LogManagement.WriteException(System.String,System.String@)">
            <summary>
            写异常消息日志
            </summary>
            <param name="content">异常内容</param>
            <param name="error">出错时返回的错误信息</param>
            <returns>操作是否成功的标志</returns>
        </member>
        <member name="M:PlatformManagement.LogManagement.GetLog(System.DateTime,System.DateTime)">
            <summary>
            获取日期范围内的记录
            </summary>
            <param name="beginDate">开始时间</param>
            <param name="endDate">结束时间</param>吗，。 
            <returns>获取到的记录</returns>
        </member>
        <member name="T:Encrypt.EncryptFactroy">
            <summary>
            Tcu算法管理类
            </summary>
        </member>
        <member name="F:Encrypt.EncryptFactroy.m_currentEncrypt">
            <summary>
            当前加密算法名称
            </summary>
        </member>
        <member name="M:Encrypt.EncryptFactroy.GetEncrypt(System.String)">
            <summary>
            获取加密算法
            </summary>
            <param name="name">算法名称</param>
            <returns>加密类</returns>
        </member>
        <member name="P:Encrypt.EncryptFactroy.CurrentEncrypt">
            <summary>
            获取当前加密算法接口
            </summary>
        </member>
        <member name="T:PlatformManagement.SensitiveInfoGroup">
            <summary>
            敏感信息组数据库操作类
            </summary>
        </member>
        <member name="F:PlatformManagement.SensitiveInfoGroup.m_ctx">
            <summary>
            权限管理数据库操作器
            </summary>
        </member>
        <member name="M:PlatformManagement.SensitiveInfoGroup.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:PlatformManagement.SensitiveInfoGroup.GetSensitiveInfoGroup">
            <summary>
            获取所有敏感信息组
            </summary>
            <returns>返回获取到的敏感信息组</returns>
        </member>
        <member name="M:PlatformManagement.SensitiveInfoGroup.AddSensitiveInfoGroup(PlatformManagement.View_Auth_SensitiveInfoGroup)">
            <summary>
            添加新敏感信息组
            </summary>
            <param name="sensitiveInfoGroup">要添加的新敏感信息组</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.SensitiveInfoGroup.DeleteSensitiveInfoGroup(PlatformManagement.View_Auth_SensitiveInfoGroup)">
            <summary>
            删除敏感信息组
            </summary>
            <param name="sensitiveInfoGroup">要删除的敏感信息组</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.SensitiveInfoGroup.UpdateSensitiveInfoGroup(PlatformManagement.View_Auth_SensitiveInfoGroup)">
            <summary>
            更新敏感信息组
            </summary>
            <param name="sensitiveInfoGroup">要更新的敏感信息组</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="T:PlatformManagement.MessageTypeEnum">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="F:PlatformManagement.MessageTypeEnum.知会消息">
            <summary>
            知会消息
            </summary>
        </member>
        <member name="F:PlatformManagement.MessageTypeEnum.单据消息">
            <summary>
            单据消息
            </summary>
        </member>
        <member name="T:PlatformManagement.BillFlowMessage_ReceivedUserType">
            <summary>
            接收方类型
            </summary>
        </member>
        <member name="T:PlatformManagement.BillStatus">
            <summary>
            单据状态
            </summary>
        </member>
        <member name="T:PlatformManagement.IBillFlowMessage">
            <summary>
            针对单据的流消息(单据在流动过程中发生的消息传递)
            </summary>
        </member>
        <member name="M:PlatformManagement.IBillFlowMessage.GetReceivedMessage(System.String)">
            <summary>
            获取指定用户接收到的单据消息(不包含自己发送的消息)
            </summary>
            <param name="userCode">用户编码</param>
            <returns>返回的查询结果</returns>
        </member>
        <member name="M:PlatformManagement.IBillFlowMessage.GetMessage(System.String)">
            <summary>
            获取指定用户的所有单据消息
            </summary>
            <param name="userCode">用户编码</param>
            <returns>返回的查询结果，没有消息返回null</returns>
        </member>
        <member name="M:PlatformManagement.IBillFlowMessage.GetMessage(System.String,System.String,System.String)">
            <summary>
            获取指定的单据消息
            </summary>
            <param name="userCode">用户编码</param>
            <param name="billType">单据类型</param>
            <param name="billSerialNo">单据流水号</param>
            <returns>返回的查询结果，没有消息返回null</returns>
        </member>
        <member name="M:PlatformManagement.IBillFlowMessage.SendRequestMessage(System.String,PlatformManagement.Flow_BillFlowMessage)">
            <summary>
            发送请求类消息
            </summary>
            <param name="userCode">请求方用户编码</param>
            <param name="msg">消息内容</param>
            <returns>发送成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.IBillFlowMessage.RespondMessage(System.String,System.Int64,PlatformManagement.TransactionPriority,System.String)">
            <summary>
            单据处理后的回复消息
            </summary>
            <param name="userCode">用户编码</param>
            <param name="requestMsgID">请求消息的编号</param>
            <param name="priority">优先级</param>
            <param name="responseMsg">回复的消息</param>
            <returns>处理成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.IBillFlowMessage.ContinueMessage(System.String,PlatformManagement.Flow_BillFlowMessage)">
            <summary>
            继续发送请求类消息
            </summary>
            <param name="userCode">请求方用户编码</param>
            <param name="msg">消息内容</param>
            <returns>发送成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.IBillFlowMessage.RebackMessage(System.String,System.Int64,System.String)">
            <summary>
            回退指定消息, 只有接收方才可以回退消息
            </summary>
            <param name="userCode">回复方用户编码</param>
            <param name="msgID">消息编号</param>
            <param name="msgContent">消息内容</param>
            <returns>处理成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.IBillFlowMessage.EndMessage(System.String,System.Int64,System.String)">
            <summary>
            结束指定消息（表示该消息已经完成）, 只有接收方才可以结束消息
            </summary>
            <param name="userCode">回复方用户编码</param>
            <param name="msgID">消息编号</param>
            <param name="msgContent">消息内容</param>
            <returns>处理成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.IBillFlowMessage.DestroyMessage(System.String,System.Int64)">
            <summary>
            销毁指定消息,只有发起者才能够销毁自己发出去的消息
            </summary>
            <param name="userCode">用户编码</param>
            <param name="msgID">消息编号</param>
            <returns>处理成功返回true, 失败返回false</returns>
        </member>
        <member name="T:PlatformManagement.RoleStyle">
            <summary>
            角色类型
            </summary>
        </member>
        <member name="F:PlatformManagement.RoleStyle.主管">
            <summary>
            部门主管
            </summary>
        </member>
        <member name="F:PlatformManagement.RoleStyle.负责人">
            <summary>
            部门负责人
            </summary>
        </member>
        <member name="F:PlatformManagement.RoleStyle.分管领导">
            <summary>
            分管领导
            </summary>
        </member>
        <member name="T:PlatformManagement.IDeptManagerRole">
            <summary>
            部门管理者角色数据库操作接口
            </summary>
        </member>
        <member name="M:PlatformManagement.IDeptManagerRole.GetViewData">
            <summary>
            获取所有部门管理者角色信息
            </summary>
            <returns>返回获取到的部门管理者角色</returns>
        </member>
        <member name="M:PlatformManagement.IDeptManagerRole.GetData">
            <summary>
            获取所有部门管理者角色信息
            </summary>
            <returns>返回获取到的部门管理者角色</returns>
        </member>
        <member name="M:PlatformManagement.IDeptManagerRole.GetData(System.String)">
            <summary>
            获取指定部门的管理者角色信息
            </summary>
            <param name="deptCode">部门编码</param>
            <returns>成功返回获取到的部门管理者角色，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IDeptManagerRole.Add(PlatformManagement.Auth_DeptManagerRole)">
            <summary>
            添加新部门管理者角色
            </summary>
            <param name="data">要添加的新部门管理者角色</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.IDeptManagerRole.Add(System.Collections.Generic.List{PlatformManagement.Auth_DeptManagerRole})">
            <summary>
            批量添加新部门管理者角色
            </summary>
            <param name="lstData">要添加的信息列表</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.IDeptManagerRole.Delete(System.String)">
            <summary>
            删除指定部门所有管理者角色
            </summary>
            <param name="deptCode">要删除的部门编码</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.IDeptManagerRole.GetManagementRoleName(System.String,PlatformManagement.RoleStyle)">
            <summary>
            获取部门管理人员角色名称列表
            </summary>
            <param name="deptInfo">部门信息，部门编码或部门名称</param>
            <param name="roleStyle">角色类型</param>
            <returns>返回获取到的角色名称列表</returns>
        </member>
        <member name="T:PlatformManagement.Variant">
            <summary>
            变量数据库操作类
            </summary>
        </member>
        <member name="T:PlatformManagement.IVariant">
            <summary>
            变量数据库操作接口
            </summary>
        </member>
        <member name="M:PlatformManagement.IVariant.GetVariants">
            <summary>
            获取所有变量信息
            </summary>
            <returns>成功返回获取到的变量，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IVariant.GetVariants(System.String)">
            <summary>
            获取业务变量信息
            </summary>
            <param name="businessID">业务编号</param>
            <returns>成功返回获取到的变量，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IVariant.GetVariant(System.String)">
            <summary>
            获取变量
            </summary>
            <param name="variantName">变量名称</param>
            <returns>成功返回获取到的变量,失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.IVariant.AddVariant(PlatformManagement.Auth_Variant)">
            <summary>
            添加新变量
            </summary>
            <param name="variant">要添加的新变量</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.IVariant.DeleteVariant(PlatformManagement.Auth_Variant)">
            <summary>
            删除变量
            </summary>
            <param name="variant">要删除的变量</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.IVariant.UpdateVariant(PlatformManagement.Auth_Variant)">
            <summary>
            更新变量
            </summary>
            <param name="variant">要更新的变量</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="F:PlatformManagement.Variant.m_ctx">
            <summary>
            权限管理数据库操作器
            </summary>
        </member>
        <member name="M:PlatformManagement.Variant.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:PlatformManagement.Variant.GetVariants">
            <summary>
            获取所有变量信息
            </summary>
            <returns>成功返回获取到的变量，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.Variant.GetVariants(System.String)">
            <summary>
            获取业务变量信息
            </summary>
            <param name="businessID">业务编号</param>
            <returns>成功返回获取到的变量，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.Variant.GetVariant(System.String)">
            <summary>
            获取变量
            </summary>
            <param name="variantName">变量名称</param>
            <returns>成功返回获取到的变量,失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.Variant.AddVariant(PlatformManagement.Auth_Variant)">
            <summary>
            添加新变量
            </summary>
            <param name="variant">要添加的新变量</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.Variant.DeleteVariant(PlatformManagement.Auth_Variant)">
            <summary>
            删除变量
            </summary>
            <param name="variant">要删除的变量</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.Variant.UpdateVariant(PlatformManagement.Auth_Variant)">
            <summary>
            更新变量
            </summary>
            <param name="variant">要更新的变量</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="T:PlatformManagement.DataRuleControlType">
            <summary>
            数据规则控制类型
            </summary>
        </member>
        <member name="F:PlatformManagement.DataRuleControlType.Field">
            <summary>
            字段
            </summary>
        </member>
        <member name="T:PlatformManagement.DataRuleControlCondition">
            <summary>
            数据规则控制条件
            </summary>
        </member>
        <member name="F:PlatformManagement.DataRuleControlCondition.Like">
            <summary>
            用于模糊查询
            </summary>
        </member>
        <member name="T:PlatformManagement.DataAllowValueType">
            <summary>
            数据允许值类型
            </summary>
        </member>
        <member name="T:PlatformManagement.IDataRule">
            <summary>
            数据规则
            </summary>
        </member>
        <member name="P:PlatformManagement.IDataRule.ControlType">
            <summary>
            数据规则控制类型
            </summary>
            <remarks>
            如：字段等
            </remarks>
        </member>
        <member name="P:PlatformManagement.IDataRule.ControlEntity">
            <summary>
            控制实体实体实体
            </summary>
            <remarks>
            描述方式视不同的控制类别不同而不同，如类别为字段的实体描述为Table[销售订单].字段[合计]
            </remarks>
        </member>
        <member name="P:PlatformManagement.IDataRule.ControlCondition">
            <summary>
            控制条件
            </summary>
        </member>
        <member name="P:PlatformManagement.IDataRule.SqlWhere">
            <summary>
            SQL查询语句
            </summary>
        </member>
        <member name="P:PlatformManagement.IDataRule.AllowValue">
            <summary>
            允许值
            </summary>
            <remarks>
            描述方式视不同的允许值类别不同而不同，可能是一个数或是一个字符串，如用#username代表当前用户名称
            </remarks>
        </member>
        <member name="P:PlatformManagement.IDataRule.AllowValueType">
            <summary>
            允许值类型
            </summary>
        </member>
        <member name="P:PlatformManagement.IDataRule.DataType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="T:PlatformManagement.DataRule">
            <summary>
            数据规则
            </summary>
        </member>
        <member name="P:PlatformManagement.DataRule.ControlType">
            <summary>
            数据规则控制类型
            </summary>
            <remarks>
            如：字段等
            </remarks>
        </member>
        <member name="P:PlatformManagement.DataRule.ControlEntity">
            <summary>
            控制实体实体实体
            </summary>
            <remarks>
            描述方式视不同的控制类别不同而不同，如类别为字段的实体描述为Table[销售订单].字段[合计]
            </remarks>
        </member>
        <member name="P:PlatformManagement.DataRule.ControlCondition">
            <summary>
            控制条件
            </summary>
        </member>
        <member name="P:PlatformManagement.DataRule.SqlWhere">
            <summary>
            SQL查询语句
            </summary>
        </member>
        <member name="P:PlatformManagement.DataRule.AllowValue">
            <summary>
            允许值
            </summary>
            <remarks>
            描述方式视不同的允许值类别不同而不同，可能是一个数或是一个字符串，如用#username代表当前用户名称
            </remarks>
        </member>
        <member name="P:PlatformManagement.DataRule.AllowValueType">
            <summary>
            允许值类型
            </summary>
        </member>
        <member name="P:PlatformManagement.DataRule.DataType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="T:PlatformManagement.WarningNotice">
            <summary>
            预警通知
            </summary>
        </member>
        <member name="F:PlatformManagement.WarningNotice.m_roleManagement">
            <summary>
            角色数据库操作接口
            </summary>
        </member>
        <member name="M:PlatformManagement.WarningNotice.GetWarningNotice(System.String)">
            <summary>
            获取各类用户未读的预警通知
            </summary>
            <param name="userCode">用户编码</param>
            <returns>返回的查询结果</returns>
        </member>
        <member name="M:PlatformManagement.WarningNotice.GetWarningNotice(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            获取指定的预警通知
            </summary>
            <param name="dicParams">传入的查询参数, 主键是字段名，键值是字段名对应的检索值</param>
            <returns>成功则返回的查询结果, 失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.WarningNotice.SendWarningNotice(PlatformManagement.Flow_WarningNotice)">
            <summary>
            发送预警通知类消息
            </summary>
            <param name="msg">消息内容</param>
            <returns>发送成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.WarningNotice.DeleteWarningNotice(System.Int64)">
            <summary>
            销毁指定预警消息
            </summary>
            <param name="msgID">消息编号</param>
            <returns>处理成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.WarningNotice.ReadWarningNotice(System.String,System.Int64)">
            <summary>
            对预警消息批示已阅
            </summary>
            <param name="userCode">接收方用户编码</param>
            <param name="msgID">消息编号</param>
            <returns>成功更新消息返回true, 失败返回false</returns>
        </member>
        <member name="T:PlatformManagement.ISensitiveFields">
            <summary>
            敏感字段数据库操作接口
            </summary>
        </member>
        <member name="M:PlatformManagement.ISensitiveFields.AddSensitiveFields(PlatformManagement.View_Auth_SensitiveFields)">
            <summary>
            添加新敏感字段
            </summary>
            <param name="sensitiveFields">要添加的新敏感字段</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.ISensitiveFields.DeleteSensitiveFields(PlatformManagement.View_Auth_SensitiveFields)">
            <summary>
            删除敏感字段
            </summary>
            <param name="sensitiveFields">要删除的敏感字段</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.ISensitiveFields.GetSensitiveFields">
            <summary>
            获取所有敏感字段
            </summary>
            <returns>返回获取到的敏感字段</returns>
        </member>
        <member name="M:PlatformManagement.ISensitiveFields.GetSensitiveFields(System.String)">
            <summary>
            获取所有敏感字段
            </summary>
            <param name="groupName">获取指定敏感信息组组名的敏感字段</param>
            <returns>返回获取到的敏感字段</returns>
        </member>
        <member name="M:PlatformManagement.ISensitiveFields.GetGroupName(System.Int32)">
            <summary>
            获取字段ID对应的组名
            </summary>
            <param name="sensitiveFieldID">字段ID</param>
            <returns>返回获取到的组名, 获取不到返回空字符串</returns>
        </member>
        <member name="T:PlatformManagement.FaceAuthoritySetting">
            <summary>
            界面级权限设置管理类
            </summary>
        </member>
        <member name="M:PlatformManagement.FaceAuthoritySetting.SetVisibly(System.Windows.Forms.ToolStrip,PlatformManagement.AuthorityFlag)">
            <summary>
            设置工具栏按钮的可见性
            </summary>
            <param name="functionToolStrip">要进行权限控制的工具栏</param>
            <param name="flag">许可权限</param>
        </member>
        <member name="M:PlatformManagement.FaceAuthoritySetting.SetVisibly(System.Windows.Forms.ToolStrip,PlatformManagement.FunctionTreeNodeInfo)">
            <summary>
            设置工具栏按钮的可见性
            </summary>
            <param name="functionToolStrip">要进行权限控制的工具栏</param>
            <param name="authNode">包含许可权限的节点信息</param>
        </member>
        <member name="M:PlatformManagement.FaceAuthoritySetting.SetVisibly(System.Windows.Forms.MenuStrip,PlatformManagement.AuthorityFlag)">
            <summary>
            设置菜单项的可见性
            </summary>
            <param name="functionMenuStrip">要进行权限控制的菜单栏</param>
            <param name="flag">许可权限</param>
        </member>
        <member name="M:PlatformManagement.FaceAuthoritySetting.SetVisibly(System.Windows.Forms.MenuStrip,PlatformManagement.FunctionTreeNodeInfo)">
            <summary>
            设置菜单项的可见性
            </summary>
            <param name="functionMenuStrip">要进行权限控制的菜单栏</param>
            <param name="authNode">包含许可权限的节点信息</param>
        </member>
        <member name="M:PlatformManagement.FaceAuthoritySetting.GetMenuItemAuthority(System.Windows.Forms.ToolStripMenuItem,PlatformManagement.FunctionTreeNodeInfo)">
            <summary>
            获取菜单项权限
            </summary>
            <param name="menuItem">菜单项</param>
            <param name="authNode">包含许可权限的节点信息</param>
            <returns>返回获取到的菜单权限</returns>
        </member>
        <member name="M:PlatformManagement.FaceAuthoritySetting.RecursionMenuItem(System.Windows.Forms.ToolStripMenuItem,PlatformManagement.FunctionTreeNodeInfo,PlatformManagement.AuthorityFlag@)">
            <summary>
            递归菜单项
            </summary>
            <param name="menuItem">菜单项</param>
            <param name="authNode">包含许可权限的节点信息</param>
            <param name="preMenuItemAuth">上一个菜单项权限</param>
        </member>
        <member name="M:PlatformManagement.FaceAuthoritySetting.GetAuthFlag(System.String,PlatformManagement.AuthorityFlag)">
            <summary>
            根据权限字符串返回相应的权限标志
            </summary>
            <param name="strAuth">权限字符串</param>
            <param name="defaultAuth">权限字符串为空时给定的缺省权限</param>
            <returns>返回获取到的权限标志</returns>
        </member>
        <member name="M:PlatformManagement.FaceAuthoritySetting.GetAuthFlag(System.String,System.Collections.Generic.List{PlatformManagement.FunctionTreeNodeInfo},PlatformManagement.AuthorityFlag)">
            <summary>
            通过功能性节点返回相应的权限标志
            </summary>
            <param name="strAuth">权限字符串</param>
            <param name="defaultAuth">权限字符串为空时给定的缺省权限</param>
            <returns>返回获取到的权限标志</returns>
        </member>
        <member name="M:PlatformManagement.FaceAuthoritySetting.SetEnable(System.Windows.Forms.Control.ControlCollection,PlatformManagement.AuthorityFlag)">
            <summary>
            设置界面控件的可用性
            </summary>
            <param name="controls">控件集</param>
            <param name="flag">许可权限</param>
        </member>
        <member name="M:PlatformManagement.FaceAuthoritySetting.SetEnable(System.Windows.Forms.Control.ControlCollection,PlatformManagement.FunctionTreeNodeInfo)">
            <summary>
            设置界面控件的可用性
            </summary>
            <param name="controls">控件集</param>
            <param name="authNode">含许可权限信息的功能节点</param>
        </member>
        <member name="M:PlatformManagement.FaceAuthoritySetting.SetVisibly(System.Windows.Forms.Control.ControlCollection,System.String[])">
            <summary>
            设置界面控件的可见性
            </summary>
            <param name="controls">控件集</param>
            <param name="hideFields">需要隐藏的字段信息</param>
        </member>
        <member name="T:PlatformManagement.FunctionTreeNodeInfo">
            <summary>
            功能树节点信息
            </summary>
        </member>
        <member name="F:PlatformManagement.FunctionTreeNodeInfo.m_nodeCode">
            <summary>
            节点编号
            </summary>
        </member>
        <member name="F:PlatformManagement.FunctionTreeNodeInfo.m_treeNumber">
            <summary>
            树编号
            </summary>
            <remarks>可能存在多颗树时</remarks>
        </member>
        <member name="F:PlatformManagement.FunctionTreeNodeInfo.m_name">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="F:PlatformManagement.FunctionTreeNodeInfo.m_isLeaf">
            <summary>
            是否是叶子节点的标志
            </summary>
        </member>
        <member name="F:PlatformManagement.FunctionTreeNodeInfo.m_allowAuthority">
            <summary>
            该功能所能允许的最大权限
            </summary>
            <remarks>有的功能只有查看、打印功能, 那就不允许有更高级的编辑功能</remarks>
        </member>
        <member name="F:PlatformManagement.FunctionTreeNodeInfo.m_remarks">
            <summary>
            备注信息
            </summary>
        </member>
        <member name="F:PlatformManagement.FunctionTreeNodeInfo.m_authority">
            <summary>
            访问权限
            </summary>
        </member>
        <member name="F:PlatformManagement.FunctionTreeNodeInfo.m_isFuncNode">
            <summary>
            是否功能性节点（不能用于查看，仅用于某种类型的功能，如：统计、汇总等）
            </summary>
        </member>
        <member name="F:PlatformManagement.FunctionTreeNodeInfo.m_lstFuncNode">
            <summary>
            本节点下的功能性节点
            </summary>
        </member>
        <member name="M:PlatformManagement.FunctionTreeNodeInfo.Clone">
            <summary>
            克隆功能树节点信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:PlatformManagement.FunctionTreeNodeInfo.Clone(System.Collections.Generic.List{PlatformManagement.FunctionTreeNodeInfo})">
            <summary>
            克隆功能树节点信息
            </summary>
            <param name="lstSurFT">要克隆的源数据</param>
            <returns>克隆后的功能树节点信息列表</returns>
        </member>
        <member name="P:PlatformManagement.FunctionTreeNodeInfo.NodeCode">
            <summary>
            获取或设置节点ID
            </summary>
        </member>
        <member name="P:PlatformManagement.FunctionTreeNodeInfo.TreeNumber">
            <summary>
            获取或设置树编号
            </summary>
        </member>
        <member name="P:PlatformManagement.FunctionTreeNodeInfo.Name">
            <summary>
            获取或设置节点名称
            </summary>
        </member>
        <member name="P:PlatformManagement.FunctionTreeNodeInfo.IsLeaf">
            <summary>
            获取或设置当前节点是否是叶子节点
            </summary>
        </member>
        <member name="P:PlatformManagement.FunctionTreeNodeInfo.Remarks">
            <summary>
            获取或设置当前节点的备注信息
            </summary>
        </member>
        <member name="P:PlatformManagement.FunctionTreeNodeInfo.Authority">
            <summary>
            获取或设置访问权限
            </summary>
        </member>
        <member name="P:PlatformManagement.FunctionTreeNodeInfo.AllowAuthority">
            <summary>
            获取或设置该功能所能允许的最大权限
            </summary>
        </member>
        <member name="P:PlatformManagement.FunctionTreeNodeInfo.IsFuncNode">
            <summary>
            获取或设置是否功能性节点（不能用于查看，仅用于某种类型的功能，如：统计、汇总等）
            </summary>
        </member>
        <member name="P:PlatformManagement.FunctionTreeNodeInfo.FuncNodes">
            <summary>
            获取或设置本节点下的功能性节点
            </summary>
        </member>
        <member name="T:DepotManagement.Department">
            <summary>
            部门数据库操作类
            </summary>
        </member>
        <member name="T:DepotManagement.IDepartment">
            <summary>
            仓库管理数据库中的部门信息数据库操作接口
            </summary>
        </member>
        <member name="M:DepotManagement.IDepartment.GetDepartments">
            <summary>
            获取所有部门信息
            </summary>
            <returns>成功返回获取到的部门，失败返回null</returns>
        </member>
        <member name="M:DepotManagement.IDepartment.GetDepartment(System.String)">
            <summary>
            获取部门编号对应的部门信息
            </summary>
            <param name="departmentCode">部门编号</param>
            <returns>成功返回获取到的部门，失败返回null</returns>
        </member>
        <member name="M:DepotManagement.IDepartment.GetDepartmentFromName(System.String)">
            <summary>
            获取部门名称对应的部门信息
            </summary>
            <param name="deptName">部门名称</param>
            <returns>成功返回获取到的部门，失败返回null</returns>
        </member>
        <member name="M:DepotManagement.IDepartment.GetManageDepartments(System.String)">
            <summary>
            获取指定用户所管理的部门编码列表
            </summary>
            <param name="userCode">管理人员用户编码</param>
            <returns>成功返回获取到的用户所管理的部门编码列表，失败或没有则返回null</returns>
        </member>
        <member name="M:DepotManagement.IDepartment.GetChildFromTopDepartment(System.String)">
            <summary>
            从指定部门的顶级部门开始获取所有子部门编码（含顶级部门编码）
            </summary>
            <param name="dept">部门编码</param>
            <returns>获取到的部门编码列表</returns>
        </member>
        <member name="M:DepotManagement.IDepartment.GetChildDepartments(System.String)">
            <summary>
            获取指定部门的所有子部门编码（含父部门编码）
            </summary>
            <param name="parentDept">父部门编码</param>
            <returns>获取到的部门编码列表</returns>
        </member>
        <member name="F:DepotManagement.Department.m_ctx">
            <summary>
            仓库管理数据库操作器
            </summary>
        </member>
        <member name="M:DepotManagement.Department.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:DepotManagement.Department.GetDepartments">
            <summary>
            获取所有部门信息
            </summary>
            <returns>成功返回获取到的部门，失败返回null</returns>
        </member>
        <member name="M:DepotManagement.Department.GetDepartmentFromName(System.String)">
            <summary>
            获取部门名称对应的部门信息
            </summary>
            <param name="deptName">部门名称</param>
            <returns>成功返回获取到的部门，失败返回null</returns>
        </member>
        <member name="M:DepotManagement.Department.GetDepartment(System.String)">
            <summary>
            获取部门编号对应的部门信息
            </summary>
            <param name="departmentCode">部门编号</param>
            <returns>成功返回获取到的部门，失败返回null</returns>
        </member>
        <member name="M:DepotManagement.Department.GetManageDepartments(System.String)">
            <summary>
            获取指定用户所管理的部门编码列表
            </summary>
            <param name="userCode">管理人员用户编码</param>
            <returns>成功返回获取到的用户所管理的部门编码列表，失败或没有则返回null</returns>
        </member>
        <member name="M:DepotManagement.Department.GetChildDepartments(System.String)">
            <summary>
            获取指定部门的所有子部门编码（含父部门编码）
            </summary>
            <param name="parentDept">父部门编码</param>
            <returns>获取到的部门编码列表</returns>
        </member>
        <member name="M:DepotManagement.Department.GetChildFromTopDepartment(System.String)">
            <summary>
            从指定部门的顶级部门开始获取所有子部门编码（含顶级部门编码）
            </summary>
            <param name="dept">部门编码</param>
            <returns>获取到的部门编码列表</returns>
        </member>
        <member name="M:DepotManagement.Department.GetChildDepartments(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            用递归方式获取子部门信息
            </summary>
            <param name="lstDept">获取到的子部门信息存放的列表</param>
            <param name="parentDept">父编码编码</param>
        </member>
        <member name="T:PlatformManagement.ExpressionGroup">
            <summary>
            表达式组数据库操作类
            </summary>
        </member>
        <member name="F:PlatformManagement.ExpressionGroup.m_ctx">
            <summary>
            权限管理数据库操作器
            </summary>
        </member>
        <member name="M:PlatformManagement.ExpressionGroup.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:PlatformManagement.ExpressionGroup.GetExpressionGroup">
            <summary>
            获取所有表达式组信息
            </summary>
            <returns>成功返回获取到的表达式组，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.ExpressionGroup.GetExpressionGroup(System.Int32,System.Int32)">
            <summary>
            获取表达式组信息
            </summary>
            <param name="logicGroupID">逻辑组编号</param>
            <param name="expressionID">表达式编号</param>
            <returns>成功返回获取到的表达式组，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.ExpressionGroup.GetExpressionGroup(System.Int32)">
            <summary>
            获取逻辑组中所含的所有表达式组
            </summary>
            <param name="logicGroupID">逻辑组编号</param>
            <returns>成功返回获取到的逻辑组,失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.ExpressionGroup.GetExpressionIds(System.Int32)">
            <summary>
            获取逻辑组编号对应的表达式编号
            </summary>
            <param name="logicGroupID">逻辑组编号</param>
            <returns>成功返回获取到的逻辑组编号,失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.ExpressionGroup.AddExpressionGroup(PlatformManagement.Auth_ExpressionGroup)">
            <summary>
            添加新表达式组
            </summary>
            <param name="expressionGroup">要添加的新表达式组</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.ExpressionGroup.DeleteExpressionGroup(PlatformManagement.Auth_ExpressionGroup)">
            <summary>
            删除表达式组
            </summary>
            <param name="expressionGroup">要删除的表达式组</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="T:PlatformManagement.DbServerTime">
            <summary>
            获取数据库服务器时间的类
            </summary>
        </member>
        <member name="F:PlatformManagement.DbServerTime.m_context">
            <summary>
            平台管理数据库操作器
            </summary>
        </member>
        <member name="P:PlatformManagement.DbServerTime.Time">
            <summary>
            获取服务器时间
            </summary>
            <returns>获取到的服务器当前时间</returns>
        </member>
        <member name="T:PlatformManagement.GlobalInfo">
            <summary>
            公共信息
            </summary>
        </member>
        <member name="F:PlatformManagement.GlobalInfo.Authentication">
            <summary>
            认证信息
            </summary>
        </member>
        <member name="T:PlatformManagement.RoleManagement">
            <summary>
            角色管理接口
            </summary>
        </member>
        <member name="T:PlatformManagement.IRoleManagement">
            <summary>
            角色管理接口
            </summary>
        </member>
        <member name="M:PlatformManagement.IRoleManagement.AddRole(PlatformManagement.Auth_Role)">
            <summary>
            添加角色
            </summary>
            <param name="role">要添加的角色</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.IRoleManagement.AddUserInRole(System.String,System.String)">
            <summary>
            添加用户到指定角色
            </summary>
            <param name="roleCode">角色代码</param>
            <param name="loginName">用户登录名称</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.IRoleManagement.AddUserInRole(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            批量添加用户角色
            </summary>
            <param name="loginName">用户登录名称</param>
            <param name="roleCodes">角色代码</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.IRoleManagement.DeleteRole(PlatformManagement.Auth_Role)">
            <summary>
            删除角色
            </summary>
            <param name="role">要删除的角色</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.IRoleManagement.DeleteRole(System.String)">
            <summary>
            删除角色
            </summary>
            <param name="roleCode">要删除的角色编码</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.IRoleManagement.DeleteUserFromRole(System.String,System.String)">
            <summary>
            从角色所属的用户群中移除该用户(并不是删除用户本身, 而是该用户不再属于此角色而已)
            </summary>
            <param name="roleCode">角色编码</param>
            <param name="loginName">要移除的用户的登录名称</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.IRoleManagement.GetAllRoles">
            <summary>
            获取系统中的所有角色
            </summary>
            <returns>成功返回角色信息, 否则为null</returns>
        </member>
        <member name="M:PlatformManagement.IRoleManagement.GetAllRolesInBusiness(System.String)">
            <summary>
            获取指定业务中的所有角色
            </summary>
            <param name="bussinessID">业务编码</param>
            <returns>成功返回角色信息, 否则为null</returns>
        </member>
        <member name="M:PlatformManagement.IRoleManagement.GetRole(System.String)">
            <summary>
            根据角色编码获取角色信息
            </summary>
            <param name="roleCode">角色编码</param>
            <returns>成功返回获取到的角色信息, 其它为null</returns>
        </member>
        <member name="M:PlatformManagement.IRoleManagement.GetRoleView(System.String)">
            <summary>
            根据角色编码获取角色信息
            </summary>
            <param name="roleCode">角色编码</param>
            <returns>成功返回获取到的角色信息, 其它为null</returns>
        </member>
        <member name="M:PlatformManagement.IRoleManagement.GetRoleView(System.Collections.Generic.List{System.String})">
            <summary>
            批量获取角色信息
            </summary>
            <param name="roleCodes">角色编码集</param>
            <returns>成功返回获取到的角色信息, 其它为null</returns>
        </member>
        <member name="M:PlatformManagement.IRoleManagement.GetRoleViewFromRoleName(System.Collections.Generic.List{System.String})">
            <summary>
            批量获取角色信息
            </summary>
            <param name="roleNames">角色名称集</param>
            <returns>成功返回获取到的角色信息, 其它为null</returns>
        </member>
        <member name="M:PlatformManagement.IRoleManagement.GetRoleCodes(System.Collections.Generic.List{PlatformManagement.View_Auth_Role})">
            <summary>
            获取角色信息数组中的所有角色编号
            </summary>
            <param name="roles">角色信息组</param>
            <returns>返回角色信息数组中的所有角色编号</returns>
        </member>
        <member name="M:PlatformManagement.IRoleManagement.GetRoleNames(System.Collections.Generic.List{PlatformManagement.View_Auth_Role})">
            <summary>
            获取角色信息数组中的所有角色名称
            </summary>
            <param name="roles">角色信息组</param>
            <returns>返回角色信息数组中的所有角色名称</returns>
        </member>
        <member name="M:PlatformManagement.IRoleManagement.GetRoles(System.String)">
            <summary>
            获取指定用户的角色
            </summary>
            <param name="loginName">用户登录名称</param>
            <returns>成功返回获取到的角色信息, 其它为null</returns>
        </member>
        <member name="M:PlatformManagement.IRoleManagement.GetInheritionRole(System.String)">
            <summary>
            获取指定角色所继承的角色
            </summary>
            <param name="roleCode">角色编码</param>
            <returns>成功返回获取到的角色信息, 其它为null</returns>
        </member>
        <member name="M:PlatformManagement.IRoleManagement.UpdateRole(PlatformManagement.Auth_Role)">
            <summary>
            更新角色
            </summary>
            <param name="newRoleInfo">更新后的角色信息</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.IRoleManagement.CopyUserRole(System.String,System.String)">
            <summary>
            复制用户角色（将源用户所包含的角色复制到目标用户）
            </summary>
            <param name="surUserCode">源用户</param>
            <param name="tarUserCode">目标用户</param>
            <returns>操作是否成功的标志</returns>
        </member>
        <member name="M:PlatformManagement.IRoleManagement.IsExists(System.String)">
            <summary>
            检查指定角色是否存在
            </summary>
            <param name="roleCode">要检查的角色编码</param>
            <returns>存在返回true</returns>
        </member>
        <member name="M:PlatformManagement.IRoleManagement.CopyRoleAuthorization(PlatformManagement.CopyModeOfRoleAuthorization,System.String,System.String)">
            <summary>
            将源角色所有权限复制到目标角色
            </summary>
            <param name="copyMode">复制模式</param>
            <param name="surRoleCode">源角色编码</param>
            <param name="tarRoleCode">目标角色编码</param>
            <returns>返回操作是否成功的标志</returns>
        </member>
        <member name="F:PlatformManagement.RoleManagement.m_ctx">
            <summary>
            权限管理数据内容
            </summary>
        </member>
        <member name="M:PlatformManagement.RoleManagement.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:PlatformManagement.RoleManagement.GetAllRoles">
            <summary>
            获取系统中的所有角色
            </summary>
            <returns>成功返回角色信息, 否则为null</returns>
        </member>
        <member name="M:PlatformManagement.RoleManagement.GetAllRolesInBusiness(System.String)">
            <summary>
            获取指定业务中的所有角色
            </summary>
            <param name="bussinessID">业务编码</param>
            <returns>成功返回角色信息, 否则为null</returns>
        </member>
        <member name="M:PlatformManagement.RoleManagement.GetRole(System.String)">
            <summary>
            根据角色编码获取角色信息
            </summary>
            <param name="roleCode">角色编码</param>
            <returns>成功返回获取到的角色信息, 其它为null</returns>
        </member>
        <member name="M:PlatformManagement.RoleManagement.GetRoleView(System.String)">
            <summary>
            根据角色编码获取角色信息
            </summary>
            <param name="roleCode">角色编码</param>
            <returns>成功返回获取到的角色信息, 其它为null</returns>
        </member>
        <member name="M:PlatformManagement.RoleManagement.GetRoleView(System.Collections.Generic.List{System.String})">
            <summary>
            批量获取角色信息
            </summary>
            <param name="roleCodes">角色编码集</param>
            <returns>成功返回获取到的角色信息, 其它为null</returns>
        </member>
        <member name="M:PlatformManagement.RoleManagement.GetRoleViewFromRoleName(System.Collections.Generic.List{System.String})">
            <summary>
            批量获取角色信息
            </summary>
            <param name="roleNames">角色名称集</param>
            <returns>成功返回获取到的角色信息, 其它为null</returns>
        </member>
        <member name="M:PlatformManagement.RoleManagement.GetRoleCodes(System.Collections.Generic.List{PlatformManagement.View_Auth_Role})">
            <summary>
            获取角色信息数组中的所有角色编号
            </summary>
            <param name="roles">角色信息组</param>
            <returns>返回角色信息数组中的所有角色编号</returns>
        </member>
        <member name="M:PlatformManagement.RoleManagement.GetRoleNames(System.Collections.Generic.List{PlatformManagement.View_Auth_Role})">
            <summary>
            获取角色信息数组中的所有角色名称
            </summary>
            <param name="roles">角色信息组</param>
            <returns>返回角色信息数组中的所有角色名称</returns>
        </member>
        <member name="M:PlatformManagement.RoleManagement.GetRoles(System.String)">
            <summary>
            获取指定用户的角色
            </summary>
            <param name="loginName">用户登录名称</param>
            <returns>成功返回获取到的角色信息, 其它为null</returns>
        </member>
        <member name="M:PlatformManagement.RoleManagement.GetInheritionRole(System.String)">
            <summary>
            获取指定角色所继承的角色
            </summary>
            <param name="roleCode">角色编码</param>
            <returns>成功返回获取到的角色信息, 其它为null</returns>
        </member>
        <member name="M:PlatformManagement.RoleManagement.AddRole(PlatformManagement.Auth_Role)">
            <summary>
            添加角色
            </summary>
            <param name="role">要添加的角色</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.RoleManagement.AddUserInRole(System.String,System.String)">
            <summary>
            添加用户到指定角色
            </summary>
            <param name="roleCode">角色代码</param>
            <param name="loginName">用户登录名称</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.RoleManagement.AddUserInRole(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            批量添加用户角色
            </summary>
            <param name="loginName">用户登录名称</param>
            <param name="roleCodes">角色代码</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.RoleManagement.DeleteRole(PlatformManagement.Auth_Role)">
            <summary>
            删除角色
            </summary>
            <param name="role">要删除的角色</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.RoleManagement.DeleteRole(System.String)">
            <summary>
            删除角色
            </summary>
            <param name="roleCode">要删除的角色编码</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.RoleManagement.DeleteUserFromRole(System.String,System.String)">
            <summary>
            从角色所属的用户群中移除该用户(并不是删除用户本身, 而是该用户不再属于此角色而已)
            </summary>
            <param name="roleCode">角色编码</param>
            <param name="loginName">要移除的用户的登录名称</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.RoleManagement.UpdateRole(PlatformManagement.Auth_Role)">
            <summary>
            更新角色
            </summary>
            <param name="newRoleInfo">更新后的角色信息</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.RoleManagement.IsExists(System.String)">
            <summary>
            检查指定角色是否存在
            </summary>
            <param name="roleCode">要检查的角色编码</param>
            <returns>存在返回true</returns>
        </member>
        <member name="M:PlatformManagement.RoleManagement.CopyUserRole(System.String,System.String)">
            <summary>
            复制用户角色（将源用户所包含的角色复制到目标用户）
            </summary>
            <param name="surUserCode">源用户</param>
            <param name="tarUserCode">目标用户</param>
            <returns>操作是否成功的标志</returns>
        </member>
        <member name="M:PlatformManagement.RoleManagement.CopyRoleAuthorization(PlatformManagement.CopyModeOfRoleAuthorization,System.String,System.String)">
            <summary>
            将源角色所有权限复制到目标角色
            </summary>
            <param name="copyMode">复制模式</param>
            <param name="surRoleCode">源角色编码</param>
            <param name="tarRoleCode">目标角色编码</param>
            <returns>返回操作是否成功的标志</returns>
        </member>
        <member name="T:PlatformManagement.FunctionTreeSystem">
            <summary>
            功能树系统实现类, 完成功能树系统的数据库操作
            </summary>
            <remarks>功能树系统表只包含：功能树编号、功能树名称</remarks>
        </member>
        <member name="F:PlatformManagement.FunctionTreeSystem.m_ctx">
            <summary>
            数据内容操作器
            </summary>
        </member>
        <member name="M:PlatformManagement.FunctionTreeSystem.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:PlatformManagement.FunctionTreeSystem.GetFunTreeSystem">
            <summary>
            获取功能树系统
            </summary>
            <returns>返回获取到的功能树系统，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.FunctionTreeSystem.GetFunTreeSystem(System.Int32)">
            <summary>
            获取功能树系统
            </summary>
            <param name="treeNumber">要获取的功能树系统的编号</param>
            <returns>返回获取到的功能树系统，获取不到返回null</returns>
        </member>
        <member name="M:PlatformManagement.FunctionTreeSystem.AddFunTreeSystem(PlatformManagement.AuthorityManagementDataContext,PlatformManagement.Auth_FunTreeSystem)">
            <summary>
            添加功能树
            </summary>
            <param name="ctx">LINQ数据库上下文</param>
            <param name="funTreeSystem">要添加的新功能树系统</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.FunctionTreeSystem.DeleteFunTreeSystem(PlatformManagement.Auth_FunTreeSystem)">
            <summary>
            删除功能树
            </summary>
            <param name="funTreeSystem">要删除的功能树系统</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.FunctionTreeSystem.UpdateFunTreeSystem(PlatformManagement.Auth_FunTreeSystem)">
            <summary>
            更新功能树
            </summary>
            <param name="funTreeSystem">要更新的功能树系统</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="T:PlatformManagement.FlowNoticeManagement">
            <summary>
            通知类消息数据库操作类
            </summary>
        </member>
        <member name="F:PlatformManagement.FlowNoticeManagement.m_userManagement">
            <summary>
            用户数据库操作接口
            </summary>
        </member>
        <member name="F:PlatformManagement.FlowNoticeManagement.m_roleManagement">
            <summary>
            角色数据库操作接口
            </summary>
        </member>
        <member name="F:PlatformManagement.FlowNoticeManagement.m_department">
            <summary>
            部门数据库操作接口
            </summary>
        </member>
        <member name="M:PlatformManagement.FlowNoticeManagement.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:PlatformManagement.FlowNoticeManagement.GetNotice(System.String)">
            <summary>
            获取各类用户未读的接收通知
            </summary>
            <param name="userCode">用户编码</param>
            <returns>返回的查询结果</returns>
        </member>
        <member name="M:PlatformManagement.FlowNoticeManagement.GetNotice(System.String,PlatformManagement.NoticeSource)">
            <summary>
            获取指定源类型用户未读的接收通知
            </summary>
            <param name="userCode">用户编码</param>
            <param name="sourceType">通知来源</param>
            <returns>返回的查询结果，没有消息返回null</returns>
        </member>
        <member name="M:PlatformManagement.FlowNoticeManagement.SendNotice(PlatformManagement.Flow_Notice)">
            <summary>
            发送通知类消息
            </summary>
            <param name="msg">消息内容</param>
            <returns>发送成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.FlowNoticeManagement.ReadNotice(System.String,System.Int64)">
            <summary>
            批阅通知(表示已阅)
            </summary>
            <param name="userCode">用户编码</param>
            <param name="msgID">通知序号</param>
            <returns>成功批阅消息返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.FlowNoticeManagement.UpdateNotice(System.String,PlatformManagement.Flow_Notice)">
            <summary>
            更新通知类消息
            </summary>
            <param name="userCode">用户编码</param>
            <param name="msg">消息内容</param>
            <returns>成功更新消息返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.FlowNoticeManagement.DeleteNotice(System.String,System.Int64)">
            <summary>
            销毁指定消息
            </summary>
            <param name="userCode">用户编码</param>
            <param name="msgID">消息编号</param>
            <returns>处理成功返回true, 失败返回false</returns>
        </member>
        <member name="T:PlatformManagement.DeptManagerRole">
            <summary>
            部门管理者角色数据库操作类
            </summary>
        </member>
        <member name="F:PlatformManagement.DeptManagerRole.m_ctx">
            <summary>
            权限管理数据库操作器
            </summary>
        </member>
        <member name="M:PlatformManagement.DeptManagerRole.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:PlatformManagement.DeptManagerRole.GetViewData">
            <summary>
            获取所有部门管理者角色信息
            </summary>
            <returns>返回获取到的部门管理者角色</returns>
        </member>
        <member name="M:PlatformManagement.DeptManagerRole.GetData">
            <summary>
            获取所有部门管理者角色信息
            </summary>
            <returns>返回获取到的部门管理者角色</returns>
        </member>
        <member name="M:PlatformManagement.DeptManagerRole.GetData(System.String)">
            <summary>
            获取指定部门的管理者角色信息
            </summary>
            <param name="deptCode">部门编码</param>
            <returns>成功返回获取到的部门管理者角色，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.DeptManagerRole.Add(PlatformManagement.Auth_DeptManagerRole)">
            <summary>
            添加新部门管理者角色
            </summary>
            <param name="data">要添加的信息</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.DeptManagerRole.Add(System.Collections.Generic.List{PlatformManagement.Auth_DeptManagerRole})">
            <summary>
            批量添加新部门管理者角色
            </summary>
            <param name="lstData">要添加的信息列表</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.DeptManagerRole.AddRoleForChildDept(PlatformManagement.AuthorityManagementDataContext,PlatformManagement.Auth_DeptManagerRole)">
            <summary>
            为指定部门的子部门添加管理者角色
            </summary>
            <param name="role">要添加的部门管理人员角色</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.DeptManagerRole.DeleteRoleForChildDept(PlatformManagement.AuthorityManagementDataContext,PlatformManagement.Auth_DeptManagerRole)">
            <summary>
            为指定部门的子部门删除管理者角色
            </summary>
            <param name="role">要删除的部门管理人员角色</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.DeptManagerRole.Delete(System.String)">
            <summary>
            删除指定部门所有管理者角色
            </summary>
            <param name="deptCode">要删除的部门编码</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.DeptManagerRole.GetManagementRoleName(System.String,PlatformManagement.RoleStyle)">
            <summary>
            获取部门管理人员角色名称列表
            </summary>
            <param name="deptInfo">部门信息，部门编码或部门名称</param>
            <param name="roleStyle">角色类型</param>
            <returns>返回获取到的角色名称列表</returns>
        </member>
        <member name="T:PlatformManagement.UserDetailsManager">
            <summary>
            用户详细信息管理器
            </summary>
        </member>
        <member name="M:PlatformManagement.UserDetailsManager.GetUserDetails(System.String)">
            <summary>
            获取指定用户详细信息
            </summary>
            <param name="username">用户名</param>
            <returns>成功返回指定用户的详细信息，失败返回null</returns>
        </member>
        <member name="T:PlatformManagement.UserManagement">
            <summary>
            数据库用户表操作类
            </summary>
        </member>
        <member name="F:PlatformManagement.UserManagement.m_ctx">
            <summary>
            数据内容操作器
            </summary>
        </member>
        <member name="M:PlatformManagement.UserManagement.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:PlatformManagement.UserManagement.GetUser(System.String)">
            <summary>
            获取指定用户
            </summary>
            <param name="loginName">用户登录名</param>
            <returns>成功返回指定的用户，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.UserManagement.GetAllUser">
            <summary>
            获取所有用户
            </summary>
            <returns>成功返回用户集，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.UserManagement.GetUsers(System.String)">
            <summary>
            获取指定角色所拥有的用户
            </summary>
            <param name="roleCode">角色代码</param>
            <returns>成功返回用户集，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.UserManagement.GetUsers(System.String[])">
            <summary>
            获取指定角色集所拥有的用户
            </summary>
            <param name="roleCodes">角色代码集合</param>
            <returns>成功返回用户集，失败返回null</returns>
        </member>
        <member name="M:PlatformManagement.UserManagement.DataConvert(PlatformManagement.View_Auth_User)">
            <summary>
            数据转换器(将视图对象转换为表对象)
            </summary>
            <param name="user">用户数据</param>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:PlatformManagement.UserManagement.AddUser(PlatformManagement.Auth_User)">
            <summary>
            添加用户
            </summary>
            <param name="user">要添加的用户信息</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.UserManagement.DeleteUser(System.String)">
            <summary>
            删除用户
            </summary>
            <param name="loginName">用户登录名</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.UserManagement.UpdatePasswordOfProvider">
            <summary>
            随机数更新供应商密码
            </summary>
            <returns>操作是否成功的标志</returns>
        </member>
        <member name="M:PlatformManagement.UserManagement.UpdateUser(PlatformManagement.Auth_User)">
            <summary>
            更新用户
            </summary>
            <param name="newUserInfo">要更新的用户信息</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="M:PlatformManagement.UserManagement.UpdatePassword(System.String,System.String,System.String)">
            <summary>
            更新用户密码
            </summary>
            <param name="loginName">用户登录名</param>
            <param name="oldPwd">旧密码</param>
            <param name="newPwd">新密码</param>
            <returns>成功返回true, 其它为false</returns>
        </member>
        <member name="T:PlatformManagement.SensitiveFields">
            <summary>
            敏感字段数据库操作类
            </summary>
        </member>
        <member name="F:PlatformManagement.SensitiveFields.m_ctx">
            <summary>
            权限管理数据库操作器
            </summary>
        </member>
        <member name="M:PlatformManagement.SensitiveFields.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:PlatformManagement.SensitiveFields.GetSensitiveFields">
            <summary>
            获取所有敏感字段
            </summary>
            <returns>返回获取到的敏感字段</returns>
        </member>
        <member name="M:PlatformManagement.SensitiveFields.GetSensitiveFields(System.String)">
            <summary>
            获取所有敏感字段
            </summary>
            <param name="groupName">获取指定敏感信息组组名的敏感字段</param>
            <returns>返回获取到的敏感字段</returns>
        </member>
        <member name="M:PlatformManagement.SensitiveFields.GetGroupName(System.Int32)">
            <summary>
            获取字段ID对应的组名
            </summary>
            <param name="sensitiveFieldID">字段ID</param>
            <returns>返回获取到的组名, 获取不到返回空字符串</returns>
        </member>
        <member name="M:PlatformManagement.SensitiveFields.AddSensitiveFields(PlatformManagement.View_Auth_SensitiveFields)">
            <summary>
            添加新敏感字段
            </summary>
            <param name="sensitiveFields">要添加的新敏感字段</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="M:PlatformManagement.SensitiveFields.DeleteSensitiveFields(PlatformManagement.View_Auth_SensitiveFields)">
            <summary>
            删除敏感字段
            </summary>
            <param name="sensitiveFields">要删除的敏感字段</param>
            <returns>成功返回true,其他返回false</returns>
        </member>
        <member name="T:PlatformManagement.CopyModeOfRoleAuthorization">
            <summary>
            角色权限复制模式
            </summary>
        </member>
        <member name="F:PlatformManagement.CopyModeOfRoleAuthorization.清除模式">
            <summary>
            清除目标角色原有的权限后，从源角色中复制所有权限
            </summary>
        </member>
        <member name="F:PlatformManagement.CopyModeOfRoleAuthorization.增量模式">
            <summary>
            从源角色中复制目标角色没有的权限
            </summary>
        </member>
        <member name="T:PlatformManagement.BillFlowMessage">
            <summary>
            针对单据的流消息(单据在流动过程中发生的消息传递)
            </summary>
        </member>
        <member name="F:PlatformManagement.BillFlowMessage.m_userManagement">
            <summary>
            用户数据库操作接口
            </summary>
        </member>
        <member name="F:PlatformManagement.BillFlowMessage.m_roleManagement">
            <summary>
            角色数据库操作接口
            </summary>
        </member>
        <member name="F:PlatformManagement.BillFlowMessage.m_department">
            <summary>
            部门数据库操作接口
            </summary>
        </member>
        <member name="M:PlatformManagement.BillFlowMessage.GetReceivedMessage(System.String)">
            <summary>
            获取指定用户接收到的单据消息(不包含自己发送的消息)
            </summary>
            <param name="userCode">用户编码</param>
            <returns>返回的查询结果</returns>
        </member>
        <member name="M:PlatformManagement.BillFlowMessage.GetMessage(System.String)">
            <summary>
            获取指定用户的所有单据消息
            </summary>
            <param name="userCode">用户编码</param>
            <returns>返回的查询结果</returns>
        </member>
        <member name="M:PlatformManagement.BillFlowMessage.GetMessage(System.String,System.String,System.String)">
            <summary>
            获取指定的单据消息
            </summary>
            <param name="userCode">用户编码</param>
            <param name="billType">单据类型</param>
            <param name="billSerialNo">单据流水号</param>
            <returns>返回的查询结果，没有消息返回null</returns>
        </member>
        <member name="M:PlatformManagement.BillFlowMessage.InitAdditionalInfo(PlatformManagement.Flow_BillFlowMessage)">
            <summary>
            初始化指定单据信息的附加数据
            </summary>
            <param name="msg">要初始化附加数据的单据信息</param>
        </member>
        <member name="M:PlatformManagement.BillFlowMessage.SendRequestMessage(System.String,PlatformManagement.Flow_BillFlowMessage)">
            <summary>
            发送请求类消息
            </summary>
            <param name="userCode">请求方用户编码</param>
            <param name="msg">消息内容</param>
            <returns>发送成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.BillFlowMessage.RespondMessage(System.String,System.Int64,PlatformManagement.TransactionPriority,System.String)">
            <summary>
            单据处理后的回复消息
            </summary>
            <param name="userCode">用户编码</param>
            <param name="requestMsgID">请求消息的编号</param>
            <param name="priority">优先级</param>
            <param name="responseMsg">回复的消息</param>
            <returns>处理成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.BillFlowMessage.ContinueMessage(System.String,PlatformManagement.Flow_BillFlowMessage)">
            <summary>
            继续发送请求类消息
            </summary>
            <param name="userCode">请求方用户编码</param>
            <param name="msg">消息内容</param>
            <returns>发送成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.BillFlowMessage.RebackMessage(System.String,System.Int64,System.String)">
            <summary>
            回退指定消息, 只有接收方才可以回退消息
            </summary>
            <param name="userCode">回复方用户编码</param>
            <param name="msgID">消息编号</param>
            <param name="msgContent">消息内容</param>
            <returns>处理成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.BillFlowMessage.EndMessage(System.String,System.Int64,System.String)">
            <summary>
            结束指定消息（表示该消息已经完成）, 只有接收方才可以结束消息
            </summary>
            <param name="userCode">用户编码</param>
            <param name="msgID">消息编号</param>
            <param name="msgContent">消息内容</param>
            <returns>处理成功返回true, 失败返回false</returns>
        </member>
        <member name="M:PlatformManagement.BillFlowMessage.DestroyMessage(System.String,System.Int64)">
            <summary>
            销毁指定消息,只有发起者才能够销毁自己发出去的消息
            </summary>
            <param name="userCode">用户编码</param>
            <param name="msgID">消息编号</param>
            <returns>处理成功返回true, 失败返回false</returns>
        </member>
        <member name="T:PlatformManagement.QueryResult">
            <summary>
            查询结果
            </summary>
        </member>
        <member name="T:PlatformManagement.IQueryResult">
            <summary>
            查询结果
            </summary>
        </member>
        <member name="P:PlatformManagement.IQueryResult.HideFields">
            <summary>
            获取隐藏字段
            </summary>
            <remarks>没有隐藏字段时返回为null</remarks>
        </member>
        <member name="P:PlatformManagement.IQueryResult.SensitiveFields">
            <summary>
            获取敏感字段及相应权限信息
            </summary>
            <remarks>没有敏感字段时返回为null</remarks>
        </member>
        <member name="P:PlatformManagement.IQueryResult.Datasheet">
            <summary>
            返回的数据集
            </summary>
            <remarks>查询失败返回null</remarks>
        </member>
        <member name="P:PlatformManagement.IQueryResult.DataCollection">
            <summary>
            返回的数据集
            </summary>
            <remarks>查询失败返回null</remarks>
        </member>
        <member name="P:PlatformManagement.IQueryResult.Succeeded">
            <summary>
            返回查询是否成功
            </summary>
        </member>
        <member name="P:PlatformManagement.IQueryResult.Error">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:PlatformManagement.IQueryResult.DataGridView">
            <summary>
            设置结果集绑定的数据显示控件
            </summary>
        </member>
        <member name="F:PlatformManagement.QueryResult.m_dataGridView">
            <summary>
            结果集绑定的数据显示控件
            </summary>
        </member>
        <member name="P:PlatformManagement.QueryResult.HideFields">
            <summary>
            隐藏字段
            </summary>
        </member>
        <member name="P:PlatformManagement.QueryResult.SensitiveFields">
            <summary>
            获取敏感字段及相应权限信息
            </summary>
        </member>
        <member name="P:PlatformManagement.QueryResult.Datasheet">
            <summary>
            返回的数据集
            </summary>
            <remarks>查询失败返回null</remarks>
        </member>
        <member name="P:PlatformManagement.QueryResult.DataCollection">
            <summary>
            返回的数据集
            </summary>
        </member>
        <member name="P:PlatformManagement.QueryResult.Succeeded">
            <summary>
            返回查询是否成功
            </summary>
        </member>
        <member name="P:PlatformManagement.QueryResult.Error">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:PlatformManagement.QueryResult.SQL">
            <summary>
            执行的SQL语句
            </summary>
        </member>
        <member name="P:PlatformManagement.QueryResult.DataGridView">
            <summary>
            设置结果集绑定的数据显示控件
            </summary>
        </member>
        <member name="T:PlatformManagement.FieldAuthorization">
            <summary>
            字段授权
            </summary>
        </member>
        <member name="P:PlatformManagement.FieldAuthorization.FieldID">
            <summary>
            字段编号
            </summary>
        </member>
        <member name="P:PlatformManagement.FieldAuthorization.FieldName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:PlatformManagement.FieldAuthorization.AuthFlag">
            <summary>
            字段权限
            </summary>
        </member>
        <member name="P:PlatformManagement.FieldAuthorization.LimitedValue">
            <summary>
            限制值
            </summary>
        </member>
        <member name="T:PlatformManagement.AuthorityFlag">
            <summary>
            权限标志
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.Nothing">
            <summary>
            没有操作权限
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.Usable">
            <summary>
            可用(未必可见 有些特殊功能是在底层实现的未必有界面所以需设置成可用不可见)
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.Visible">
            <summary>
            此功能可见(仅表示可用，未必可用)
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.View">
            <summary>
            允许查看（等同于查询）
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.Print">
            <summary>
            允许打印
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.Edit">
            <summary>
            允许编辑
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.Add">
            <summary>
            允许添加
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.Delete">
            <summary>
            允许删除
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.Auditing">
            <summary>
            允许审核
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.Authorize">
            <summary>
            允许批准
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.ConfirmArrival">
            <summary>
            允许确认到货
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.StockIn">
            <summary>
            允许入库（10）
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.Confirm_1">
            <summary>
            确认_1
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.Confirm_2">
            <summary>
            确认_2
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.Confirm_3">
            <summary>
            确认_3
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.Check_1">
            <summary>
            检验_1
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.Check_2">
            <summary>
            检验_2
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.Check_3">
            <summary>
            检验_3（16）
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.Process_1">
            <summary>
            处理_1
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.Process_2">
            <summary>
            处理_2
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.Process_3">
            <summary>
            处理_3
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.Retrial_1">
            <summary>
            复审_1（20）
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.Retrial_2">
            <summary>
            复审_2
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.Retrial_3">
            <summary>
            复审_3
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthorityFlag.ExportFile">
            <summary>
            导出文件
            </summary>
        </member>
        <member name="T:PlatformManagement.AuthorityGenerator">
            <summary>
            权限生成器
            </summary>
        </member>
        <member name="P:PlatformManagement.AuthorityGenerator.BasicAuthority">
            <summary>
            获取基础权限
            </summary>
            <returns>返回获取到的基础权限</returns>
        </member>
        <member name="P:PlatformManagement.AuthorityGenerator.MaxAuthority">
            <summary>
            获取最大权限
            </summary>
            <returns>返回获取到的最大权限</returns>
        </member>
        <member name="T:PlatformManagement.AuthenticationManager">
            <summary>
            授权管理者
            </summary>
        </member>
        <member name="F:PlatformManagement.AuthenticationManager.m_authentication">
            <summary>
            认证用户
            </summary>
        </member>
        <member name="M:PlatformManagement.AuthenticationManager.IdentifyAuthority(System.Object)">
            <summary>
            鉴定用户权限
            </summary>
            <param name="credential">用户权限凭证，如数字证书等</param>
            <returns>通过鉴定返回返回返回true</returns>
        </member>
        <member name="M:PlatformManagement.AuthenticationManager.IdentifyAuthority(System.String,System.String)">
            <summary>
            鉴定用户权限
            </summary>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <returns>通过鉴定返回返回返回true</returns>
        </member>
        <member name="M:PlatformManagement.AuthenticationManager.GetUserInfo(System.String)">
            <summary>
            获取用户信息
            </summary>
            <param name="username">用户名</param>
            <returns>返回获取到的用户信息</returns>
        </member>
        <member name="M:PlatformManagement.AuthenticationManager.GetAuthenticationInfo(System.String)">
            <summary>
            获取用户认证信息
            </summary>
            <param name="username">用户名</param>
            <returns>返回获取到的认证信息</returns>
        </member>
        <member name="P:PlatformManagement.AuthenticationManager.Authentication">
            <summary>
            获取当前认证用户
            </summary>
            <returns>成功获取返回认证用信息, 失败返回null</returns>
        </member>
        <member name="T:PlatformManagement.LogTypeEnum">
            <summary>
            日志类别枚举
            </summary>
        </member>
        <member name="F:PlatformManagement.LogTypeEnum.异常消息">
            <summary>
            异常消息
            </summary>
        </member>
        <member name="F:PlatformManagement.LogTypeEnum.更新消息">
            <summary>
            更新消息
            </summary>
        </member>
    </members>
</doc>
