#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.8000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutoUpgradeSystem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="PlatformService")]
	public partial class PlatfromDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSys_AutoUpgrade(Sys_AutoUpgrade instance);
    partial void UpdateSys_AutoUpgrade(Sys_AutoUpgrade instance);
    partial void DeleteSys_AutoUpgrade(Sys_AutoUpgrade instance);
    #endregion
		
		public PlatfromDatabaseDataContext() : 
				base(global::AutoUpgradeSystem.Properties.Settings.Default.PlatformServiceConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public PlatfromDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlatfromDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlatfromDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlatfromDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Sys_AutoUpgrade> Sys_AutoUpgrade
		{
			get
			{
				return this.GetTable<Sys_AutoUpgrade>();
			}
		}
	}
	
	[Table(Name="dbo.Sys_AutoUpgrade")]
	public partial class Sys_AutoUpgrade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _序号;
		
		private string _软件系统名称;
		
		private double _版本号;
		
		private string _文件名称;
		
		private System.Data.Linq.Binary _文件内容;
		
		private string _文件大小;
		
		private System.DateTime _日期;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On序号Changing(int value);
    partial void On序号Changed();
    partial void On软件系统名称Changing(string value);
    partial void On软件系统名称Changed();
    partial void On版本号Changing(double value);
    partial void On版本号Changed();
    partial void On文件名称Changing(string value);
    partial void On文件名称Changed();
    partial void On文件内容Changing(System.Data.Linq.Binary value);
    partial void On文件内容Changed();
    partial void On文件大小Changing(string value);
    partial void On文件大小Changed();
    partial void On日期Changing(System.DateTime value);
    partial void On日期Changed();
    #endregion
		
		public Sys_AutoUpgrade()
		{
			OnCreated();
		}
		
		[Column(Storage="_序号", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int 序号
		{
			get
			{
				return this._序号;
			}
			set
			{
				if ((this._序号 != value))
				{
					this.On序号Changing(value);
					this.SendPropertyChanging();
					this._序号 = value;
					this.SendPropertyChanged("序号");
					this.On序号Changed();
				}
			}
		}
		
		[Column(Storage="_软件系统名称", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 软件系统名称
		{
			get
			{
				return this._软件系统名称;
			}
			set
			{
				if ((this._软件系统名称 != value))
				{
					this.On软件系统名称Changing(value);
					this.SendPropertyChanging();
					this._软件系统名称 = value;
					this.SendPropertyChanged("软件系统名称");
					this.On软件系统名称Changed();
				}
			}
		}
		
		[Column(Storage="_版本号", DbType="Float NOT NULL")]
		public double 版本号
		{
			get
			{
				return this._版本号;
			}
			set
			{
				if ((this._版本号 != value))
				{
					this.On版本号Changing(value);
					this.SendPropertyChanging();
					this._版本号 = value;
					this.SendPropertyChanged("版本号");
					this.On版本号Changed();
				}
			}
		}
		
		[Column(Storage="_文件名称", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string 文件名称
		{
			get
			{
				return this._文件名称;
			}
			set
			{
				if ((this._文件名称 != value))
				{
					this.On文件名称Changing(value);
					this.SendPropertyChanging();
					this._文件名称 = value;
					this.SendPropertyChanged("文件名称");
					this.On文件名称Changed();
				}
			}
		}
		
		[Column(Storage="_文件内容", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary 文件内容
		{
			get
			{
				return this._文件内容;
			}
			set
			{
				if ((this._文件内容 != value))
				{
					this.On文件内容Changing(value);
					this.SendPropertyChanging();
					this._文件内容 = value;
					this.SendPropertyChanged("文件内容");
					this.On文件内容Changed();
				}
			}
		}
		
		[Column(Storage="_文件大小", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 文件大小
		{
			get
			{
				return this._文件大小;
			}
			set
			{
				if ((this._文件大小 != value))
				{
					this.On文件大小Changing(value);
					this.SendPropertyChanging();
					this._文件大小 = value;
					this.SendPropertyChanged("文件大小");
					this.On文件大小Changed();
				}
			}
		}
		
		[Column(Storage="_日期", DbType="DateTime NOT NULL")]
		public System.DateTime 日期
		{
			get
			{
				return this._日期;
			}
			set
			{
				if ((this._日期 != value))
				{
					this.On日期Changing(value);
					this.SendPropertyChanging();
					this._日期 = value;
					this.SendPropertyChanged("日期");
					this.On日期Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
