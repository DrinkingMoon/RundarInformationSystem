//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.1891
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Expression {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("RundarWebServerDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class RundarWebServerDataSet : global::System.Data.DataSet {
        
        private CCAR_QuestionTrackBillDataTable tableCCAR_QuestionTrackBill;
        
        private CCAR_QuestionTrackListDataTable tableCCAR_QuestionTrackList;
        
        private OF_AnswerDataTable tableOF_Answer;
        
        private OF_BillID_StatusDataTable tableOF_BillID_Status;
        
        private OF_BugCodeDataTable tableOF_BugCode;
        
        private OF_BugMessageInfoDataTable tableOF_BugMessageInfo;
        
        private OF_CarBugStatusDataTable tableOF_CarBugStatus;
        
        private OF_DownRecordDataTable tableOF_DownRecord;
        
        private OF_LoginLogDataTable tableOF_LoginLog;
        
        private OF_NewsDataTable tableOF_News;
        
        private OF_NewsAudienceDataTable tableOF_NewsAudience;
        
        private OF_NewsFileDataTable tableOF_NewsFile;
        
        private OF_NewsTypeDataTable tableOF_NewsType;
        
        private OF_OrderForm_ArrivalInfoDataTable tableOF_OrderForm_ArrivalInfo;
        
        private OF_OrderFormGoodsDataTable tableOF_OrderFormGoods;
        
        private OF_OrderFormInfoDataTable tableOF_OrderFormInfo;
        
        private S_AfterServiceDataTable tableS_AfterService;
        
        private S_CommtionDataTable tableS_Commtion;
        
        private S_MessageSourceDataTable tableS_MessageSource;
        
        private S_ReplaceAccessoryDataTable tableS_ReplaceAccessory;
        
        private S_ServiceFeedBackDataTable tableS_ServiceFeedBack;
        
        private S_ServiceFileDownDataTable tableS_ServiceFileDown;
        
        private TCU_UP_DownloadLogDataTable tableTCU_UP_DownloadLog;
        
        private TCU_UP_FILEDataTable tableTCU_UP_FILE;
        
        private TCU_UP_LOGDataTable tableTCU_UP_LOG;
        
        private TCU_UP_Program_Update_LogDataTable tableTCU_UP_Program_Update_Log;
        
        private TCU_UP_ProgramTypeDataTable tableTCU_UP_ProgramType;
        
        private TCU_UP_UserInfoDataTable tableTCU_UP_UserInfo;
        
        private TCU_UP_VehicleModelDataTable tableTCU_UP_VehicleModel;
        
        private View_CCAR_QuestionTrackListDataTable tableView_CCAR_QuestionTrackList;
        
        private View_OF_LoginLogDataTable tableView_OF_LoginLog;
        
        private View_OF_NewsDataTable tableView_OF_News;
        
        private View_OF_OrderForm_ArrivalInfoDataTable tableView_OF_OrderForm_ArrivalInfo;
        
        private View_OF_OrderForm_IntegratedArrivalInfoDataTable tableView_OF_OrderForm_IntegratedArrivalInfo;
        
        private View_OF_OrderFormInfoDataTable tableView_OF_OrderFormInfo;
        
        private View_S_AfterServiceDataTable tableView_S_AfterService;
        
        private View_S_MessageSourceDataTable tableView_S_MessageSource;
        
        private View_S_ServiceFeedBackDataTable tableView_S_ServiceFeedBack;
        
        private View_TCU_UP_DownloadLogDataTable tableView_TCU_UP_DownloadLog;
        
        private View_TCU_UP_FILEDataTable tableView_TCU_UP_FILE;
        
        private View_TCU_UP_PROGRAM_UPDATE_LOGDataTable tableView_TCU_UP_PROGRAM_UPDATE_LOG;
        
        private View_TCU_UP_ProgramTypeDataTable tableView_TCU_UP_ProgramType;
        
        private View_TCU_UP_UserInfoDataTable tableView_TCU_UP_UserInfo;
        
        private View_TCU_UP_VehicleModelDataTable tableView_TCU_UP_VehicleModel;
        
        private View_TCU_UP_WRITE_LOGDataTable tableView_TCU_UP_WRITE_LOG;
        
        private GetNewsDataTable tableGetNews;
        
        private GetServerTimeDataTable tableGetServerTime;
        
        private TCU_UP_GetFileDataTable tableTCU_UP_GetFile;
        
        private TCU_UP_GetFileNoteInfoDataTable tableTCU_UP_GetFileNoteInfo;
        
        private TCU_UP_GetUserInfoDataTable tableTCU_UP_GetUserInfo;
        
        private global::System.Data.DataRelation relationFK_CCAR_QuestionTrackList_CCAR_QuestionTrackBill;
        
        private global::System.Data.DataRelation relationFK_OF_News_OF_NewsType;
        
        private global::System.Data.DataRelation relationFK_OF_OrderForm_ArrivalInfo_OF_OrderFormGoods;
        
        private global::System.Data.DataRelation relationFK_OF_OrderFormGoods_OF_OrderFormInfo;
        
        private global::System.Data.DataRelation relationFK_TCU_UP_FILE_TCU_UP_ProgramType;
        
        private global::System.Data.DataRelation relationFK_TCU_UP_UserInfo_TCU_UP_ProgramType;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RundarWebServerDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected RundarWebServerDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["CCAR_QuestionTrackBill"] != null)) {
                    base.Tables.Add(new CCAR_QuestionTrackBillDataTable(ds.Tables["CCAR_QuestionTrackBill"]));
                }
                if ((ds.Tables["CCAR_QuestionTrackList"] != null)) {
                    base.Tables.Add(new CCAR_QuestionTrackListDataTable(ds.Tables["CCAR_QuestionTrackList"]));
                }
                if ((ds.Tables["OF_Answer"] != null)) {
                    base.Tables.Add(new OF_AnswerDataTable(ds.Tables["OF_Answer"]));
                }
                if ((ds.Tables["OF_BillID_Status"] != null)) {
                    base.Tables.Add(new OF_BillID_StatusDataTable(ds.Tables["OF_BillID_Status"]));
                }
                if ((ds.Tables["OF_BugCode"] != null)) {
                    base.Tables.Add(new OF_BugCodeDataTable(ds.Tables["OF_BugCode"]));
                }
                if ((ds.Tables["OF_BugMessageInfo"] != null)) {
                    base.Tables.Add(new OF_BugMessageInfoDataTable(ds.Tables["OF_BugMessageInfo"]));
                }
                if ((ds.Tables["OF_CarBugStatus"] != null)) {
                    base.Tables.Add(new OF_CarBugStatusDataTable(ds.Tables["OF_CarBugStatus"]));
                }
                if ((ds.Tables["OF_DownRecord"] != null)) {
                    base.Tables.Add(new OF_DownRecordDataTable(ds.Tables["OF_DownRecord"]));
                }
                if ((ds.Tables["OF_LoginLog"] != null)) {
                    base.Tables.Add(new OF_LoginLogDataTable(ds.Tables["OF_LoginLog"]));
                }
                if ((ds.Tables["OF_News"] != null)) {
                    base.Tables.Add(new OF_NewsDataTable(ds.Tables["OF_News"]));
                }
                if ((ds.Tables["OF_NewsAudience"] != null)) {
                    base.Tables.Add(new OF_NewsAudienceDataTable(ds.Tables["OF_NewsAudience"]));
                }
                if ((ds.Tables["OF_NewsFile"] != null)) {
                    base.Tables.Add(new OF_NewsFileDataTable(ds.Tables["OF_NewsFile"]));
                }
                if ((ds.Tables["OF_NewsType"] != null)) {
                    base.Tables.Add(new OF_NewsTypeDataTable(ds.Tables["OF_NewsType"]));
                }
                if ((ds.Tables["OF_OrderForm_ArrivalInfo"] != null)) {
                    base.Tables.Add(new OF_OrderForm_ArrivalInfoDataTable(ds.Tables["OF_OrderForm_ArrivalInfo"]));
                }
                if ((ds.Tables["OF_OrderFormGoods"] != null)) {
                    base.Tables.Add(new OF_OrderFormGoodsDataTable(ds.Tables["OF_OrderFormGoods"]));
                }
                if ((ds.Tables["OF_OrderFormInfo"] != null)) {
                    base.Tables.Add(new OF_OrderFormInfoDataTable(ds.Tables["OF_OrderFormInfo"]));
                }
                if ((ds.Tables["S_AfterService"] != null)) {
                    base.Tables.Add(new S_AfterServiceDataTable(ds.Tables["S_AfterService"]));
                }
                if ((ds.Tables["S_Commtion"] != null)) {
                    base.Tables.Add(new S_CommtionDataTable(ds.Tables["S_Commtion"]));
                }
                if ((ds.Tables["S_MessageSource"] != null)) {
                    base.Tables.Add(new S_MessageSourceDataTable(ds.Tables["S_MessageSource"]));
                }
                if ((ds.Tables["S_ReplaceAccessory"] != null)) {
                    base.Tables.Add(new S_ReplaceAccessoryDataTable(ds.Tables["S_ReplaceAccessory"]));
                }
                if ((ds.Tables["S_ServiceFeedBack"] != null)) {
                    base.Tables.Add(new S_ServiceFeedBackDataTable(ds.Tables["S_ServiceFeedBack"]));
                }
                if ((ds.Tables["S_ServiceFileDown"] != null)) {
                    base.Tables.Add(new S_ServiceFileDownDataTable(ds.Tables["S_ServiceFileDown"]));
                }
                if ((ds.Tables["TCU_UP_DownloadLog"] != null)) {
                    base.Tables.Add(new TCU_UP_DownloadLogDataTable(ds.Tables["TCU_UP_DownloadLog"]));
                }
                if ((ds.Tables["TCU_UP_FILE"] != null)) {
                    base.Tables.Add(new TCU_UP_FILEDataTable(ds.Tables["TCU_UP_FILE"]));
                }
                if ((ds.Tables["TCU_UP_LOG"] != null)) {
                    base.Tables.Add(new TCU_UP_LOGDataTable(ds.Tables["TCU_UP_LOG"]));
                }
                if ((ds.Tables["TCU_UP_Program_Update_Log"] != null)) {
                    base.Tables.Add(new TCU_UP_Program_Update_LogDataTable(ds.Tables["TCU_UP_Program_Update_Log"]));
                }
                if ((ds.Tables["TCU_UP_ProgramType"] != null)) {
                    base.Tables.Add(new TCU_UP_ProgramTypeDataTable(ds.Tables["TCU_UP_ProgramType"]));
                }
                if ((ds.Tables["TCU_UP_UserInfo"] != null)) {
                    base.Tables.Add(new TCU_UP_UserInfoDataTable(ds.Tables["TCU_UP_UserInfo"]));
                }
                if ((ds.Tables["TCU_UP_VehicleModel"] != null)) {
                    base.Tables.Add(new TCU_UP_VehicleModelDataTable(ds.Tables["TCU_UP_VehicleModel"]));
                }
                if ((ds.Tables["View_CCAR_QuestionTrackList"] != null)) {
                    base.Tables.Add(new View_CCAR_QuestionTrackListDataTable(ds.Tables["View_CCAR_QuestionTrackList"]));
                }
                if ((ds.Tables["View_OF_LoginLog"] != null)) {
                    base.Tables.Add(new View_OF_LoginLogDataTable(ds.Tables["View_OF_LoginLog"]));
                }
                if ((ds.Tables["View_OF_News"] != null)) {
                    base.Tables.Add(new View_OF_NewsDataTable(ds.Tables["View_OF_News"]));
                }
                if ((ds.Tables["View_OF_OrderForm_ArrivalInfo"] != null)) {
                    base.Tables.Add(new View_OF_OrderForm_ArrivalInfoDataTable(ds.Tables["View_OF_OrderForm_ArrivalInfo"]));
                }
                if ((ds.Tables["View_OF_OrderForm_IntegratedArrivalInfo"] != null)) {
                    base.Tables.Add(new View_OF_OrderForm_IntegratedArrivalInfoDataTable(ds.Tables["View_OF_OrderForm_IntegratedArrivalInfo"]));
                }
                if ((ds.Tables["View_OF_OrderFormInfo"] != null)) {
                    base.Tables.Add(new View_OF_OrderFormInfoDataTable(ds.Tables["View_OF_OrderFormInfo"]));
                }
                if ((ds.Tables["View_S_AfterService"] != null)) {
                    base.Tables.Add(new View_S_AfterServiceDataTable(ds.Tables["View_S_AfterService"]));
                }
                if ((ds.Tables["View_S_MessageSource"] != null)) {
                    base.Tables.Add(new View_S_MessageSourceDataTable(ds.Tables["View_S_MessageSource"]));
                }
                if ((ds.Tables["View_S_ServiceFeedBack"] != null)) {
                    base.Tables.Add(new View_S_ServiceFeedBackDataTable(ds.Tables["View_S_ServiceFeedBack"]));
                }
                if ((ds.Tables["View_TCU_UP_DownloadLog"] != null)) {
                    base.Tables.Add(new View_TCU_UP_DownloadLogDataTable(ds.Tables["View_TCU_UP_DownloadLog"]));
                }
                if ((ds.Tables["View_TCU_UP_FILE"] != null)) {
                    base.Tables.Add(new View_TCU_UP_FILEDataTable(ds.Tables["View_TCU_UP_FILE"]));
                }
                if ((ds.Tables["View_TCU_UP_PROGRAM_UPDATE_LOG"] != null)) {
                    base.Tables.Add(new View_TCU_UP_PROGRAM_UPDATE_LOGDataTable(ds.Tables["View_TCU_UP_PROGRAM_UPDATE_LOG"]));
                }
                if ((ds.Tables["View_TCU_UP_ProgramType"] != null)) {
                    base.Tables.Add(new View_TCU_UP_ProgramTypeDataTable(ds.Tables["View_TCU_UP_ProgramType"]));
                }
                if ((ds.Tables["View_TCU_UP_UserInfo"] != null)) {
                    base.Tables.Add(new View_TCU_UP_UserInfoDataTable(ds.Tables["View_TCU_UP_UserInfo"]));
                }
                if ((ds.Tables["View_TCU_UP_VehicleModel"] != null)) {
                    base.Tables.Add(new View_TCU_UP_VehicleModelDataTable(ds.Tables["View_TCU_UP_VehicleModel"]));
                }
                if ((ds.Tables["View_TCU_UP_WRITE_LOG"] != null)) {
                    base.Tables.Add(new View_TCU_UP_WRITE_LOGDataTable(ds.Tables["View_TCU_UP_WRITE_LOG"]));
                }
                if ((ds.Tables["GetNews"] != null)) {
                    base.Tables.Add(new GetNewsDataTable(ds.Tables["GetNews"]));
                }
                if ((ds.Tables["GetServerTime"] != null)) {
                    base.Tables.Add(new GetServerTimeDataTable(ds.Tables["GetServerTime"]));
                }
                if ((ds.Tables["TCU_UP_GetFile"] != null)) {
                    base.Tables.Add(new TCU_UP_GetFileDataTable(ds.Tables["TCU_UP_GetFile"]));
                }
                if ((ds.Tables["TCU_UP_GetFileNoteInfo"] != null)) {
                    base.Tables.Add(new TCU_UP_GetFileNoteInfoDataTable(ds.Tables["TCU_UP_GetFileNoteInfo"]));
                }
                if ((ds.Tables["TCU_UP_GetUserInfo"] != null)) {
                    base.Tables.Add(new TCU_UP_GetUserInfoDataTable(ds.Tables["TCU_UP_GetUserInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CCAR_QuestionTrackBillDataTable CCAR_QuestionTrackBill {
            get {
                return this.tableCCAR_QuestionTrackBill;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CCAR_QuestionTrackListDataTable CCAR_QuestionTrackList {
            get {
                return this.tableCCAR_QuestionTrackList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OF_AnswerDataTable OF_Answer {
            get {
                return this.tableOF_Answer;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OF_BillID_StatusDataTable OF_BillID_Status {
            get {
                return this.tableOF_BillID_Status;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OF_BugCodeDataTable OF_BugCode {
            get {
                return this.tableOF_BugCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OF_BugMessageInfoDataTable OF_BugMessageInfo {
            get {
                return this.tableOF_BugMessageInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OF_CarBugStatusDataTable OF_CarBugStatus {
            get {
                return this.tableOF_CarBugStatus;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OF_DownRecordDataTable OF_DownRecord {
            get {
                return this.tableOF_DownRecord;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OF_LoginLogDataTable OF_LoginLog {
            get {
                return this.tableOF_LoginLog;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OF_NewsDataTable OF_News {
            get {
                return this.tableOF_News;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OF_NewsAudienceDataTable OF_NewsAudience {
            get {
                return this.tableOF_NewsAudience;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OF_NewsFileDataTable OF_NewsFile {
            get {
                return this.tableOF_NewsFile;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OF_NewsTypeDataTable OF_NewsType {
            get {
                return this.tableOF_NewsType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OF_OrderForm_ArrivalInfoDataTable OF_OrderForm_ArrivalInfo {
            get {
                return this.tableOF_OrderForm_ArrivalInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OF_OrderFormGoodsDataTable OF_OrderFormGoods {
            get {
                return this.tableOF_OrderFormGoods;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OF_OrderFormInfoDataTable OF_OrderFormInfo {
            get {
                return this.tableOF_OrderFormInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public S_AfterServiceDataTable S_AfterService {
            get {
                return this.tableS_AfterService;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public S_CommtionDataTable S_Commtion {
            get {
                return this.tableS_Commtion;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public S_MessageSourceDataTable S_MessageSource {
            get {
                return this.tableS_MessageSource;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public S_ReplaceAccessoryDataTable S_ReplaceAccessory {
            get {
                return this.tableS_ReplaceAccessory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public S_ServiceFeedBackDataTable S_ServiceFeedBack {
            get {
                return this.tableS_ServiceFeedBack;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public S_ServiceFileDownDataTable S_ServiceFileDown {
            get {
                return this.tableS_ServiceFileDown;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TCU_UP_DownloadLogDataTable TCU_UP_DownloadLog {
            get {
                return this.tableTCU_UP_DownloadLog;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TCU_UP_FILEDataTable TCU_UP_FILE {
            get {
                return this.tableTCU_UP_FILE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TCU_UP_LOGDataTable TCU_UP_LOG {
            get {
                return this.tableTCU_UP_LOG;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TCU_UP_Program_Update_LogDataTable TCU_UP_Program_Update_Log {
            get {
                return this.tableTCU_UP_Program_Update_Log;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TCU_UP_ProgramTypeDataTable TCU_UP_ProgramType {
            get {
                return this.tableTCU_UP_ProgramType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TCU_UP_UserInfoDataTable TCU_UP_UserInfo {
            get {
                return this.tableTCU_UP_UserInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TCU_UP_VehicleModelDataTable TCU_UP_VehicleModel {
            get {
                return this.tableTCU_UP_VehicleModel;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View_CCAR_QuestionTrackListDataTable View_CCAR_QuestionTrackList {
            get {
                return this.tableView_CCAR_QuestionTrackList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View_OF_LoginLogDataTable View_OF_LoginLog {
            get {
                return this.tableView_OF_LoginLog;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View_OF_NewsDataTable View_OF_News {
            get {
                return this.tableView_OF_News;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View_OF_OrderForm_ArrivalInfoDataTable View_OF_OrderForm_ArrivalInfo {
            get {
                return this.tableView_OF_OrderForm_ArrivalInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View_OF_OrderForm_IntegratedArrivalInfoDataTable View_OF_OrderForm_IntegratedArrivalInfo {
            get {
                return this.tableView_OF_OrderForm_IntegratedArrivalInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View_OF_OrderFormInfoDataTable View_OF_OrderFormInfo {
            get {
                return this.tableView_OF_OrderFormInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View_S_AfterServiceDataTable View_S_AfterService {
            get {
                return this.tableView_S_AfterService;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View_S_MessageSourceDataTable View_S_MessageSource {
            get {
                return this.tableView_S_MessageSource;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View_S_ServiceFeedBackDataTable View_S_ServiceFeedBack {
            get {
                return this.tableView_S_ServiceFeedBack;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View_TCU_UP_DownloadLogDataTable View_TCU_UP_DownloadLog {
            get {
                return this.tableView_TCU_UP_DownloadLog;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View_TCU_UP_FILEDataTable View_TCU_UP_FILE {
            get {
                return this.tableView_TCU_UP_FILE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View_TCU_UP_PROGRAM_UPDATE_LOGDataTable View_TCU_UP_PROGRAM_UPDATE_LOG {
            get {
                return this.tableView_TCU_UP_PROGRAM_UPDATE_LOG;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View_TCU_UP_ProgramTypeDataTable View_TCU_UP_ProgramType {
            get {
                return this.tableView_TCU_UP_ProgramType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View_TCU_UP_UserInfoDataTable View_TCU_UP_UserInfo {
            get {
                return this.tableView_TCU_UP_UserInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View_TCU_UP_VehicleModelDataTable View_TCU_UP_VehicleModel {
            get {
                return this.tableView_TCU_UP_VehicleModel;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View_TCU_UP_WRITE_LOGDataTable View_TCU_UP_WRITE_LOG {
            get {
                return this.tableView_TCU_UP_WRITE_LOG;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetNewsDataTable GetNews {
            get {
                return this.tableGetNews;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetServerTimeDataTable GetServerTime {
            get {
                return this.tableGetServerTime;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TCU_UP_GetFileDataTable TCU_UP_GetFile {
            get {
                return this.tableTCU_UP_GetFile;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TCU_UP_GetFileNoteInfoDataTable TCU_UP_GetFileNoteInfo {
            get {
                return this.tableTCU_UP_GetFileNoteInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TCU_UP_GetUserInfoDataTable TCU_UP_GetUserInfo {
            get {
                return this.tableTCU_UP_GetUserInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            RundarWebServerDataSet cln = ((RundarWebServerDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["CCAR_QuestionTrackBill"] != null)) {
                    base.Tables.Add(new CCAR_QuestionTrackBillDataTable(ds.Tables["CCAR_QuestionTrackBill"]));
                }
                if ((ds.Tables["CCAR_QuestionTrackList"] != null)) {
                    base.Tables.Add(new CCAR_QuestionTrackListDataTable(ds.Tables["CCAR_QuestionTrackList"]));
                }
                if ((ds.Tables["OF_Answer"] != null)) {
                    base.Tables.Add(new OF_AnswerDataTable(ds.Tables["OF_Answer"]));
                }
                if ((ds.Tables["OF_BillID_Status"] != null)) {
                    base.Tables.Add(new OF_BillID_StatusDataTable(ds.Tables["OF_BillID_Status"]));
                }
                if ((ds.Tables["OF_BugCode"] != null)) {
                    base.Tables.Add(new OF_BugCodeDataTable(ds.Tables["OF_BugCode"]));
                }
                if ((ds.Tables["OF_BugMessageInfo"] != null)) {
                    base.Tables.Add(new OF_BugMessageInfoDataTable(ds.Tables["OF_BugMessageInfo"]));
                }
                if ((ds.Tables["OF_CarBugStatus"] != null)) {
                    base.Tables.Add(new OF_CarBugStatusDataTable(ds.Tables["OF_CarBugStatus"]));
                }
                if ((ds.Tables["OF_DownRecord"] != null)) {
                    base.Tables.Add(new OF_DownRecordDataTable(ds.Tables["OF_DownRecord"]));
                }
                if ((ds.Tables["OF_LoginLog"] != null)) {
                    base.Tables.Add(new OF_LoginLogDataTable(ds.Tables["OF_LoginLog"]));
                }
                if ((ds.Tables["OF_News"] != null)) {
                    base.Tables.Add(new OF_NewsDataTable(ds.Tables["OF_News"]));
                }
                if ((ds.Tables["OF_NewsAudience"] != null)) {
                    base.Tables.Add(new OF_NewsAudienceDataTable(ds.Tables["OF_NewsAudience"]));
                }
                if ((ds.Tables["OF_NewsFile"] != null)) {
                    base.Tables.Add(new OF_NewsFileDataTable(ds.Tables["OF_NewsFile"]));
                }
                if ((ds.Tables["OF_NewsType"] != null)) {
                    base.Tables.Add(new OF_NewsTypeDataTable(ds.Tables["OF_NewsType"]));
                }
                if ((ds.Tables["OF_OrderForm_ArrivalInfo"] != null)) {
                    base.Tables.Add(new OF_OrderForm_ArrivalInfoDataTable(ds.Tables["OF_OrderForm_ArrivalInfo"]));
                }
                if ((ds.Tables["OF_OrderFormGoods"] != null)) {
                    base.Tables.Add(new OF_OrderFormGoodsDataTable(ds.Tables["OF_OrderFormGoods"]));
                }
                if ((ds.Tables["OF_OrderFormInfo"] != null)) {
                    base.Tables.Add(new OF_OrderFormInfoDataTable(ds.Tables["OF_OrderFormInfo"]));
                }
                if ((ds.Tables["S_AfterService"] != null)) {
                    base.Tables.Add(new S_AfterServiceDataTable(ds.Tables["S_AfterService"]));
                }
                if ((ds.Tables["S_Commtion"] != null)) {
                    base.Tables.Add(new S_CommtionDataTable(ds.Tables["S_Commtion"]));
                }
                if ((ds.Tables["S_MessageSource"] != null)) {
                    base.Tables.Add(new S_MessageSourceDataTable(ds.Tables["S_MessageSource"]));
                }
                if ((ds.Tables["S_ReplaceAccessory"] != null)) {
                    base.Tables.Add(new S_ReplaceAccessoryDataTable(ds.Tables["S_ReplaceAccessory"]));
                }
                if ((ds.Tables["S_ServiceFeedBack"] != null)) {
                    base.Tables.Add(new S_ServiceFeedBackDataTable(ds.Tables["S_ServiceFeedBack"]));
                }
                if ((ds.Tables["S_ServiceFileDown"] != null)) {
                    base.Tables.Add(new S_ServiceFileDownDataTable(ds.Tables["S_ServiceFileDown"]));
                }
                if ((ds.Tables["TCU_UP_DownloadLog"] != null)) {
                    base.Tables.Add(new TCU_UP_DownloadLogDataTable(ds.Tables["TCU_UP_DownloadLog"]));
                }
                if ((ds.Tables["TCU_UP_FILE"] != null)) {
                    base.Tables.Add(new TCU_UP_FILEDataTable(ds.Tables["TCU_UP_FILE"]));
                }
                if ((ds.Tables["TCU_UP_LOG"] != null)) {
                    base.Tables.Add(new TCU_UP_LOGDataTable(ds.Tables["TCU_UP_LOG"]));
                }
                if ((ds.Tables["TCU_UP_Program_Update_Log"] != null)) {
                    base.Tables.Add(new TCU_UP_Program_Update_LogDataTable(ds.Tables["TCU_UP_Program_Update_Log"]));
                }
                if ((ds.Tables["TCU_UP_ProgramType"] != null)) {
                    base.Tables.Add(new TCU_UP_ProgramTypeDataTable(ds.Tables["TCU_UP_ProgramType"]));
                }
                if ((ds.Tables["TCU_UP_UserInfo"] != null)) {
                    base.Tables.Add(new TCU_UP_UserInfoDataTable(ds.Tables["TCU_UP_UserInfo"]));
                }
                if ((ds.Tables["TCU_UP_VehicleModel"] != null)) {
                    base.Tables.Add(new TCU_UP_VehicleModelDataTable(ds.Tables["TCU_UP_VehicleModel"]));
                }
                if ((ds.Tables["View_CCAR_QuestionTrackList"] != null)) {
                    base.Tables.Add(new View_CCAR_QuestionTrackListDataTable(ds.Tables["View_CCAR_QuestionTrackList"]));
                }
                if ((ds.Tables["View_OF_LoginLog"] != null)) {
                    base.Tables.Add(new View_OF_LoginLogDataTable(ds.Tables["View_OF_LoginLog"]));
                }
                if ((ds.Tables["View_OF_News"] != null)) {
                    base.Tables.Add(new View_OF_NewsDataTable(ds.Tables["View_OF_News"]));
                }
                if ((ds.Tables["View_OF_OrderForm_ArrivalInfo"] != null)) {
                    base.Tables.Add(new View_OF_OrderForm_ArrivalInfoDataTable(ds.Tables["View_OF_OrderForm_ArrivalInfo"]));
                }
                if ((ds.Tables["View_OF_OrderForm_IntegratedArrivalInfo"] != null)) {
                    base.Tables.Add(new View_OF_OrderForm_IntegratedArrivalInfoDataTable(ds.Tables["View_OF_OrderForm_IntegratedArrivalInfo"]));
                }
                if ((ds.Tables["View_OF_OrderFormInfo"] != null)) {
                    base.Tables.Add(new View_OF_OrderFormInfoDataTable(ds.Tables["View_OF_OrderFormInfo"]));
                }
                if ((ds.Tables["View_S_AfterService"] != null)) {
                    base.Tables.Add(new View_S_AfterServiceDataTable(ds.Tables["View_S_AfterService"]));
                }
                if ((ds.Tables["View_S_MessageSource"] != null)) {
                    base.Tables.Add(new View_S_MessageSourceDataTable(ds.Tables["View_S_MessageSource"]));
                }
                if ((ds.Tables["View_S_ServiceFeedBack"] != null)) {
                    base.Tables.Add(new View_S_ServiceFeedBackDataTable(ds.Tables["View_S_ServiceFeedBack"]));
                }
                if ((ds.Tables["View_TCU_UP_DownloadLog"] != null)) {
                    base.Tables.Add(new View_TCU_UP_DownloadLogDataTable(ds.Tables["View_TCU_UP_DownloadLog"]));
                }
                if ((ds.Tables["View_TCU_UP_FILE"] != null)) {
                    base.Tables.Add(new View_TCU_UP_FILEDataTable(ds.Tables["View_TCU_UP_FILE"]));
                }
                if ((ds.Tables["View_TCU_UP_PROGRAM_UPDATE_LOG"] != null)) {
                    base.Tables.Add(new View_TCU_UP_PROGRAM_UPDATE_LOGDataTable(ds.Tables["View_TCU_UP_PROGRAM_UPDATE_LOG"]));
                }
                if ((ds.Tables["View_TCU_UP_ProgramType"] != null)) {
                    base.Tables.Add(new View_TCU_UP_ProgramTypeDataTable(ds.Tables["View_TCU_UP_ProgramType"]));
                }
                if ((ds.Tables["View_TCU_UP_UserInfo"] != null)) {
                    base.Tables.Add(new View_TCU_UP_UserInfoDataTable(ds.Tables["View_TCU_UP_UserInfo"]));
                }
                if ((ds.Tables["View_TCU_UP_VehicleModel"] != null)) {
                    base.Tables.Add(new View_TCU_UP_VehicleModelDataTable(ds.Tables["View_TCU_UP_VehicleModel"]));
                }
                if ((ds.Tables["View_TCU_UP_WRITE_LOG"] != null)) {
                    base.Tables.Add(new View_TCU_UP_WRITE_LOGDataTable(ds.Tables["View_TCU_UP_WRITE_LOG"]));
                }
                if ((ds.Tables["GetNews"] != null)) {
                    base.Tables.Add(new GetNewsDataTable(ds.Tables["GetNews"]));
                }
                if ((ds.Tables["GetServerTime"] != null)) {
                    base.Tables.Add(new GetServerTimeDataTable(ds.Tables["GetServerTime"]));
                }
                if ((ds.Tables["TCU_UP_GetFile"] != null)) {
                    base.Tables.Add(new TCU_UP_GetFileDataTable(ds.Tables["TCU_UP_GetFile"]));
                }
                if ((ds.Tables["TCU_UP_GetFileNoteInfo"] != null)) {
                    base.Tables.Add(new TCU_UP_GetFileNoteInfoDataTable(ds.Tables["TCU_UP_GetFileNoteInfo"]));
                }
                if ((ds.Tables["TCU_UP_GetUserInfo"] != null)) {
                    base.Tables.Add(new TCU_UP_GetUserInfoDataTable(ds.Tables["TCU_UP_GetUserInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableCCAR_QuestionTrackBill = ((CCAR_QuestionTrackBillDataTable)(base.Tables["CCAR_QuestionTrackBill"]));
            if ((initTable == true)) {
                if ((this.tableCCAR_QuestionTrackBill != null)) {
                    this.tableCCAR_QuestionTrackBill.InitVars();
                }
            }
            this.tableCCAR_QuestionTrackList = ((CCAR_QuestionTrackListDataTable)(base.Tables["CCAR_QuestionTrackList"]));
            if ((initTable == true)) {
                if ((this.tableCCAR_QuestionTrackList != null)) {
                    this.tableCCAR_QuestionTrackList.InitVars();
                }
            }
            this.tableOF_Answer = ((OF_AnswerDataTable)(base.Tables["OF_Answer"]));
            if ((initTable == true)) {
                if ((this.tableOF_Answer != null)) {
                    this.tableOF_Answer.InitVars();
                }
            }
            this.tableOF_BillID_Status = ((OF_BillID_StatusDataTable)(base.Tables["OF_BillID_Status"]));
            if ((initTable == true)) {
                if ((this.tableOF_BillID_Status != null)) {
                    this.tableOF_BillID_Status.InitVars();
                }
            }
            this.tableOF_BugCode = ((OF_BugCodeDataTable)(base.Tables["OF_BugCode"]));
            if ((initTable == true)) {
                if ((this.tableOF_BugCode != null)) {
                    this.tableOF_BugCode.InitVars();
                }
            }
            this.tableOF_BugMessageInfo = ((OF_BugMessageInfoDataTable)(base.Tables["OF_BugMessageInfo"]));
            if ((initTable == true)) {
                if ((this.tableOF_BugMessageInfo != null)) {
                    this.tableOF_BugMessageInfo.InitVars();
                }
            }
            this.tableOF_CarBugStatus = ((OF_CarBugStatusDataTable)(base.Tables["OF_CarBugStatus"]));
            if ((initTable == true)) {
                if ((this.tableOF_CarBugStatus != null)) {
                    this.tableOF_CarBugStatus.InitVars();
                }
            }
            this.tableOF_DownRecord = ((OF_DownRecordDataTable)(base.Tables["OF_DownRecord"]));
            if ((initTable == true)) {
                if ((this.tableOF_DownRecord != null)) {
                    this.tableOF_DownRecord.InitVars();
                }
            }
            this.tableOF_LoginLog = ((OF_LoginLogDataTable)(base.Tables["OF_LoginLog"]));
            if ((initTable == true)) {
                if ((this.tableOF_LoginLog != null)) {
                    this.tableOF_LoginLog.InitVars();
                }
            }
            this.tableOF_News = ((OF_NewsDataTable)(base.Tables["OF_News"]));
            if ((initTable == true)) {
                if ((this.tableOF_News != null)) {
                    this.tableOF_News.InitVars();
                }
            }
            this.tableOF_NewsAudience = ((OF_NewsAudienceDataTable)(base.Tables["OF_NewsAudience"]));
            if ((initTable == true)) {
                if ((this.tableOF_NewsAudience != null)) {
                    this.tableOF_NewsAudience.InitVars();
                }
            }
            this.tableOF_NewsFile = ((OF_NewsFileDataTable)(base.Tables["OF_NewsFile"]));
            if ((initTable == true)) {
                if ((this.tableOF_NewsFile != null)) {
                    this.tableOF_NewsFile.InitVars();
                }
            }
            this.tableOF_NewsType = ((OF_NewsTypeDataTable)(base.Tables["OF_NewsType"]));
            if ((initTable == true)) {
                if ((this.tableOF_NewsType != null)) {
                    this.tableOF_NewsType.InitVars();
                }
            }
            this.tableOF_OrderForm_ArrivalInfo = ((OF_OrderForm_ArrivalInfoDataTable)(base.Tables["OF_OrderForm_ArrivalInfo"]));
            if ((initTable == true)) {
                if ((this.tableOF_OrderForm_ArrivalInfo != null)) {
                    this.tableOF_OrderForm_ArrivalInfo.InitVars();
                }
            }
            this.tableOF_OrderFormGoods = ((OF_OrderFormGoodsDataTable)(base.Tables["OF_OrderFormGoods"]));
            if ((initTable == true)) {
                if ((this.tableOF_OrderFormGoods != null)) {
                    this.tableOF_OrderFormGoods.InitVars();
                }
            }
            this.tableOF_OrderFormInfo = ((OF_OrderFormInfoDataTable)(base.Tables["OF_OrderFormInfo"]));
            if ((initTable == true)) {
                if ((this.tableOF_OrderFormInfo != null)) {
                    this.tableOF_OrderFormInfo.InitVars();
                }
            }
            this.tableS_AfterService = ((S_AfterServiceDataTable)(base.Tables["S_AfterService"]));
            if ((initTable == true)) {
                if ((this.tableS_AfterService != null)) {
                    this.tableS_AfterService.InitVars();
                }
            }
            this.tableS_Commtion = ((S_CommtionDataTable)(base.Tables["S_Commtion"]));
            if ((initTable == true)) {
                if ((this.tableS_Commtion != null)) {
                    this.tableS_Commtion.InitVars();
                }
            }
            this.tableS_MessageSource = ((S_MessageSourceDataTable)(base.Tables["S_MessageSource"]));
            if ((initTable == true)) {
                if ((this.tableS_MessageSource != null)) {
                    this.tableS_MessageSource.InitVars();
                }
            }
            this.tableS_ReplaceAccessory = ((S_ReplaceAccessoryDataTable)(base.Tables["S_ReplaceAccessory"]));
            if ((initTable == true)) {
                if ((this.tableS_ReplaceAccessory != null)) {
                    this.tableS_ReplaceAccessory.InitVars();
                }
            }
            this.tableS_ServiceFeedBack = ((S_ServiceFeedBackDataTable)(base.Tables["S_ServiceFeedBack"]));
            if ((initTable == true)) {
                if ((this.tableS_ServiceFeedBack != null)) {
                    this.tableS_ServiceFeedBack.InitVars();
                }
            }
            this.tableS_ServiceFileDown = ((S_ServiceFileDownDataTable)(base.Tables["S_ServiceFileDown"]));
            if ((initTable == true)) {
                if ((this.tableS_ServiceFileDown != null)) {
                    this.tableS_ServiceFileDown.InitVars();
                }
            }
            this.tableTCU_UP_DownloadLog = ((TCU_UP_DownloadLogDataTable)(base.Tables["TCU_UP_DownloadLog"]));
            if ((initTable == true)) {
                if ((this.tableTCU_UP_DownloadLog != null)) {
                    this.tableTCU_UP_DownloadLog.InitVars();
                }
            }
            this.tableTCU_UP_FILE = ((TCU_UP_FILEDataTable)(base.Tables["TCU_UP_FILE"]));
            if ((initTable == true)) {
                if ((this.tableTCU_UP_FILE != null)) {
                    this.tableTCU_UP_FILE.InitVars();
                }
            }
            this.tableTCU_UP_LOG = ((TCU_UP_LOGDataTable)(base.Tables["TCU_UP_LOG"]));
            if ((initTable == true)) {
                if ((this.tableTCU_UP_LOG != null)) {
                    this.tableTCU_UP_LOG.InitVars();
                }
            }
            this.tableTCU_UP_Program_Update_Log = ((TCU_UP_Program_Update_LogDataTable)(base.Tables["TCU_UP_Program_Update_Log"]));
            if ((initTable == true)) {
                if ((this.tableTCU_UP_Program_Update_Log != null)) {
                    this.tableTCU_UP_Program_Update_Log.InitVars();
                }
            }
            this.tableTCU_UP_ProgramType = ((TCU_UP_ProgramTypeDataTable)(base.Tables["TCU_UP_ProgramType"]));
            if ((initTable == true)) {
                if ((this.tableTCU_UP_ProgramType != null)) {
                    this.tableTCU_UP_ProgramType.InitVars();
                }
            }
            this.tableTCU_UP_UserInfo = ((TCU_UP_UserInfoDataTable)(base.Tables["TCU_UP_UserInfo"]));
            if ((initTable == true)) {
                if ((this.tableTCU_UP_UserInfo != null)) {
                    this.tableTCU_UP_UserInfo.InitVars();
                }
            }
            this.tableTCU_UP_VehicleModel = ((TCU_UP_VehicleModelDataTable)(base.Tables["TCU_UP_VehicleModel"]));
            if ((initTable == true)) {
                if ((this.tableTCU_UP_VehicleModel != null)) {
                    this.tableTCU_UP_VehicleModel.InitVars();
                }
            }
            this.tableView_CCAR_QuestionTrackList = ((View_CCAR_QuestionTrackListDataTable)(base.Tables["View_CCAR_QuestionTrackList"]));
            if ((initTable == true)) {
                if ((this.tableView_CCAR_QuestionTrackList != null)) {
                    this.tableView_CCAR_QuestionTrackList.InitVars();
                }
            }
            this.tableView_OF_LoginLog = ((View_OF_LoginLogDataTable)(base.Tables["View_OF_LoginLog"]));
            if ((initTable == true)) {
                if ((this.tableView_OF_LoginLog != null)) {
                    this.tableView_OF_LoginLog.InitVars();
                }
            }
            this.tableView_OF_News = ((View_OF_NewsDataTable)(base.Tables["View_OF_News"]));
            if ((initTable == true)) {
                if ((this.tableView_OF_News != null)) {
                    this.tableView_OF_News.InitVars();
                }
            }
            this.tableView_OF_OrderForm_ArrivalInfo = ((View_OF_OrderForm_ArrivalInfoDataTable)(base.Tables["View_OF_OrderForm_ArrivalInfo"]));
            if ((initTable == true)) {
                if ((this.tableView_OF_OrderForm_ArrivalInfo != null)) {
                    this.tableView_OF_OrderForm_ArrivalInfo.InitVars();
                }
            }
            this.tableView_OF_OrderForm_IntegratedArrivalInfo = ((View_OF_OrderForm_IntegratedArrivalInfoDataTable)(base.Tables["View_OF_OrderForm_IntegratedArrivalInfo"]));
            if ((initTable == true)) {
                if ((this.tableView_OF_OrderForm_IntegratedArrivalInfo != null)) {
                    this.tableView_OF_OrderForm_IntegratedArrivalInfo.InitVars();
                }
            }
            this.tableView_OF_OrderFormInfo = ((View_OF_OrderFormInfoDataTable)(base.Tables["View_OF_OrderFormInfo"]));
            if ((initTable == true)) {
                if ((this.tableView_OF_OrderFormInfo != null)) {
                    this.tableView_OF_OrderFormInfo.InitVars();
                }
            }
            this.tableView_S_AfterService = ((View_S_AfterServiceDataTable)(base.Tables["View_S_AfterService"]));
            if ((initTable == true)) {
                if ((this.tableView_S_AfterService != null)) {
                    this.tableView_S_AfterService.InitVars();
                }
            }
            this.tableView_S_MessageSource = ((View_S_MessageSourceDataTable)(base.Tables["View_S_MessageSource"]));
            if ((initTable == true)) {
                if ((this.tableView_S_MessageSource != null)) {
                    this.tableView_S_MessageSource.InitVars();
                }
            }
            this.tableView_S_ServiceFeedBack = ((View_S_ServiceFeedBackDataTable)(base.Tables["View_S_ServiceFeedBack"]));
            if ((initTable == true)) {
                if ((this.tableView_S_ServiceFeedBack != null)) {
                    this.tableView_S_ServiceFeedBack.InitVars();
                }
            }
            this.tableView_TCU_UP_DownloadLog = ((View_TCU_UP_DownloadLogDataTable)(base.Tables["View_TCU_UP_DownloadLog"]));
            if ((initTable == true)) {
                if ((this.tableView_TCU_UP_DownloadLog != null)) {
                    this.tableView_TCU_UP_DownloadLog.InitVars();
                }
            }
            this.tableView_TCU_UP_FILE = ((View_TCU_UP_FILEDataTable)(base.Tables["View_TCU_UP_FILE"]));
            if ((initTable == true)) {
                if ((this.tableView_TCU_UP_FILE != null)) {
                    this.tableView_TCU_UP_FILE.InitVars();
                }
            }
            this.tableView_TCU_UP_PROGRAM_UPDATE_LOG = ((View_TCU_UP_PROGRAM_UPDATE_LOGDataTable)(base.Tables["View_TCU_UP_PROGRAM_UPDATE_LOG"]));
            if ((initTable == true)) {
                if ((this.tableView_TCU_UP_PROGRAM_UPDATE_LOG != null)) {
                    this.tableView_TCU_UP_PROGRAM_UPDATE_LOG.InitVars();
                }
            }
            this.tableView_TCU_UP_ProgramType = ((View_TCU_UP_ProgramTypeDataTable)(base.Tables["View_TCU_UP_ProgramType"]));
            if ((initTable == true)) {
                if ((this.tableView_TCU_UP_ProgramType != null)) {
                    this.tableView_TCU_UP_ProgramType.InitVars();
                }
            }
            this.tableView_TCU_UP_UserInfo = ((View_TCU_UP_UserInfoDataTable)(base.Tables["View_TCU_UP_UserInfo"]));
            if ((initTable == true)) {
                if ((this.tableView_TCU_UP_UserInfo != null)) {
                    this.tableView_TCU_UP_UserInfo.InitVars();
                }
            }
            this.tableView_TCU_UP_VehicleModel = ((View_TCU_UP_VehicleModelDataTable)(base.Tables["View_TCU_UP_VehicleModel"]));
            if ((initTable == true)) {
                if ((this.tableView_TCU_UP_VehicleModel != null)) {
                    this.tableView_TCU_UP_VehicleModel.InitVars();
                }
            }
            this.tableView_TCU_UP_WRITE_LOG = ((View_TCU_UP_WRITE_LOGDataTable)(base.Tables["View_TCU_UP_WRITE_LOG"]));
            if ((initTable == true)) {
                if ((this.tableView_TCU_UP_WRITE_LOG != null)) {
                    this.tableView_TCU_UP_WRITE_LOG.InitVars();
                }
            }
            this.tableGetNews = ((GetNewsDataTable)(base.Tables["GetNews"]));
            if ((initTable == true)) {
                if ((this.tableGetNews != null)) {
                    this.tableGetNews.InitVars();
                }
            }
            this.tableGetServerTime = ((GetServerTimeDataTable)(base.Tables["GetServerTime"]));
            if ((initTable == true)) {
                if ((this.tableGetServerTime != null)) {
                    this.tableGetServerTime.InitVars();
                }
            }
            this.tableTCU_UP_GetFile = ((TCU_UP_GetFileDataTable)(base.Tables["TCU_UP_GetFile"]));
            if ((initTable == true)) {
                if ((this.tableTCU_UP_GetFile != null)) {
                    this.tableTCU_UP_GetFile.InitVars();
                }
            }
            this.tableTCU_UP_GetFileNoteInfo = ((TCU_UP_GetFileNoteInfoDataTable)(base.Tables["TCU_UP_GetFileNoteInfo"]));
            if ((initTable == true)) {
                if ((this.tableTCU_UP_GetFileNoteInfo != null)) {
                    this.tableTCU_UP_GetFileNoteInfo.InitVars();
                }
            }
            this.tableTCU_UP_GetUserInfo = ((TCU_UP_GetUserInfoDataTable)(base.Tables["TCU_UP_GetUserInfo"]));
            if ((initTable == true)) {
                if ((this.tableTCU_UP_GetUserInfo != null)) {
                    this.tableTCU_UP_GetUserInfo.InitVars();
                }
            }
            this.relationFK_CCAR_QuestionTrackList_CCAR_QuestionTrackBill = this.Relations["FK_CCAR_QuestionTrackList_CCAR_QuestionTrackBill"];
            this.relationFK_OF_News_OF_NewsType = this.Relations["FK_OF_News_OF_NewsType"];
            this.relationFK_OF_OrderForm_ArrivalInfo_OF_OrderFormGoods = this.Relations["FK_OF_OrderForm_ArrivalInfo_OF_OrderFormGoods"];
            this.relationFK_OF_OrderFormGoods_OF_OrderFormInfo = this.Relations["FK_OF_OrderFormGoods_OF_OrderFormInfo"];
            this.relationFK_TCU_UP_FILE_TCU_UP_ProgramType = this.Relations["FK_TCU_UP_FILE_TCU_UP_ProgramType"];
            this.relationFK_TCU_UP_UserInfo_TCU_UP_ProgramType = this.Relations["FK_TCU_UP_UserInfo_TCU_UP_ProgramType"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "RundarWebServerDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/RundarWebServerDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCCAR_QuestionTrackBill = new CCAR_QuestionTrackBillDataTable();
            base.Tables.Add(this.tableCCAR_QuestionTrackBill);
            this.tableCCAR_QuestionTrackList = new CCAR_QuestionTrackListDataTable();
            base.Tables.Add(this.tableCCAR_QuestionTrackList);
            this.tableOF_Answer = new OF_AnswerDataTable();
            base.Tables.Add(this.tableOF_Answer);
            this.tableOF_BillID_Status = new OF_BillID_StatusDataTable();
            base.Tables.Add(this.tableOF_BillID_Status);
            this.tableOF_BugCode = new OF_BugCodeDataTable();
            base.Tables.Add(this.tableOF_BugCode);
            this.tableOF_BugMessageInfo = new OF_BugMessageInfoDataTable();
            base.Tables.Add(this.tableOF_BugMessageInfo);
            this.tableOF_CarBugStatus = new OF_CarBugStatusDataTable();
            base.Tables.Add(this.tableOF_CarBugStatus);
            this.tableOF_DownRecord = new OF_DownRecordDataTable();
            base.Tables.Add(this.tableOF_DownRecord);
            this.tableOF_LoginLog = new OF_LoginLogDataTable();
            base.Tables.Add(this.tableOF_LoginLog);
            this.tableOF_News = new OF_NewsDataTable();
            base.Tables.Add(this.tableOF_News);
            this.tableOF_NewsAudience = new OF_NewsAudienceDataTable();
            base.Tables.Add(this.tableOF_NewsAudience);
            this.tableOF_NewsFile = new OF_NewsFileDataTable();
            base.Tables.Add(this.tableOF_NewsFile);
            this.tableOF_NewsType = new OF_NewsTypeDataTable();
            base.Tables.Add(this.tableOF_NewsType);
            this.tableOF_OrderForm_ArrivalInfo = new OF_OrderForm_ArrivalInfoDataTable();
            base.Tables.Add(this.tableOF_OrderForm_ArrivalInfo);
            this.tableOF_OrderFormGoods = new OF_OrderFormGoodsDataTable();
            base.Tables.Add(this.tableOF_OrderFormGoods);
            this.tableOF_OrderFormInfo = new OF_OrderFormInfoDataTable();
            base.Tables.Add(this.tableOF_OrderFormInfo);
            this.tableS_AfterService = new S_AfterServiceDataTable();
            base.Tables.Add(this.tableS_AfterService);
            this.tableS_Commtion = new S_CommtionDataTable();
            base.Tables.Add(this.tableS_Commtion);
            this.tableS_MessageSource = new S_MessageSourceDataTable();
            base.Tables.Add(this.tableS_MessageSource);
            this.tableS_ReplaceAccessory = new S_ReplaceAccessoryDataTable();
            base.Tables.Add(this.tableS_ReplaceAccessory);
            this.tableS_ServiceFeedBack = new S_ServiceFeedBackDataTable();
            base.Tables.Add(this.tableS_ServiceFeedBack);
            this.tableS_ServiceFileDown = new S_ServiceFileDownDataTable();
            base.Tables.Add(this.tableS_ServiceFileDown);
            this.tableTCU_UP_DownloadLog = new TCU_UP_DownloadLogDataTable();
            base.Tables.Add(this.tableTCU_UP_DownloadLog);
            this.tableTCU_UP_FILE = new TCU_UP_FILEDataTable();
            base.Tables.Add(this.tableTCU_UP_FILE);
            this.tableTCU_UP_LOG = new TCU_UP_LOGDataTable();
            base.Tables.Add(this.tableTCU_UP_LOG);
            this.tableTCU_UP_Program_Update_Log = new TCU_UP_Program_Update_LogDataTable();
            base.Tables.Add(this.tableTCU_UP_Program_Update_Log);
            this.tableTCU_UP_ProgramType = new TCU_UP_ProgramTypeDataTable();
            base.Tables.Add(this.tableTCU_UP_ProgramType);
            this.tableTCU_UP_UserInfo = new TCU_UP_UserInfoDataTable();
            base.Tables.Add(this.tableTCU_UP_UserInfo);
            this.tableTCU_UP_VehicleModel = new TCU_UP_VehicleModelDataTable();
            base.Tables.Add(this.tableTCU_UP_VehicleModel);
            this.tableView_CCAR_QuestionTrackList = new View_CCAR_QuestionTrackListDataTable();
            base.Tables.Add(this.tableView_CCAR_QuestionTrackList);
            this.tableView_OF_LoginLog = new View_OF_LoginLogDataTable();
            base.Tables.Add(this.tableView_OF_LoginLog);
            this.tableView_OF_News = new View_OF_NewsDataTable();
            base.Tables.Add(this.tableView_OF_News);
            this.tableView_OF_OrderForm_ArrivalInfo = new View_OF_OrderForm_ArrivalInfoDataTable();
            base.Tables.Add(this.tableView_OF_OrderForm_ArrivalInfo);
            this.tableView_OF_OrderForm_IntegratedArrivalInfo = new View_OF_OrderForm_IntegratedArrivalInfoDataTable();
            base.Tables.Add(this.tableView_OF_OrderForm_IntegratedArrivalInfo);
            this.tableView_OF_OrderFormInfo = new View_OF_OrderFormInfoDataTable();
            base.Tables.Add(this.tableView_OF_OrderFormInfo);
            this.tableView_S_AfterService = new View_S_AfterServiceDataTable();
            base.Tables.Add(this.tableView_S_AfterService);
            this.tableView_S_MessageSource = new View_S_MessageSourceDataTable();
            base.Tables.Add(this.tableView_S_MessageSource);
            this.tableView_S_ServiceFeedBack = new View_S_ServiceFeedBackDataTable();
            base.Tables.Add(this.tableView_S_ServiceFeedBack);
            this.tableView_TCU_UP_DownloadLog = new View_TCU_UP_DownloadLogDataTable();
            base.Tables.Add(this.tableView_TCU_UP_DownloadLog);
            this.tableView_TCU_UP_FILE = new View_TCU_UP_FILEDataTable();
            base.Tables.Add(this.tableView_TCU_UP_FILE);
            this.tableView_TCU_UP_PROGRAM_UPDATE_LOG = new View_TCU_UP_PROGRAM_UPDATE_LOGDataTable();
            base.Tables.Add(this.tableView_TCU_UP_PROGRAM_UPDATE_LOG);
            this.tableView_TCU_UP_ProgramType = new View_TCU_UP_ProgramTypeDataTable();
            base.Tables.Add(this.tableView_TCU_UP_ProgramType);
            this.tableView_TCU_UP_UserInfo = new View_TCU_UP_UserInfoDataTable();
            base.Tables.Add(this.tableView_TCU_UP_UserInfo);
            this.tableView_TCU_UP_VehicleModel = new View_TCU_UP_VehicleModelDataTable();
            base.Tables.Add(this.tableView_TCU_UP_VehicleModel);
            this.tableView_TCU_UP_WRITE_LOG = new View_TCU_UP_WRITE_LOGDataTable();
            base.Tables.Add(this.tableView_TCU_UP_WRITE_LOG);
            this.tableGetNews = new GetNewsDataTable();
            base.Tables.Add(this.tableGetNews);
            this.tableGetServerTime = new GetServerTimeDataTable();
            base.Tables.Add(this.tableGetServerTime);
            this.tableTCU_UP_GetFile = new TCU_UP_GetFileDataTable();
            base.Tables.Add(this.tableTCU_UP_GetFile);
            this.tableTCU_UP_GetFileNoteInfo = new TCU_UP_GetFileNoteInfoDataTable();
            base.Tables.Add(this.tableTCU_UP_GetFileNoteInfo);
            this.tableTCU_UP_GetUserInfo = new TCU_UP_GetUserInfoDataTable();
            base.Tables.Add(this.tableTCU_UP_GetUserInfo);
            this.relationFK_CCAR_QuestionTrackList_CCAR_QuestionTrackBill = new global::System.Data.DataRelation("FK_CCAR_QuestionTrackList_CCAR_QuestionTrackBill", new global::System.Data.DataColumn[] {
                        this.tableCCAR_QuestionTrackBill.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCCAR_QuestionTrackList.FatherIDColumn}, false);
            this.Relations.Add(this.relationFK_CCAR_QuestionTrackList_CCAR_QuestionTrackBill);
            this.relationFK_OF_News_OF_NewsType = new global::System.Data.DataRelation("FK_OF_News_OF_NewsType", new global::System.Data.DataColumn[] {
                        this.tableOF_NewsType.TypeIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableOF_News.NewsTypeColumn}, false);
            this.Relations.Add(this.relationFK_OF_News_OF_NewsType);
            this.relationFK_OF_OrderForm_ArrivalInfo_OF_OrderFormGoods = new global::System.Data.DataRelation("FK_OF_OrderForm_ArrivalInfo_OF_OrderFormGoods", new global::System.Data.DataColumn[] {
                        this.tableOF_OrderFormGoods.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableOF_OrderForm_ArrivalInfo.ListIDColumn}, false);
            this.Relations.Add(this.relationFK_OF_OrderForm_ArrivalInfo_OF_OrderFormGoods);
            this.relationFK_OF_OrderFormGoods_OF_OrderFormInfo = new global::System.Data.DataRelation("FK_OF_OrderFormGoods_OF_OrderFormInfo", new global::System.Data.DataColumn[] {
                        this.tableOF_OrderFormInfo.OrderFormNumberColumn}, new global::System.Data.DataColumn[] {
                        this.tableOF_OrderFormGoods.OrderFormNumberColumn}, false);
            this.Relations.Add(this.relationFK_OF_OrderFormGoods_OF_OrderFormInfo);
            this.relationFK_TCU_UP_FILE_TCU_UP_ProgramType = new global::System.Data.DataRelation("FK_TCU_UP_FILE_TCU_UP_ProgramType", new global::System.Data.DataColumn[] {
                        this.tableTCU_UP_ProgramType.ProgramTypeColumn}, new global::System.Data.DataColumn[] {
                        this.tableTCU_UP_FILE.ProgramTypeColumn}, false);
            this.Relations.Add(this.relationFK_TCU_UP_FILE_TCU_UP_ProgramType);
            this.relationFK_TCU_UP_UserInfo_TCU_UP_ProgramType = new global::System.Data.DataRelation("FK_TCU_UP_UserInfo_TCU_UP_ProgramType", new global::System.Data.DataColumn[] {
                        this.tableTCU_UP_ProgramType.ProgramTypeColumn}, new global::System.Data.DataColumn[] {
                        this.tableTCU_UP_UserInfo.AllowProgramTypeColumn}, false);
            this.Relations.Add(this.relationFK_TCU_UP_UserInfo_TCU_UP_ProgramType);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCCAR_QuestionTrackBill() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCCAR_QuestionTrackList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOF_Answer() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOF_BillID_Status() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOF_BugCode() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOF_BugMessageInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOF_CarBugStatus() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOF_DownRecord() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOF_LoginLog() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOF_News() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOF_NewsAudience() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOF_NewsFile() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOF_NewsType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOF_OrderForm_ArrivalInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOF_OrderFormGoods() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOF_OrderFormInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeS_AfterService() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeS_Commtion() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeS_MessageSource() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeS_ReplaceAccessory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeS_ServiceFeedBack() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeS_ServiceFileDown() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTCU_UP_DownloadLog() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTCU_UP_FILE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTCU_UP_LOG() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTCU_UP_Program_Update_Log() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTCU_UP_ProgramType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTCU_UP_UserInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTCU_UP_VehicleModel() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView_CCAR_QuestionTrackList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView_OF_LoginLog() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView_OF_News() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView_OF_OrderForm_ArrivalInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView_OF_OrderForm_IntegratedArrivalInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView_OF_OrderFormInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView_S_AfterService() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView_S_MessageSource() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView_S_ServiceFeedBack() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView_TCU_UP_DownloadLog() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView_TCU_UP_FILE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView_TCU_UP_PROGRAM_UPDATE_LOG() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView_TCU_UP_ProgramType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView_TCU_UP_UserInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView_TCU_UP_VehicleModel() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView_TCU_UP_WRITE_LOG() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetNews() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetServerTime() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTCU_UP_GetFile() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTCU_UP_GetFileNoteInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTCU_UP_GetUserInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            RundarWebServerDataSet ds = new RundarWebServerDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void CCAR_QuestionTrackBillRowChangeEventHandler(object sender, CCAR_QuestionTrackBillRowChangeEvent e);
        
        public delegate void CCAR_QuestionTrackListRowChangeEventHandler(object sender, CCAR_QuestionTrackListRowChangeEvent e);
        
        public delegate void OF_AnswerRowChangeEventHandler(object sender, OF_AnswerRowChangeEvent e);
        
        public delegate void OF_BillID_StatusRowChangeEventHandler(object sender, OF_BillID_StatusRowChangeEvent e);
        
        public delegate void OF_BugCodeRowChangeEventHandler(object sender, OF_BugCodeRowChangeEvent e);
        
        public delegate void OF_BugMessageInfoRowChangeEventHandler(object sender, OF_BugMessageInfoRowChangeEvent e);
        
        public delegate void OF_CarBugStatusRowChangeEventHandler(object sender, OF_CarBugStatusRowChangeEvent e);
        
        public delegate void OF_DownRecordRowChangeEventHandler(object sender, OF_DownRecordRowChangeEvent e);
        
        public delegate void OF_LoginLogRowChangeEventHandler(object sender, OF_LoginLogRowChangeEvent e);
        
        public delegate void OF_NewsRowChangeEventHandler(object sender, OF_NewsRowChangeEvent e);
        
        public delegate void OF_NewsAudienceRowChangeEventHandler(object sender, OF_NewsAudienceRowChangeEvent e);
        
        public delegate void OF_NewsFileRowChangeEventHandler(object sender, OF_NewsFileRowChangeEvent e);
        
        public delegate void OF_NewsTypeRowChangeEventHandler(object sender, OF_NewsTypeRowChangeEvent e);
        
        public delegate void OF_OrderForm_ArrivalInfoRowChangeEventHandler(object sender, OF_OrderForm_ArrivalInfoRowChangeEvent e);
        
        public delegate void OF_OrderFormGoodsRowChangeEventHandler(object sender, OF_OrderFormGoodsRowChangeEvent e);
        
        public delegate void OF_OrderFormInfoRowChangeEventHandler(object sender, OF_OrderFormInfoRowChangeEvent e);
        
        public delegate void S_AfterServiceRowChangeEventHandler(object sender, S_AfterServiceRowChangeEvent e);
        
        public delegate void S_CommtionRowChangeEventHandler(object sender, S_CommtionRowChangeEvent e);
        
        public delegate void S_MessageSourceRowChangeEventHandler(object sender, S_MessageSourceRowChangeEvent e);
        
        public delegate void S_ReplaceAccessoryRowChangeEventHandler(object sender, S_ReplaceAccessoryRowChangeEvent e);
        
        public delegate void S_ServiceFeedBackRowChangeEventHandler(object sender, S_ServiceFeedBackRowChangeEvent e);
        
        public delegate void S_ServiceFileDownRowChangeEventHandler(object sender, S_ServiceFileDownRowChangeEvent e);
        
        public delegate void TCU_UP_DownloadLogRowChangeEventHandler(object sender, TCU_UP_DownloadLogRowChangeEvent e);
        
        public delegate void TCU_UP_FILERowChangeEventHandler(object sender, TCU_UP_FILERowChangeEvent e);
        
        public delegate void TCU_UP_LOGRowChangeEventHandler(object sender, TCU_UP_LOGRowChangeEvent e);
        
        public delegate void TCU_UP_Program_Update_LogRowChangeEventHandler(object sender, TCU_UP_Program_Update_LogRowChangeEvent e);
        
        public delegate void TCU_UP_ProgramTypeRowChangeEventHandler(object sender, TCU_UP_ProgramTypeRowChangeEvent e);
        
        public delegate void TCU_UP_UserInfoRowChangeEventHandler(object sender, TCU_UP_UserInfoRowChangeEvent e);
        
        public delegate void TCU_UP_VehicleModelRowChangeEventHandler(object sender, TCU_UP_VehicleModelRowChangeEvent e);
        
        public delegate void View_CCAR_QuestionTrackListRowChangeEventHandler(object sender, View_CCAR_QuestionTrackListRowChangeEvent e);
        
        public delegate void View_OF_LoginLogRowChangeEventHandler(object sender, View_OF_LoginLogRowChangeEvent e);
        
        public delegate void View_OF_NewsRowChangeEventHandler(object sender, View_OF_NewsRowChangeEvent e);
        
        public delegate void View_OF_OrderForm_ArrivalInfoRowChangeEventHandler(object sender, View_OF_OrderForm_ArrivalInfoRowChangeEvent e);
        
        public delegate void View_OF_OrderForm_IntegratedArrivalInfoRowChangeEventHandler(object sender, View_OF_OrderForm_IntegratedArrivalInfoRowChangeEvent e);
        
        public delegate void View_OF_OrderFormInfoRowChangeEventHandler(object sender, View_OF_OrderFormInfoRowChangeEvent e);
        
        public delegate void View_S_AfterServiceRowChangeEventHandler(object sender, View_S_AfterServiceRowChangeEvent e);
        
        public delegate void View_S_MessageSourceRowChangeEventHandler(object sender, View_S_MessageSourceRowChangeEvent e);
        
        public delegate void View_S_ServiceFeedBackRowChangeEventHandler(object sender, View_S_ServiceFeedBackRowChangeEvent e);
        
        public delegate void View_TCU_UP_DownloadLogRowChangeEventHandler(object sender, View_TCU_UP_DownloadLogRowChangeEvent e);
        
        public delegate void View_TCU_UP_FILERowChangeEventHandler(object sender, View_TCU_UP_FILERowChangeEvent e);
        
        public delegate void View_TCU_UP_PROGRAM_UPDATE_LOGRowChangeEventHandler(object sender, View_TCU_UP_PROGRAM_UPDATE_LOGRowChangeEvent e);
        
        public delegate void View_TCU_UP_ProgramTypeRowChangeEventHandler(object sender, View_TCU_UP_ProgramTypeRowChangeEvent e);
        
        public delegate void View_TCU_UP_UserInfoRowChangeEventHandler(object sender, View_TCU_UP_UserInfoRowChangeEvent e);
        
        public delegate void View_TCU_UP_VehicleModelRowChangeEventHandler(object sender, View_TCU_UP_VehicleModelRowChangeEvent e);
        
        public delegate void View_TCU_UP_WRITE_LOGRowChangeEventHandler(object sender, View_TCU_UP_WRITE_LOGRowChangeEvent e);
        
        public delegate void GetNewsRowChangeEventHandler(object sender, GetNewsRowChangeEvent e);
        
        public delegate void GetServerTimeRowChangeEventHandler(object sender, GetServerTimeRowChangeEvent e);
        
        public delegate void TCU_UP_GetFileRowChangeEventHandler(object sender, TCU_UP_GetFileRowChangeEvent e);
        
        public delegate void TCU_UP_GetFileNoteInfoRowChangeEventHandler(object sender, TCU_UP_GetFileNoteInfoRowChangeEvent e);
        
        public delegate void TCU_UP_GetUserInfoRowChangeEventHandler(object sender, TCU_UP_GetUserInfoRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CCAR_QuestionTrackBillDataTable : global::System.Data.TypedTableBase<CCAR_QuestionTrackBillRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnJLRDChargeMan;
            
            private global::System.Data.DataColumn columnCreateTime;
            
            private global::System.Data.DataColumn columnProvider;
            
            private global::System.Data.DataColumn columnQuestionTitle;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnRemark;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CCAR_QuestionTrackBillDataTable() {
                this.TableName = "CCAR_QuestionTrackBill";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CCAR_QuestionTrackBillDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CCAR_QuestionTrackBillDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JLRDChargeManColumn {
                get {
                    return this.columnJLRDChargeMan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateTimeColumn {
                get {
                    return this.columnCreateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProviderColumn {
                get {
                    return this.columnProvider;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuestionTitleColumn {
                get {
                    return this.columnQuestionTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CCAR_QuestionTrackBillRow this[int index] {
                get {
                    return ((CCAR_QuestionTrackBillRow)(this.Rows[index]));
                }
            }
            
            public event CCAR_QuestionTrackBillRowChangeEventHandler CCAR_QuestionTrackBillRowChanging;
            
            public event CCAR_QuestionTrackBillRowChangeEventHandler CCAR_QuestionTrackBillRowChanged;
            
            public event CCAR_QuestionTrackBillRowChangeEventHandler CCAR_QuestionTrackBillRowDeleting;
            
            public event CCAR_QuestionTrackBillRowChangeEventHandler CCAR_QuestionTrackBillRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCCAR_QuestionTrackBillRow(CCAR_QuestionTrackBillRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CCAR_QuestionTrackBillRow AddCCAR_QuestionTrackBillRow(string JLRDChargeMan, System.DateTime CreateTime, string Provider, string QuestionTitle, string Status, string Remark) {
                CCAR_QuestionTrackBillRow rowCCAR_QuestionTrackBillRow = ((CCAR_QuestionTrackBillRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        JLRDChargeMan,
                        CreateTime,
                        Provider,
                        QuestionTitle,
                        Status,
                        Remark};
                rowCCAR_QuestionTrackBillRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCCAR_QuestionTrackBillRow);
                return rowCCAR_QuestionTrackBillRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CCAR_QuestionTrackBillRow FindByID(int ID) {
                return ((CCAR_QuestionTrackBillRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CCAR_QuestionTrackBillDataTable cln = ((CCAR_QuestionTrackBillDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CCAR_QuestionTrackBillDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnJLRDChargeMan = base.Columns["JLRDChargeMan"];
                this.columnCreateTime = base.Columns["CreateTime"];
                this.columnProvider = base.Columns["Provider"];
                this.columnQuestionTitle = base.Columns["QuestionTitle"];
                this.columnStatus = base.Columns["Status"];
                this.columnRemark = base.Columns["Remark"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnJLRDChargeMan = new global::System.Data.DataColumn("JLRDChargeMan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJLRDChargeMan);
                this.columnCreateTime = new global::System.Data.DataColumn("CreateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateTime);
                this.columnProvider = new global::System.Data.DataColumn("Provider", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProvider);
                this.columnQuestionTitle = new global::System.Data.DataColumn("QuestionTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionTitle);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnJLRDChargeMan.AllowDBNull = false;
                this.columnJLRDChargeMan.MaxLength = 50;
                this.columnCreateTime.AllowDBNull = false;
                this.columnProvider.AllowDBNull = false;
                this.columnProvider.MaxLength = 50;
                this.columnQuestionTitle.AllowDBNull = false;
                this.columnQuestionTitle.MaxLength = 400;
                this.columnStatus.AllowDBNull = false;
                this.columnStatus.MaxLength = 50;
                this.columnRemark.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CCAR_QuestionTrackBillRow NewCCAR_QuestionTrackBillRow() {
                return ((CCAR_QuestionTrackBillRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CCAR_QuestionTrackBillRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CCAR_QuestionTrackBillRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CCAR_QuestionTrackBillRowChanged != null)) {
                    this.CCAR_QuestionTrackBillRowChanged(this, new CCAR_QuestionTrackBillRowChangeEvent(((CCAR_QuestionTrackBillRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CCAR_QuestionTrackBillRowChanging != null)) {
                    this.CCAR_QuestionTrackBillRowChanging(this, new CCAR_QuestionTrackBillRowChangeEvent(((CCAR_QuestionTrackBillRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CCAR_QuestionTrackBillRowDeleted != null)) {
                    this.CCAR_QuestionTrackBillRowDeleted(this, new CCAR_QuestionTrackBillRowChangeEvent(((CCAR_QuestionTrackBillRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CCAR_QuestionTrackBillRowDeleting != null)) {
                    this.CCAR_QuestionTrackBillRowDeleting(this, new CCAR_QuestionTrackBillRowChangeEvent(((CCAR_QuestionTrackBillRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCCAR_QuestionTrackBillRow(CCAR_QuestionTrackBillRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CCAR_QuestionTrackBillDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CCAR_QuestionTrackListDataTable : global::System.Data.TypedTableBase<CCAR_QuestionTrackListRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnFatherID;
            
            private global::System.Data.DataColumn columnProviderMan;
            
            private global::System.Data.DataColumn columnAccessoryName;
            
            private global::System.Data.DataColumn columnAccessoryCode;
            
            private global::System.Data.DataColumn columnSpec;
            
            private global::System.Data.DataColumn columnQuestion;
            
            private global::System.Data.DataColumn columnSolution;
            
            private global::System.Data.DataColumn columnStartTime;
            
            private global::System.Data.DataColumn columnGYSAcceptTime;
            
            private global::System.Data.DataColumn columnSequence;
            
            private global::System.Data.DataColumn columnEndTime;
            
            private global::System.Data.DataColumn columnLastCheckTime;
            
            private global::System.Data.DataColumn columnRemart;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CCAR_QuestionTrackListDataTable() {
                this.TableName = "CCAR_QuestionTrackList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CCAR_QuestionTrackListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CCAR_QuestionTrackListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FatherIDColumn {
                get {
                    return this.columnFatherID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProviderManColumn {
                get {
                    return this.columnProviderMan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccessoryNameColumn {
                get {
                    return this.columnAccessoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccessoryCodeColumn {
                get {
                    return this.columnAccessoryCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpecColumn {
                get {
                    return this.columnSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuestionColumn {
                get {
                    return this.columnQuestion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SolutionColumn {
                get {
                    return this.columnSolution;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartTimeColumn {
                get {
                    return this.columnStartTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GYSAcceptTimeColumn {
                get {
                    return this.columnGYSAcceptTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SequenceColumn {
                get {
                    return this.columnSequence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndTimeColumn {
                get {
                    return this.columnEndTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastCheckTimeColumn {
                get {
                    return this.columnLastCheckTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemartColumn {
                get {
                    return this.columnRemart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CCAR_QuestionTrackListRow this[int index] {
                get {
                    return ((CCAR_QuestionTrackListRow)(this.Rows[index]));
                }
            }
            
            public event CCAR_QuestionTrackListRowChangeEventHandler CCAR_QuestionTrackListRowChanging;
            
            public event CCAR_QuestionTrackListRowChangeEventHandler CCAR_QuestionTrackListRowChanged;
            
            public event CCAR_QuestionTrackListRowChangeEventHandler CCAR_QuestionTrackListRowDeleting;
            
            public event CCAR_QuestionTrackListRowChangeEventHandler CCAR_QuestionTrackListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCCAR_QuestionTrackListRow(CCAR_QuestionTrackListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CCAR_QuestionTrackListRow AddCCAR_QuestionTrackListRow(CCAR_QuestionTrackBillRow parentCCAR_QuestionTrackBillRowByFK_CCAR_QuestionTrackList_CCAR_QuestionTrackBill, string ProviderMan, string AccessoryName, string AccessoryCode, string Spec, string Question, string Solution, System.DateTime StartTime, System.DateTime GYSAcceptTime, string Sequence, System.DateTime EndTime, System.DateTime LastCheckTime, string Remart) {
                CCAR_QuestionTrackListRow rowCCAR_QuestionTrackListRow = ((CCAR_QuestionTrackListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        ProviderMan,
                        AccessoryName,
                        AccessoryCode,
                        Spec,
                        Question,
                        Solution,
                        StartTime,
                        GYSAcceptTime,
                        Sequence,
                        EndTime,
                        LastCheckTime,
                        Remart};
                if ((parentCCAR_QuestionTrackBillRowByFK_CCAR_QuestionTrackList_CCAR_QuestionTrackBill != null)) {
                    columnValuesArray[1] = parentCCAR_QuestionTrackBillRowByFK_CCAR_QuestionTrackList_CCAR_QuestionTrackBill[0];
                }
                rowCCAR_QuestionTrackListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCCAR_QuestionTrackListRow);
                return rowCCAR_QuestionTrackListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CCAR_QuestionTrackListRow FindByID(int ID) {
                return ((CCAR_QuestionTrackListRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CCAR_QuestionTrackListDataTable cln = ((CCAR_QuestionTrackListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CCAR_QuestionTrackListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnFatherID = base.Columns["FatherID"];
                this.columnProviderMan = base.Columns["ProviderMan"];
                this.columnAccessoryName = base.Columns["AccessoryName"];
                this.columnAccessoryCode = base.Columns["AccessoryCode"];
                this.columnSpec = base.Columns["Spec"];
                this.columnQuestion = base.Columns["Question"];
                this.columnSolution = base.Columns["Solution"];
                this.columnStartTime = base.Columns["StartTime"];
                this.columnGYSAcceptTime = base.Columns["GYSAcceptTime"];
                this.columnSequence = base.Columns["Sequence"];
                this.columnEndTime = base.Columns["EndTime"];
                this.columnLastCheckTime = base.Columns["LastCheckTime"];
                this.columnRemart = base.Columns["Remart"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnFatherID = new global::System.Data.DataColumn("FatherID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFatherID);
                this.columnProviderMan = new global::System.Data.DataColumn("ProviderMan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProviderMan);
                this.columnAccessoryName = new global::System.Data.DataColumn("AccessoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccessoryName);
                this.columnAccessoryCode = new global::System.Data.DataColumn("AccessoryCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccessoryCode);
                this.columnSpec = new global::System.Data.DataColumn("Spec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpec);
                this.columnQuestion = new global::System.Data.DataColumn("Question", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestion);
                this.columnSolution = new global::System.Data.DataColumn("Solution", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSolution);
                this.columnStartTime = new global::System.Data.DataColumn("StartTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartTime);
                this.columnGYSAcceptTime = new global::System.Data.DataColumn("GYSAcceptTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGYSAcceptTime);
                this.columnSequence = new global::System.Data.DataColumn("Sequence", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSequence);
                this.columnEndTime = new global::System.Data.DataColumn("EndTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndTime);
                this.columnLastCheckTime = new global::System.Data.DataColumn("LastCheckTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastCheckTime);
                this.columnRemart = new global::System.Data.DataColumn("Remart", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemart);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnFatherID.AllowDBNull = false;
                this.columnProviderMan.MaxLength = 50;
                this.columnAccessoryName.AllowDBNull = false;
                this.columnAccessoryName.MaxLength = 50;
                this.columnAccessoryCode.AllowDBNull = false;
                this.columnAccessoryCode.MaxLength = 50;
                this.columnSpec.MaxLength = 50;
                this.columnQuestion.AllowDBNull = false;
                this.columnQuestion.MaxLength = 2000;
                this.columnSolution.MaxLength = 2000;
                this.columnStartTime.AllowDBNull = false;
                this.columnSequence.MaxLength = 50;
                this.columnRemart.MaxLength = 800;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CCAR_QuestionTrackListRow NewCCAR_QuestionTrackListRow() {
                return ((CCAR_QuestionTrackListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CCAR_QuestionTrackListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CCAR_QuestionTrackListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CCAR_QuestionTrackListRowChanged != null)) {
                    this.CCAR_QuestionTrackListRowChanged(this, new CCAR_QuestionTrackListRowChangeEvent(((CCAR_QuestionTrackListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CCAR_QuestionTrackListRowChanging != null)) {
                    this.CCAR_QuestionTrackListRowChanging(this, new CCAR_QuestionTrackListRowChangeEvent(((CCAR_QuestionTrackListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CCAR_QuestionTrackListRowDeleted != null)) {
                    this.CCAR_QuestionTrackListRowDeleted(this, new CCAR_QuestionTrackListRowChangeEvent(((CCAR_QuestionTrackListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CCAR_QuestionTrackListRowDeleting != null)) {
                    this.CCAR_QuestionTrackListRowDeleting(this, new CCAR_QuestionTrackListRowChangeEvent(((CCAR_QuestionTrackListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCCAR_QuestionTrackListRow(CCAR_QuestionTrackListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CCAR_QuestionTrackListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OF_AnswerDataTable : global::System.Data.TypedTableBase<OF_AnswerRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnanswerName;
            
            private global::System.Data.DataColumn columntitle;
            
            private global::System.Data.DataColumn columnanswerContent;
            
            private global::System.Data.DataColumn columnanswerTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_AnswerDataTable() {
                this.TableName = "OF_Answer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_AnswerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OF_AnswerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn answerNameColumn {
                get {
                    return this.columnanswerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn titleColumn {
                get {
                    return this.columntitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn answerContentColumn {
                get {
                    return this.columnanswerContent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn answerTimeColumn {
                get {
                    return this.columnanswerTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_AnswerRow this[int index] {
                get {
                    return ((OF_AnswerRow)(this.Rows[index]));
                }
            }
            
            public event OF_AnswerRowChangeEventHandler OF_AnswerRowChanging;
            
            public event OF_AnswerRowChangeEventHandler OF_AnswerRowChanged;
            
            public event OF_AnswerRowChangeEventHandler OF_AnswerRowDeleting;
            
            public event OF_AnswerRowChangeEventHandler OF_AnswerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOF_AnswerRow(OF_AnswerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_AnswerRow AddOF_AnswerRow(string answerName, string title, string answerContent, System.DateTime answerTime) {
                OF_AnswerRow rowOF_AnswerRow = ((OF_AnswerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        answerName,
                        title,
                        answerContent,
                        answerTime};
                rowOF_AnswerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOF_AnswerRow);
                return rowOF_AnswerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_AnswerRow FindByID(int ID) {
                return ((OF_AnswerRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OF_AnswerDataTable cln = ((OF_AnswerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OF_AnswerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnanswerName = base.Columns["answerName"];
                this.columntitle = base.Columns["title"];
                this.columnanswerContent = base.Columns["answerContent"];
                this.columnanswerTime = base.Columns["answerTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnanswerName = new global::System.Data.DataColumn("answerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnanswerName);
                this.columntitle = new global::System.Data.DataColumn("title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntitle);
                this.columnanswerContent = new global::System.Data.DataColumn("answerContent", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnanswerContent);
                this.columnanswerTime = new global::System.Data.DataColumn("answerTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnanswerTime);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnanswerName.AllowDBNull = false;
                this.columnanswerName.MaxLength = 20;
                this.columntitle.AllowDBNull = false;
                this.columntitle.MaxLength = 500;
                this.columnanswerContent.MaxLength = 3000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_AnswerRow NewOF_AnswerRow() {
                return ((OF_AnswerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OF_AnswerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OF_AnswerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OF_AnswerRowChanged != null)) {
                    this.OF_AnswerRowChanged(this, new OF_AnswerRowChangeEvent(((OF_AnswerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OF_AnswerRowChanging != null)) {
                    this.OF_AnswerRowChanging(this, new OF_AnswerRowChangeEvent(((OF_AnswerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OF_AnswerRowDeleted != null)) {
                    this.OF_AnswerRowDeleted(this, new OF_AnswerRowChangeEvent(((OF_AnswerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OF_AnswerRowDeleting != null)) {
                    this.OF_AnswerRowDeleting(this, new OF_AnswerRowChangeEvent(((OF_AnswerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOF_AnswerRow(OF_AnswerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OF_AnswerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OF_BillID_StatusDataTable : global::System.Data.TypedTableBase<OF_BillID_StatusRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnBill_ID;
            
            private global::System.Data.DataColumn columnUseStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_BillID_StatusDataTable() {
                this.TableName = "OF_BillID_Status";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_BillID_StatusDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OF_BillID_StatusDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Bill_IDColumn {
                get {
                    return this.columnBill_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseStatusColumn {
                get {
                    return this.columnUseStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_BillID_StatusRow this[int index] {
                get {
                    return ((OF_BillID_StatusRow)(this.Rows[index]));
                }
            }
            
            public event OF_BillID_StatusRowChangeEventHandler OF_BillID_StatusRowChanging;
            
            public event OF_BillID_StatusRowChangeEventHandler OF_BillID_StatusRowChanged;
            
            public event OF_BillID_StatusRowChangeEventHandler OF_BillID_StatusRowDeleting;
            
            public event OF_BillID_StatusRowChangeEventHandler OF_BillID_StatusRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOF_BillID_StatusRow(OF_BillID_StatusRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_BillID_StatusRow AddOF_BillID_StatusRow(string Bill_ID, bool UseStatus) {
                OF_BillID_StatusRow rowOF_BillID_StatusRow = ((OF_BillID_StatusRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Bill_ID,
                        UseStatus};
                rowOF_BillID_StatusRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOF_BillID_StatusRow);
                return rowOF_BillID_StatusRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_BillID_StatusRow FindByID(int ID) {
                return ((OF_BillID_StatusRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OF_BillID_StatusDataTable cln = ((OF_BillID_StatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OF_BillID_StatusDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnBill_ID = base.Columns["Bill_ID"];
                this.columnUseStatus = base.Columns["UseStatus"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnBill_ID = new global::System.Data.DataColumn("Bill_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBill_ID);
                this.columnUseStatus = new global::System.Data.DataColumn("UseStatus", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseStatus);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnBill_ID.AllowDBNull = false;
                this.columnBill_ID.MaxLength = 60;
                this.columnUseStatus.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_BillID_StatusRow NewOF_BillID_StatusRow() {
                return ((OF_BillID_StatusRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OF_BillID_StatusRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OF_BillID_StatusRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OF_BillID_StatusRowChanged != null)) {
                    this.OF_BillID_StatusRowChanged(this, new OF_BillID_StatusRowChangeEvent(((OF_BillID_StatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OF_BillID_StatusRowChanging != null)) {
                    this.OF_BillID_StatusRowChanging(this, new OF_BillID_StatusRowChangeEvent(((OF_BillID_StatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OF_BillID_StatusRowDeleted != null)) {
                    this.OF_BillID_StatusRowDeleted(this, new OF_BillID_StatusRowChangeEvent(((OF_BillID_StatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OF_BillID_StatusRowDeleting != null)) {
                    this.OF_BillID_StatusRowDeleting(this, new OF_BillID_StatusRowChangeEvent(((OF_BillID_StatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOF_BillID_StatusRow(OF_BillID_StatusRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OF_BillID_StatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OF_BugCodeDataTable : global::System.Data.TypedTableBase<OF_BugCodeRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnBugName;
            
            private global::System.Data.DataColumn columnRemark;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_BugCodeDataTable() {
                this.TableName = "OF_BugCode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_BugCodeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OF_BugCodeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BugNameColumn {
                get {
                    return this.columnBugName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_BugCodeRow this[int index] {
                get {
                    return ((OF_BugCodeRow)(this.Rows[index]));
                }
            }
            
            public event OF_BugCodeRowChangeEventHandler OF_BugCodeRowChanging;
            
            public event OF_BugCodeRowChangeEventHandler OF_BugCodeRowChanged;
            
            public event OF_BugCodeRowChangeEventHandler OF_BugCodeRowDeleting;
            
            public event OF_BugCodeRowChangeEventHandler OF_BugCodeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOF_BugCodeRow(OF_BugCodeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_BugCodeRow AddOF_BugCodeRow(string BugName, string Remark) {
                OF_BugCodeRow rowOF_BugCodeRow = ((OF_BugCodeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        BugName,
                        Remark};
                rowOF_BugCodeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOF_BugCodeRow);
                return rowOF_BugCodeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_BugCodeRow FindByID(int ID) {
                return ((OF_BugCodeRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OF_BugCodeDataTable cln = ((OF_BugCodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OF_BugCodeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnBugName = base.Columns["BugName"];
                this.columnRemark = base.Columns["Remark"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnBugName = new global::System.Data.DataColumn("BugName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBugName);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnBugName.AllowDBNull = false;
                this.columnBugName.MaxLength = 50;
                this.columnRemark.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_BugCodeRow NewOF_BugCodeRow() {
                return ((OF_BugCodeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OF_BugCodeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OF_BugCodeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OF_BugCodeRowChanged != null)) {
                    this.OF_BugCodeRowChanged(this, new OF_BugCodeRowChangeEvent(((OF_BugCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OF_BugCodeRowChanging != null)) {
                    this.OF_BugCodeRowChanging(this, new OF_BugCodeRowChangeEvent(((OF_BugCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OF_BugCodeRowDeleted != null)) {
                    this.OF_BugCodeRowDeleted(this, new OF_BugCodeRowChangeEvent(((OF_BugCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OF_BugCodeRowDeleting != null)) {
                    this.OF_BugCodeRowDeleting(this, new OF_BugCodeRowChangeEvent(((OF_BugCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOF_BugCodeRow(OF_BugCodeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OF_BugCodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OF_BugMessageInfoDataTable : global::System.Data.TypedTableBase<OF_BugMessageInfoRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnServiceID;
            
            private global::System.Data.DataColumn columnBugCode;
            
            private global::System.Data.DataColumn columnCarMainBug;
            
            private global::System.Data.DataColumn columnCarSecendBug;
            
            private global::System.Data.DataColumn columnFrequency;
            
            private global::System.Data.DataColumn columnCondition;
            
            private global::System.Data.DataColumn columnBugDeclare;
            
            private global::System.Data.DataColumn columnCVTOilDetection;
            
            private global::System.Data.DataColumn columnPressureSensor;
            
            private global::System.Data.DataColumn columnActiveSensor;
            
            private global::System.Data.DataColumn columnPassivitySensor;
            
            private global::System.Data.DataColumn columnShiftKnob;
            
            private global::System.Data.DataColumn columnOverLinkStatus;
            
            private global::System.Data.DataColumn columnOilSump;
            
            private global::System.Data.DataColumn columnPKey;
            
            private global::System.Data.DataColumn columnRKey;
            
            private global::System.Data.DataColumn columnNKey;
            
            private global::System.Data.DataColumn columnDKey;
            
            private global::System.Data.DataColumn columnSKey;
            
            private global::System.Data.DataColumn columnRemark;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_BugMessageInfoDataTable() {
                this.TableName = "OF_BugMessageInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_BugMessageInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OF_BugMessageInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BugCodeColumn {
                get {
                    return this.columnBugCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CarMainBugColumn {
                get {
                    return this.columnCarMainBug;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CarSecendBugColumn {
                get {
                    return this.columnCarSecendBug;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrequencyColumn {
                get {
                    return this.columnFrequency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionColumn {
                get {
                    return this.columnCondition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BugDeclareColumn {
                get {
                    return this.columnBugDeclare;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CVTOilDetectionColumn {
                get {
                    return this.columnCVTOilDetection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PressureSensorColumn {
                get {
                    return this.columnPressureSensor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveSensorColumn {
                get {
                    return this.columnActiveSensor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PassivitySensorColumn {
                get {
                    return this.columnPassivitySensor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShiftKnobColumn {
                get {
                    return this.columnShiftKnob;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverLinkStatusColumn {
                get {
                    return this.columnOverLinkStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OilSumpColumn {
                get {
                    return this.columnOilSump;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PKeyColumn {
                get {
                    return this.columnPKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RKeyColumn {
                get {
                    return this.columnRKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NKeyColumn {
                get {
                    return this.columnNKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DKeyColumn {
                get {
                    return this.columnDKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SKeyColumn {
                get {
                    return this.columnSKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_BugMessageInfoRow this[int index] {
                get {
                    return ((OF_BugMessageInfoRow)(this.Rows[index]));
                }
            }
            
            public event OF_BugMessageInfoRowChangeEventHandler OF_BugMessageInfoRowChanging;
            
            public event OF_BugMessageInfoRowChangeEventHandler OF_BugMessageInfoRowChanged;
            
            public event OF_BugMessageInfoRowChangeEventHandler OF_BugMessageInfoRowDeleting;
            
            public event OF_BugMessageInfoRowChangeEventHandler OF_BugMessageInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOF_BugMessageInfoRow(OF_BugMessageInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_BugMessageInfoRow AddOF_BugMessageInfoRow(
                        string ServiceID, 
                        string BugCode, 
                        string CarMainBug, 
                        string CarSecendBug, 
                        string Frequency, 
                        string Condition, 
                        string BugDeclare, 
                        string CVTOilDetection, 
                        string PressureSensor, 
                        string ActiveSensor, 
                        string PassivitySensor, 
                        string ShiftKnob, 
                        string OverLinkStatus, 
                        string OilSump, 
                        string PKey, 
                        string RKey, 
                        string NKey, 
                        string DKey, 
                        string SKey, 
                        string Remark) {
                OF_BugMessageInfoRow rowOF_BugMessageInfoRow = ((OF_BugMessageInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ServiceID,
                        BugCode,
                        CarMainBug,
                        CarSecendBug,
                        Frequency,
                        Condition,
                        BugDeclare,
                        CVTOilDetection,
                        PressureSensor,
                        ActiveSensor,
                        PassivitySensor,
                        ShiftKnob,
                        OverLinkStatus,
                        OilSump,
                        PKey,
                        RKey,
                        NKey,
                        DKey,
                        SKey,
                        Remark};
                rowOF_BugMessageInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOF_BugMessageInfoRow);
                return rowOF_BugMessageInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_BugMessageInfoRow FindByID(int ID) {
                return ((OF_BugMessageInfoRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OF_BugMessageInfoDataTable cln = ((OF_BugMessageInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OF_BugMessageInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnServiceID = base.Columns["ServiceID"];
                this.columnBugCode = base.Columns["BugCode"];
                this.columnCarMainBug = base.Columns["CarMainBug"];
                this.columnCarSecendBug = base.Columns["CarSecendBug"];
                this.columnFrequency = base.Columns["Frequency"];
                this.columnCondition = base.Columns["Condition"];
                this.columnBugDeclare = base.Columns["BugDeclare"];
                this.columnCVTOilDetection = base.Columns["CVTOilDetection"];
                this.columnPressureSensor = base.Columns["PressureSensor"];
                this.columnActiveSensor = base.Columns["ActiveSensor"];
                this.columnPassivitySensor = base.Columns["PassivitySensor"];
                this.columnShiftKnob = base.Columns["ShiftKnob"];
                this.columnOverLinkStatus = base.Columns["OverLinkStatus"];
                this.columnOilSump = base.Columns["OilSump"];
                this.columnPKey = base.Columns["PKey"];
                this.columnRKey = base.Columns["RKey"];
                this.columnNKey = base.Columns["NKey"];
                this.columnDKey = base.Columns["DKey"];
                this.columnSKey = base.Columns["SKey"];
                this.columnRemark = base.Columns["Remark"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnServiceID = new global::System.Data.DataColumn("ServiceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceID);
                this.columnBugCode = new global::System.Data.DataColumn("BugCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBugCode);
                this.columnCarMainBug = new global::System.Data.DataColumn("CarMainBug", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCarMainBug);
                this.columnCarSecendBug = new global::System.Data.DataColumn("CarSecendBug", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCarSecendBug);
                this.columnFrequency = new global::System.Data.DataColumn("Frequency", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrequency);
                this.columnCondition = new global::System.Data.DataColumn("Condition", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCondition);
                this.columnBugDeclare = new global::System.Data.DataColumn("BugDeclare", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBugDeclare);
                this.columnCVTOilDetection = new global::System.Data.DataColumn("CVTOilDetection", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCVTOilDetection);
                this.columnPressureSensor = new global::System.Data.DataColumn("PressureSensor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPressureSensor);
                this.columnActiveSensor = new global::System.Data.DataColumn("ActiveSensor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActiveSensor);
                this.columnPassivitySensor = new global::System.Data.DataColumn("PassivitySensor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassivitySensor);
                this.columnShiftKnob = new global::System.Data.DataColumn("ShiftKnob", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShiftKnob);
                this.columnOverLinkStatus = new global::System.Data.DataColumn("OverLinkStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOverLinkStatus);
                this.columnOilSump = new global::System.Data.DataColumn("OilSump", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOilSump);
                this.columnPKey = new global::System.Data.DataColumn("PKey", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPKey);
                this.columnRKey = new global::System.Data.DataColumn("RKey", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRKey);
                this.columnNKey = new global::System.Data.DataColumn("NKey", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNKey);
                this.columnDKey = new global::System.Data.DataColumn("DKey", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDKey);
                this.columnSKey = new global::System.Data.DataColumn("SKey", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSKey);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnServiceID.MaxLength = 50;
                this.columnBugCode.MaxLength = 50;
                this.columnCarMainBug.MaxLength = 150;
                this.columnCarSecendBug.MaxLength = 150;
                this.columnFrequency.MaxLength = 50;
                this.columnCondition.MaxLength = 50;
                this.columnBugDeclare.MaxLength = 150;
                this.columnCVTOilDetection.MaxLength = 50;
                this.columnPressureSensor.MaxLength = 50;
                this.columnActiveSensor.MaxLength = 50;
                this.columnPassivitySensor.MaxLength = 50;
                this.columnShiftKnob.MaxLength = 50;
                this.columnOverLinkStatus.MaxLength = 50;
                this.columnOilSump.MaxLength = 50;
                this.columnPKey.MaxLength = 50;
                this.columnRKey.MaxLength = 50;
                this.columnNKey.MaxLength = 50;
                this.columnDKey.MaxLength = 50;
                this.columnSKey.MaxLength = 50;
                this.columnRemark.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_BugMessageInfoRow NewOF_BugMessageInfoRow() {
                return ((OF_BugMessageInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OF_BugMessageInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OF_BugMessageInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OF_BugMessageInfoRowChanged != null)) {
                    this.OF_BugMessageInfoRowChanged(this, new OF_BugMessageInfoRowChangeEvent(((OF_BugMessageInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OF_BugMessageInfoRowChanging != null)) {
                    this.OF_BugMessageInfoRowChanging(this, new OF_BugMessageInfoRowChangeEvent(((OF_BugMessageInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OF_BugMessageInfoRowDeleted != null)) {
                    this.OF_BugMessageInfoRowDeleted(this, new OF_BugMessageInfoRowChangeEvent(((OF_BugMessageInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OF_BugMessageInfoRowDeleting != null)) {
                    this.OF_BugMessageInfoRowDeleting(this, new OF_BugMessageInfoRowChangeEvent(((OF_BugMessageInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOF_BugMessageInfoRow(OF_BugMessageInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OF_BugMessageInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OF_CarBugStatusDataTable : global::System.Data.TypedTableBase<OF_CarBugStatusRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnBugCode;
            
            private global::System.Data.DataColumn columnBugName;
            
            private global::System.Data.DataColumn columnRemark;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_CarBugStatusDataTable() {
                this.TableName = "OF_CarBugStatus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_CarBugStatusDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OF_CarBugStatusDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BugCodeColumn {
                get {
                    return this.columnBugCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BugNameColumn {
                get {
                    return this.columnBugName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_CarBugStatusRow this[int index] {
                get {
                    return ((OF_CarBugStatusRow)(this.Rows[index]));
                }
            }
            
            public event OF_CarBugStatusRowChangeEventHandler OF_CarBugStatusRowChanging;
            
            public event OF_CarBugStatusRowChangeEventHandler OF_CarBugStatusRowChanged;
            
            public event OF_CarBugStatusRowChangeEventHandler OF_CarBugStatusRowDeleting;
            
            public event OF_CarBugStatusRowChangeEventHandler OF_CarBugStatusRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOF_CarBugStatusRow(OF_CarBugStatusRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_CarBugStatusRow AddOF_CarBugStatusRow(string BugCode, string BugName, string Remark) {
                OF_CarBugStatusRow rowOF_CarBugStatusRow = ((OF_CarBugStatusRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        BugCode,
                        BugName,
                        Remark};
                rowOF_CarBugStatusRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOF_CarBugStatusRow);
                return rowOF_CarBugStatusRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_CarBugStatusRow FindByID(int ID) {
                return ((OF_CarBugStatusRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OF_CarBugStatusDataTable cln = ((OF_CarBugStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OF_CarBugStatusDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnBugCode = base.Columns["BugCode"];
                this.columnBugName = base.Columns["BugName"];
                this.columnRemark = base.Columns["Remark"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnBugCode = new global::System.Data.DataColumn("BugCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBugCode);
                this.columnBugName = new global::System.Data.DataColumn("BugName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBugName);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnBugCode.AllowDBNull = false;
                this.columnBugCode.MaxLength = 50;
                this.columnBugName.AllowDBNull = false;
                this.columnBugName.MaxLength = 50;
                this.columnRemark.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_CarBugStatusRow NewOF_CarBugStatusRow() {
                return ((OF_CarBugStatusRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OF_CarBugStatusRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OF_CarBugStatusRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OF_CarBugStatusRowChanged != null)) {
                    this.OF_CarBugStatusRowChanged(this, new OF_CarBugStatusRowChangeEvent(((OF_CarBugStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OF_CarBugStatusRowChanging != null)) {
                    this.OF_CarBugStatusRowChanging(this, new OF_CarBugStatusRowChangeEvent(((OF_CarBugStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OF_CarBugStatusRowDeleted != null)) {
                    this.OF_CarBugStatusRowDeleted(this, new OF_CarBugStatusRowChangeEvent(((OF_CarBugStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OF_CarBugStatusRowDeleting != null)) {
                    this.OF_CarBugStatusRowDeleting(this, new OF_CarBugStatusRowChangeEvent(((OF_CarBugStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOF_CarBugStatusRow(OF_CarBugStatusRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OF_CarBugStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OF_DownRecordDataTable : global::System.Data.TypedTableBase<OF_DownRecordRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnFileID;
            
            private global::System.Data.DataColumn columnDownUser;
            
            private global::System.Data.DataColumn columnDownTime;
            
            private global::System.Data.DataColumn columnDownContxt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_DownRecordDataTable() {
                this.TableName = "OF_DownRecord";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_DownRecordDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OF_DownRecordDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileIDColumn {
                get {
                    return this.columnFileID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DownUserColumn {
                get {
                    return this.columnDownUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DownTimeColumn {
                get {
                    return this.columnDownTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DownContxtColumn {
                get {
                    return this.columnDownContxt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_DownRecordRow this[int index] {
                get {
                    return ((OF_DownRecordRow)(this.Rows[index]));
                }
            }
            
            public event OF_DownRecordRowChangeEventHandler OF_DownRecordRowChanging;
            
            public event OF_DownRecordRowChangeEventHandler OF_DownRecordRowChanged;
            
            public event OF_DownRecordRowChangeEventHandler OF_DownRecordRowDeleting;
            
            public event OF_DownRecordRowChangeEventHandler OF_DownRecordRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOF_DownRecordRow(OF_DownRecordRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_DownRecordRow AddOF_DownRecordRow(int FileID, string DownUser, System.DateTime DownTime, string DownContxt) {
                OF_DownRecordRow rowOF_DownRecordRow = ((OF_DownRecordRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        FileID,
                        DownUser,
                        DownTime,
                        DownContxt};
                rowOF_DownRecordRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOF_DownRecordRow);
                return rowOF_DownRecordRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_DownRecordRow FindByID(int ID) {
                return ((OF_DownRecordRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OF_DownRecordDataTable cln = ((OF_DownRecordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OF_DownRecordDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnFileID = base.Columns["FileID"];
                this.columnDownUser = base.Columns["DownUser"];
                this.columnDownTime = base.Columns["DownTime"];
                this.columnDownContxt = base.Columns["DownContxt"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnFileID = new global::System.Data.DataColumn("FileID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileID);
                this.columnDownUser = new global::System.Data.DataColumn("DownUser", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDownUser);
                this.columnDownTime = new global::System.Data.DataColumn("DownTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDownTime);
                this.columnDownContxt = new global::System.Data.DataColumn("DownContxt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDownContxt);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnDownUser.AllowDBNull = false;
                this.columnDownUser.MaxLength = 50;
                this.columnDownTime.AllowDBNull = false;
                this.columnDownContxt.AllowDBNull = false;
                this.columnDownContxt.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_DownRecordRow NewOF_DownRecordRow() {
                return ((OF_DownRecordRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OF_DownRecordRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OF_DownRecordRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OF_DownRecordRowChanged != null)) {
                    this.OF_DownRecordRowChanged(this, new OF_DownRecordRowChangeEvent(((OF_DownRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OF_DownRecordRowChanging != null)) {
                    this.OF_DownRecordRowChanging(this, new OF_DownRecordRowChangeEvent(((OF_DownRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OF_DownRecordRowDeleted != null)) {
                    this.OF_DownRecordRowDeleted(this, new OF_DownRecordRowChangeEvent(((OF_DownRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OF_DownRecordRowDeleting != null)) {
                    this.OF_DownRecordRowDeleting(this, new OF_DownRecordRowChangeEvent(((OF_DownRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOF_DownRecordRow(OF_DownRecordRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OF_DownRecordDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OF_LoginLogDataTable : global::System.Data.TypedTableBase<OF_LoginLogRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnUserCode;
            
            private global::System.Data.DataColumn columnTrueName;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnIP;
            
            private global::System.Data.DataColumn columnAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_LoginLogDataTable() {
                this.TableName = "OF_LoginLog";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_LoginLogDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OF_LoginLogDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserCodeColumn {
                get {
                    return this.columnUserCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrueNameColumn {
                get {
                    return this.columnTrueName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IPColumn {
                get {
                    return this.columnIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_LoginLogRow this[int index] {
                get {
                    return ((OF_LoginLogRow)(this.Rows[index]));
                }
            }
            
            public event OF_LoginLogRowChangeEventHandler OF_LoginLogRowChanging;
            
            public event OF_LoginLogRowChangeEventHandler OF_LoginLogRowChanged;
            
            public event OF_LoginLogRowChangeEventHandler OF_LoginLogRowDeleting;
            
            public event OF_LoginLogRowChangeEventHandler OF_LoginLogRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOF_LoginLogRow(OF_LoginLogRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_LoginLogRow AddOF_LoginLogRow(string UserCode, string TrueName, System.DateTime Date, string IP, int Amount) {
                OF_LoginLogRow rowOF_LoginLogRow = ((OF_LoginLogRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        UserCode,
                        TrueName,
                        Date,
                        IP,
                        Amount};
                rowOF_LoginLogRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOF_LoginLogRow);
                return rowOF_LoginLogRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_LoginLogRow FindByID(int ID) {
                return ((OF_LoginLogRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OF_LoginLogDataTable cln = ((OF_LoginLogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OF_LoginLogDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnUserCode = base.Columns["UserCode"];
                this.columnTrueName = base.Columns["TrueName"];
                this.columnDate = base.Columns["Date"];
                this.columnIP = base.Columns["IP"];
                this.columnAmount = base.Columns["Amount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnUserCode = new global::System.Data.DataColumn("UserCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserCode);
                this.columnTrueName = new global::System.Data.DataColumn("TrueName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrueName);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnIP = new global::System.Data.DataColumn("IP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIP);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnUserCode.AllowDBNull = false;
                this.columnUserCode.MaxLength = 50;
                this.columnTrueName.AllowDBNull = false;
                this.columnTrueName.MaxLength = 50;
                this.columnDate.AllowDBNull = false;
                this.columnIP.AllowDBNull = false;
                this.columnIP.MaxLength = 50;
                this.columnAmount.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_LoginLogRow NewOF_LoginLogRow() {
                return ((OF_LoginLogRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OF_LoginLogRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OF_LoginLogRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OF_LoginLogRowChanged != null)) {
                    this.OF_LoginLogRowChanged(this, new OF_LoginLogRowChangeEvent(((OF_LoginLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OF_LoginLogRowChanging != null)) {
                    this.OF_LoginLogRowChanging(this, new OF_LoginLogRowChangeEvent(((OF_LoginLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OF_LoginLogRowDeleted != null)) {
                    this.OF_LoginLogRowDeleted(this, new OF_LoginLogRowChangeEvent(((OF_LoginLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OF_LoginLogRowDeleting != null)) {
                    this.OF_LoginLogRowDeleting(this, new OF_LoginLogRowChangeEvent(((OF_LoginLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOF_LoginLogRow(OF_LoginLogRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OF_LoginLogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OF_NewsDataTable : global::System.Data.TypedTableBase<OF_NewsRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnTitle;
            
            private global::System.Data.DataColumn columnNewsUrl;
            
            private global::System.Data.DataColumn columnNewsDate;
            
            private global::System.Data.DataColumn columnNewsType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsDataTable() {
                this.TableName = "OF_News";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_NewsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OF_NewsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsUrlColumn {
                get {
                    return this.columnNewsUrl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsDateColumn {
                get {
                    return this.columnNewsDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsTypeColumn {
                get {
                    return this.columnNewsType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsRow this[int index] {
                get {
                    return ((OF_NewsRow)(this.Rows[index]));
                }
            }
            
            public event OF_NewsRowChangeEventHandler OF_NewsRowChanging;
            
            public event OF_NewsRowChangeEventHandler OF_NewsRowChanged;
            
            public event OF_NewsRowChangeEventHandler OF_NewsRowDeleting;
            
            public event OF_NewsRowChangeEventHandler OF_NewsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOF_NewsRow(OF_NewsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsRow AddOF_NewsRow(string Title, string NewsUrl, System.DateTime NewsDate, OF_NewsTypeRow parentOF_NewsTypeRowByFK_OF_News_OF_NewsType) {
                OF_NewsRow rowOF_NewsRow = ((OF_NewsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Title,
                        NewsUrl,
                        NewsDate,
                        null};
                if ((parentOF_NewsTypeRowByFK_OF_News_OF_NewsType != null)) {
                    columnValuesArray[4] = parentOF_NewsTypeRowByFK_OF_News_OF_NewsType[0];
                }
                rowOF_NewsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOF_NewsRow);
                return rowOF_NewsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsRow FindByID(int ID) {
                return ((OF_NewsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OF_NewsDataTable cln = ((OF_NewsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OF_NewsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTitle = base.Columns["Title"];
                this.columnNewsUrl = base.Columns["NewsUrl"];
                this.columnNewsDate = base.Columns["NewsDate"];
                this.columnNewsType = base.Columns["NewsType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTitle = new global::System.Data.DataColumn("Title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnNewsUrl = new global::System.Data.DataColumn("NewsUrl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsUrl);
                this.columnNewsDate = new global::System.Data.DataColumn("NewsDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsDate);
                this.columnNewsType = new global::System.Data.DataColumn("NewsType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnTitle.AllowDBNull = false;
                this.columnTitle.MaxLength = 150;
                this.columnNewsUrl.AllowDBNull = false;
                this.columnNewsUrl.MaxLength = 500;
                this.columnNewsDate.AllowDBNull = false;
                this.columnNewsType.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsRow NewOF_NewsRow() {
                return ((OF_NewsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OF_NewsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OF_NewsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OF_NewsRowChanged != null)) {
                    this.OF_NewsRowChanged(this, new OF_NewsRowChangeEvent(((OF_NewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OF_NewsRowChanging != null)) {
                    this.OF_NewsRowChanging(this, new OF_NewsRowChangeEvent(((OF_NewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OF_NewsRowDeleted != null)) {
                    this.OF_NewsRowDeleted(this, new OF_NewsRowChangeEvent(((OF_NewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OF_NewsRowDeleting != null)) {
                    this.OF_NewsRowDeleting(this, new OF_NewsRowChangeEvent(((OF_NewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOF_NewsRow(OF_NewsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OF_NewsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OF_NewsAudienceDataTable : global::System.Data.TypedTableBase<OF_NewsAudienceRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnNewsID;
            
            private global::System.Data.DataColumn columnAudienceType;
            
            private global::System.Data.DataColumn columnAudienceName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsAudienceDataTable() {
                this.TableName = "OF_NewsAudience";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_NewsAudienceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OF_NewsAudienceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsIDColumn {
                get {
                    return this.columnNewsID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AudienceTypeColumn {
                get {
                    return this.columnAudienceType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AudienceNameColumn {
                get {
                    return this.columnAudienceName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsAudienceRow this[int index] {
                get {
                    return ((OF_NewsAudienceRow)(this.Rows[index]));
                }
            }
            
            public event OF_NewsAudienceRowChangeEventHandler OF_NewsAudienceRowChanging;
            
            public event OF_NewsAudienceRowChangeEventHandler OF_NewsAudienceRowChanged;
            
            public event OF_NewsAudienceRowChangeEventHandler OF_NewsAudienceRowDeleting;
            
            public event OF_NewsAudienceRowChangeEventHandler OF_NewsAudienceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOF_NewsAudienceRow(OF_NewsAudienceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsAudienceRow AddOF_NewsAudienceRow(int NewsID, string AudienceType, string AudienceName) {
                OF_NewsAudienceRow rowOF_NewsAudienceRow = ((OF_NewsAudienceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        NewsID,
                        AudienceType,
                        AudienceName};
                rowOF_NewsAudienceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOF_NewsAudienceRow);
                return rowOF_NewsAudienceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsAudienceRow FindByID(int ID) {
                return ((OF_NewsAudienceRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OF_NewsAudienceDataTable cln = ((OF_NewsAudienceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OF_NewsAudienceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNewsID = base.Columns["NewsID"];
                this.columnAudienceType = base.Columns["AudienceType"];
                this.columnAudienceName = base.Columns["AudienceName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNewsID = new global::System.Data.DataColumn("NewsID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsID);
                this.columnAudienceType = new global::System.Data.DataColumn("AudienceType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAudienceType);
                this.columnAudienceName = new global::System.Data.DataColumn("AudienceName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAudienceName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnNewsID.AllowDBNull = false;
                this.columnAudienceType.AllowDBNull = false;
                this.columnAudienceType.MaxLength = 50;
                this.columnAudienceName.AllowDBNull = false;
                this.columnAudienceName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsAudienceRow NewOF_NewsAudienceRow() {
                return ((OF_NewsAudienceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OF_NewsAudienceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OF_NewsAudienceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OF_NewsAudienceRowChanged != null)) {
                    this.OF_NewsAudienceRowChanged(this, new OF_NewsAudienceRowChangeEvent(((OF_NewsAudienceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OF_NewsAudienceRowChanging != null)) {
                    this.OF_NewsAudienceRowChanging(this, new OF_NewsAudienceRowChangeEvent(((OF_NewsAudienceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OF_NewsAudienceRowDeleted != null)) {
                    this.OF_NewsAudienceRowDeleted(this, new OF_NewsAudienceRowChangeEvent(((OF_NewsAudienceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OF_NewsAudienceRowDeleting != null)) {
                    this.OF_NewsAudienceRowDeleting(this, new OF_NewsAudienceRowChangeEvent(((OF_NewsAudienceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOF_NewsAudienceRow(OF_NewsAudienceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OF_NewsAudienceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OF_NewsFileDataTable : global::System.Data.TypedTableBase<OF_NewsFileRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnsender;
            
            private global::System.Data.DataColumn columntitle;
            
            private global::System.Data.DataColumn columncontents;
            
            private global::System.Data.DataColumn columnfileNames;
            
            private global::System.Data.DataColumn columnfilePath;
            
            private global::System.Data.DataColumn columnreceiver;
            
            private global::System.Data.DataColumn columnreleaseTime;
            
            private global::System.Data.DataColumn columnnewsType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsFileDataTable() {
                this.TableName = "OF_NewsFile";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_NewsFileDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OF_NewsFileDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn senderColumn {
                get {
                    return this.columnsender;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn titleColumn {
                get {
                    return this.columntitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn contentsColumn {
                get {
                    return this.columncontents;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fileNamesColumn {
                get {
                    return this.columnfileNames;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn filePathColumn {
                get {
                    return this.columnfilePath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn receiverColumn {
                get {
                    return this.columnreceiver;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn releaseTimeColumn {
                get {
                    return this.columnreleaseTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn newsTypeColumn {
                get {
                    return this.columnnewsType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsFileRow this[int index] {
                get {
                    return ((OF_NewsFileRow)(this.Rows[index]));
                }
            }
            
            public event OF_NewsFileRowChangeEventHandler OF_NewsFileRowChanging;
            
            public event OF_NewsFileRowChangeEventHandler OF_NewsFileRowChanged;
            
            public event OF_NewsFileRowChangeEventHandler OF_NewsFileRowDeleting;
            
            public event OF_NewsFileRowChangeEventHandler OF_NewsFileRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOF_NewsFileRow(OF_NewsFileRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsFileRow AddOF_NewsFileRow(string sender, string title, string contents, string fileNames, string filePath, string receiver, System.DateTime releaseTime, string newsType) {
                OF_NewsFileRow rowOF_NewsFileRow = ((OF_NewsFileRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        sender,
                        title,
                        contents,
                        fileNames,
                        filePath,
                        receiver,
                        releaseTime,
                        newsType};
                rowOF_NewsFileRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOF_NewsFileRow);
                return rowOF_NewsFileRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsFileRow FindByID(int ID) {
                return ((OF_NewsFileRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OF_NewsFileDataTable cln = ((OF_NewsFileDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OF_NewsFileDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnsender = base.Columns["sender"];
                this.columntitle = base.Columns["title"];
                this.columncontents = base.Columns["contents"];
                this.columnfileNames = base.Columns["fileNames"];
                this.columnfilePath = base.Columns["filePath"];
                this.columnreceiver = base.Columns["receiver"];
                this.columnreleaseTime = base.Columns["releaseTime"];
                this.columnnewsType = base.Columns["newsType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnsender = new global::System.Data.DataColumn("sender", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsender);
                this.columntitle = new global::System.Data.DataColumn("title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntitle);
                this.columncontents = new global::System.Data.DataColumn("contents", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncontents);
                this.columnfileNames = new global::System.Data.DataColumn("fileNames", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfileNames);
                this.columnfilePath = new global::System.Data.DataColumn("filePath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfilePath);
                this.columnreceiver = new global::System.Data.DataColumn("receiver", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreceiver);
                this.columnreleaseTime = new global::System.Data.DataColumn("releaseTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreleaseTime);
                this.columnnewsType = new global::System.Data.DataColumn("newsType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnewsType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnsender.AllowDBNull = false;
                this.columnsender.MaxLength = 20;
                this.columntitle.AllowDBNull = false;
                this.columntitle.MaxLength = 500;
                this.columncontents.MaxLength = 3000;
                this.columnfileNames.MaxLength = 100;
                this.columnfilePath.MaxLength = 200;
                this.columnreceiver.MaxLength = 30;
                this.columnnewsType.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsFileRow NewOF_NewsFileRow() {
                return ((OF_NewsFileRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OF_NewsFileRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OF_NewsFileRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OF_NewsFileRowChanged != null)) {
                    this.OF_NewsFileRowChanged(this, new OF_NewsFileRowChangeEvent(((OF_NewsFileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OF_NewsFileRowChanging != null)) {
                    this.OF_NewsFileRowChanging(this, new OF_NewsFileRowChangeEvent(((OF_NewsFileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OF_NewsFileRowDeleted != null)) {
                    this.OF_NewsFileRowDeleted(this, new OF_NewsFileRowChangeEvent(((OF_NewsFileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OF_NewsFileRowDeleting != null)) {
                    this.OF_NewsFileRowDeleting(this, new OF_NewsFileRowChangeEvent(((OF_NewsFileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOF_NewsFileRow(OF_NewsFileRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OF_NewsFileDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OF_NewsTypeDataTable : global::System.Data.TypedTableBase<OF_NewsTypeRow> {
            
            private global::System.Data.DataColumn columnTypeID;
            
            private global::System.Data.DataColumn columnTypeName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsTypeDataTable() {
                this.TableName = "OF_NewsType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_NewsTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OF_NewsTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeIDColumn {
                get {
                    return this.columnTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeNameColumn {
                get {
                    return this.columnTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsTypeRow this[int index] {
                get {
                    return ((OF_NewsTypeRow)(this.Rows[index]));
                }
            }
            
            public event OF_NewsTypeRowChangeEventHandler OF_NewsTypeRowChanging;
            
            public event OF_NewsTypeRowChangeEventHandler OF_NewsTypeRowChanged;
            
            public event OF_NewsTypeRowChangeEventHandler OF_NewsTypeRowDeleting;
            
            public event OF_NewsTypeRowChangeEventHandler OF_NewsTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOF_NewsTypeRow(OF_NewsTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsTypeRow AddOF_NewsTypeRow(int TypeID, string TypeName) {
                OF_NewsTypeRow rowOF_NewsTypeRow = ((OF_NewsTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TypeID,
                        TypeName};
                rowOF_NewsTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOF_NewsTypeRow);
                return rowOF_NewsTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsTypeRow FindByTypeID(int TypeID) {
                return ((OF_NewsTypeRow)(this.Rows.Find(new object[] {
                            TypeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OF_NewsTypeDataTable cln = ((OF_NewsTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OF_NewsTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTypeID = base.Columns["TypeID"];
                this.columnTypeName = base.Columns["TypeName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTypeID = new global::System.Data.DataColumn("TypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeID);
                this.columnTypeName = new global::System.Data.DataColumn("TypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTypeID}, true));
                this.columnTypeID.AllowDBNull = false;
                this.columnTypeID.Unique = true;
                this.columnTypeName.AllowDBNull = false;
                this.columnTypeName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsTypeRow NewOF_NewsTypeRow() {
                return ((OF_NewsTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OF_NewsTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OF_NewsTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OF_NewsTypeRowChanged != null)) {
                    this.OF_NewsTypeRowChanged(this, new OF_NewsTypeRowChangeEvent(((OF_NewsTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OF_NewsTypeRowChanging != null)) {
                    this.OF_NewsTypeRowChanging(this, new OF_NewsTypeRowChangeEvent(((OF_NewsTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OF_NewsTypeRowDeleted != null)) {
                    this.OF_NewsTypeRowDeleted(this, new OF_NewsTypeRowChangeEvent(((OF_NewsTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OF_NewsTypeRowDeleting != null)) {
                    this.OF_NewsTypeRowDeleting(this, new OF_NewsTypeRowChangeEvent(((OF_NewsTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOF_NewsTypeRow(OF_NewsTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OF_NewsTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OF_OrderForm_ArrivalInfoDataTable : global::System.Data.TypedTableBase<OF_OrderForm_ArrivalInfoRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnListID;
            
            private global::System.Data.DataColumn columnInBillID;
            
            private global::System.Data.DataColumn columnBatchNo;
            
            private global::System.Data.DataColumn columnActualDate;
            
            private global::System.Data.DataColumn columnActuaQuantity;
            
            private global::System.Data.DataColumn columnEligibilityQuantity;
            
            private global::System.Data.DataColumn columnConcessionQuantity;
            
            private global::System.Data.DataColumn columnDestructQuantity;
            
            private global::System.Data.DataColumn columnRejectQuantity;
            
            private global::System.Data.DataColumn columnQualityInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderForm_ArrivalInfoDataTable() {
                this.TableName = "OF_OrderForm_ArrivalInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_OrderForm_ArrivalInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OF_OrderForm_ArrivalInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ListIDColumn {
                get {
                    return this.columnListID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InBillIDColumn {
                get {
                    return this.columnInBillID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BatchNoColumn {
                get {
                    return this.columnBatchNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualDateColumn {
                get {
                    return this.columnActualDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActuaQuantityColumn {
                get {
                    return this.columnActuaQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EligibilityQuantityColumn {
                get {
                    return this.columnEligibilityQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConcessionQuantityColumn {
                get {
                    return this.columnConcessionQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestructQuantityColumn {
                get {
                    return this.columnDestructQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RejectQuantityColumn {
                get {
                    return this.columnRejectQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QualityInfoColumn {
                get {
                    return this.columnQualityInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderForm_ArrivalInfoRow this[int index] {
                get {
                    return ((OF_OrderForm_ArrivalInfoRow)(this.Rows[index]));
                }
            }
            
            public event OF_OrderForm_ArrivalInfoRowChangeEventHandler OF_OrderForm_ArrivalInfoRowChanging;
            
            public event OF_OrderForm_ArrivalInfoRowChangeEventHandler OF_OrderForm_ArrivalInfoRowChanged;
            
            public event OF_OrderForm_ArrivalInfoRowChangeEventHandler OF_OrderForm_ArrivalInfoRowDeleting;
            
            public event OF_OrderForm_ArrivalInfoRowChangeEventHandler OF_OrderForm_ArrivalInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOF_OrderForm_ArrivalInfoRow(OF_OrderForm_ArrivalInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderForm_ArrivalInfoRow AddOF_OrderForm_ArrivalInfoRow(int ID, OF_OrderFormGoodsRow parentOF_OrderFormGoodsRowByFK_OF_OrderForm_ArrivalInfo_OF_OrderFormGoods, string InBillID, string BatchNo, System.DateTime ActualDate, decimal ActuaQuantity, decimal EligibilityQuantity, decimal ConcessionQuantity, decimal DestructQuantity, decimal RejectQuantity, string QualityInfo) {
                OF_OrderForm_ArrivalInfoRow rowOF_OrderForm_ArrivalInfoRow = ((OF_OrderForm_ArrivalInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        null,
                        InBillID,
                        BatchNo,
                        ActualDate,
                        ActuaQuantity,
                        EligibilityQuantity,
                        ConcessionQuantity,
                        DestructQuantity,
                        RejectQuantity,
                        QualityInfo};
                if ((parentOF_OrderFormGoodsRowByFK_OF_OrderForm_ArrivalInfo_OF_OrderFormGoods != null)) {
                    columnValuesArray[1] = parentOF_OrderFormGoodsRowByFK_OF_OrderForm_ArrivalInfo_OF_OrderFormGoods[0];
                }
                rowOF_OrderForm_ArrivalInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOF_OrderForm_ArrivalInfoRow);
                return rowOF_OrderForm_ArrivalInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderForm_ArrivalInfoRow FindByID(int ID) {
                return ((OF_OrderForm_ArrivalInfoRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OF_OrderForm_ArrivalInfoDataTable cln = ((OF_OrderForm_ArrivalInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OF_OrderForm_ArrivalInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnListID = base.Columns["ListID"];
                this.columnInBillID = base.Columns["InBillID"];
                this.columnBatchNo = base.Columns["BatchNo"];
                this.columnActualDate = base.Columns["ActualDate"];
                this.columnActuaQuantity = base.Columns["ActuaQuantity"];
                this.columnEligibilityQuantity = base.Columns["EligibilityQuantity"];
                this.columnConcessionQuantity = base.Columns["ConcessionQuantity"];
                this.columnDestructQuantity = base.Columns["DestructQuantity"];
                this.columnRejectQuantity = base.Columns["RejectQuantity"];
                this.columnQualityInfo = base.Columns["QualityInfo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnListID = new global::System.Data.DataColumn("ListID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnListID);
                this.columnInBillID = new global::System.Data.DataColumn("InBillID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInBillID);
                this.columnBatchNo = new global::System.Data.DataColumn("BatchNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBatchNo);
                this.columnActualDate = new global::System.Data.DataColumn("ActualDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualDate);
                this.columnActuaQuantity = new global::System.Data.DataColumn("ActuaQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActuaQuantity);
                this.columnEligibilityQuantity = new global::System.Data.DataColumn("EligibilityQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEligibilityQuantity);
                this.columnConcessionQuantity = new global::System.Data.DataColumn("ConcessionQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConcessionQuantity);
                this.columnDestructQuantity = new global::System.Data.DataColumn("DestructQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestructQuantity);
                this.columnRejectQuantity = new global::System.Data.DataColumn("RejectQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRejectQuantity);
                this.columnQualityInfo = new global::System.Data.DataColumn("QualityInfo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQualityInfo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnListID.AllowDBNull = false;
                this.columnInBillID.AllowDBNull = false;
                this.columnInBillID.MaxLength = 50;
                this.columnBatchNo.AllowDBNull = false;
                this.columnBatchNo.MaxLength = 50;
                this.columnActualDate.AllowDBNull = false;
                this.columnActuaQuantity.AllowDBNull = false;
                this.columnEligibilityQuantity.AllowDBNull = false;
                this.columnConcessionQuantity.AllowDBNull = false;
                this.columnDestructQuantity.AllowDBNull = false;
                this.columnRejectQuantity.AllowDBNull = false;
                this.columnQualityInfo.AllowDBNull = false;
                this.columnQualityInfo.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderForm_ArrivalInfoRow NewOF_OrderForm_ArrivalInfoRow() {
                return ((OF_OrderForm_ArrivalInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OF_OrderForm_ArrivalInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OF_OrderForm_ArrivalInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OF_OrderForm_ArrivalInfoRowChanged != null)) {
                    this.OF_OrderForm_ArrivalInfoRowChanged(this, new OF_OrderForm_ArrivalInfoRowChangeEvent(((OF_OrderForm_ArrivalInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OF_OrderForm_ArrivalInfoRowChanging != null)) {
                    this.OF_OrderForm_ArrivalInfoRowChanging(this, new OF_OrderForm_ArrivalInfoRowChangeEvent(((OF_OrderForm_ArrivalInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OF_OrderForm_ArrivalInfoRowDeleted != null)) {
                    this.OF_OrderForm_ArrivalInfoRowDeleted(this, new OF_OrderForm_ArrivalInfoRowChangeEvent(((OF_OrderForm_ArrivalInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OF_OrderForm_ArrivalInfoRowDeleting != null)) {
                    this.OF_OrderForm_ArrivalInfoRowDeleting(this, new OF_OrderForm_ArrivalInfoRowChangeEvent(((OF_OrderForm_ArrivalInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOF_OrderForm_ArrivalInfoRow(OF_OrderForm_ArrivalInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OF_OrderForm_ArrivalInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OF_OrderFormGoodsDataTable : global::System.Data.TypedTableBase<OF_OrderFormGoodsRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnOrderFormNumber;
            
            private global::System.Data.DataColumn columnGoodsCode;
            
            private global::System.Data.DataColumn columnGoodsName;
            
            private global::System.Data.DataColumn columnSpec;
            
            private global::System.Data.DataColumn columnArriveTime;
            
            private global::System.Data.DataColumn columnOrderCount;
            
            private global::System.Data.DataColumn columnIsIncept;
            
            private global::System.Data.DataColumn columnStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderFormGoodsDataTable() {
                this.TableName = "OF_OrderFormGoods";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_OrderFormGoodsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OF_OrderFormGoodsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderFormNumberColumn {
                get {
                    return this.columnOrderFormNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsCodeColumn {
                get {
                    return this.columnGoodsCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsNameColumn {
                get {
                    return this.columnGoodsName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpecColumn {
                get {
                    return this.columnSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArriveTimeColumn {
                get {
                    return this.columnArriveTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderCountColumn {
                get {
                    return this.columnOrderCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsInceptColumn {
                get {
                    return this.columnIsIncept;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderFormGoodsRow this[int index] {
                get {
                    return ((OF_OrderFormGoodsRow)(this.Rows[index]));
                }
            }
            
            public event OF_OrderFormGoodsRowChangeEventHandler OF_OrderFormGoodsRowChanging;
            
            public event OF_OrderFormGoodsRowChangeEventHandler OF_OrderFormGoodsRowChanged;
            
            public event OF_OrderFormGoodsRowChangeEventHandler OF_OrderFormGoodsRowDeleting;
            
            public event OF_OrderFormGoodsRowChangeEventHandler OF_OrderFormGoodsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOF_OrderFormGoodsRow(OF_OrderFormGoodsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderFormGoodsRow AddOF_OrderFormGoodsRow(OF_OrderFormInfoRow parentOF_OrderFormInfoRowByFK_OF_OrderFormGoods_OF_OrderFormInfo, string GoodsCode, string GoodsName, string Spec, System.DateTime ArriveTime, decimal OrderCount, bool IsIncept, string Status) {
                OF_OrderFormGoodsRow rowOF_OrderFormGoodsRow = ((OF_OrderFormGoodsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        GoodsCode,
                        GoodsName,
                        Spec,
                        ArriveTime,
                        OrderCount,
                        IsIncept,
                        Status};
                if ((parentOF_OrderFormInfoRowByFK_OF_OrderFormGoods_OF_OrderFormInfo != null)) {
                    columnValuesArray[1] = parentOF_OrderFormInfoRowByFK_OF_OrderFormGoods_OF_OrderFormInfo[0];
                }
                rowOF_OrderFormGoodsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOF_OrderFormGoodsRow);
                return rowOF_OrderFormGoodsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderFormGoodsRow FindByID(int ID) {
                return ((OF_OrderFormGoodsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OF_OrderFormGoodsDataTable cln = ((OF_OrderFormGoodsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OF_OrderFormGoodsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnOrderFormNumber = base.Columns["OrderFormNumber"];
                this.columnGoodsCode = base.Columns["GoodsCode"];
                this.columnGoodsName = base.Columns["GoodsName"];
                this.columnSpec = base.Columns["Spec"];
                this.columnArriveTime = base.Columns["ArriveTime"];
                this.columnOrderCount = base.Columns["OrderCount"];
                this.columnIsIncept = base.Columns["IsIncept"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnOrderFormNumber = new global::System.Data.DataColumn("OrderFormNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderFormNumber);
                this.columnGoodsCode = new global::System.Data.DataColumn("GoodsCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsCode);
                this.columnGoodsName = new global::System.Data.DataColumn("GoodsName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsName);
                this.columnSpec = new global::System.Data.DataColumn("Spec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpec);
                this.columnArriveTime = new global::System.Data.DataColumn("ArriveTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArriveTime);
                this.columnOrderCount = new global::System.Data.DataColumn("OrderCount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderCount);
                this.columnIsIncept = new global::System.Data.DataColumn("IsIncept", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsIncept);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnOrderFormNumber.AllowDBNull = false;
                this.columnOrderFormNumber.MaxLength = 50;
                this.columnGoodsCode.AllowDBNull = false;
                this.columnGoodsCode.MaxLength = 50;
                this.columnGoodsName.AllowDBNull = false;
                this.columnGoodsName.MaxLength = 50;
                this.columnSpec.AllowDBNull = false;
                this.columnSpec.MaxLength = 50;
                this.columnArriveTime.AllowDBNull = false;
                this.columnOrderCount.AllowDBNull = false;
                this.columnIsIncept.AllowDBNull = false;
                this.columnStatus.AllowDBNull = false;
                this.columnStatus.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderFormGoodsRow NewOF_OrderFormGoodsRow() {
                return ((OF_OrderFormGoodsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OF_OrderFormGoodsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OF_OrderFormGoodsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OF_OrderFormGoodsRowChanged != null)) {
                    this.OF_OrderFormGoodsRowChanged(this, new OF_OrderFormGoodsRowChangeEvent(((OF_OrderFormGoodsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OF_OrderFormGoodsRowChanging != null)) {
                    this.OF_OrderFormGoodsRowChanging(this, new OF_OrderFormGoodsRowChangeEvent(((OF_OrderFormGoodsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OF_OrderFormGoodsRowDeleted != null)) {
                    this.OF_OrderFormGoodsRowDeleted(this, new OF_OrderFormGoodsRowChangeEvent(((OF_OrderFormGoodsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OF_OrderFormGoodsRowDeleting != null)) {
                    this.OF_OrderFormGoodsRowDeleting(this, new OF_OrderFormGoodsRowChangeEvent(((OF_OrderFormGoodsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOF_OrderFormGoodsRow(OF_OrderFormGoodsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OF_OrderFormGoodsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OF_OrderFormInfoDataTable : global::System.Data.TypedTableBase<OF_OrderFormInfoRow> {
            
            private global::System.Data.DataColumn columnOrderFormNumber;
            
            private global::System.Data.DataColumn columnProvider;
            
            private global::System.Data.DataColumn columnBuyer;
            
            private global::System.Data.DataColumn columnProviderLinkMan;
            
            private global::System.Data.DataColumn columnProviderLinkMode;
            
            private global::System.Data.DataColumn columnRemark;
            
            private global::System.Data.DataColumn columnCreateDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderFormInfoDataTable() {
                this.TableName = "OF_OrderFormInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_OrderFormInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OF_OrderFormInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderFormNumberColumn {
                get {
                    return this.columnOrderFormNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProviderColumn {
                get {
                    return this.columnProvider;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyerColumn {
                get {
                    return this.columnBuyer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProviderLinkManColumn {
                get {
                    return this.columnProviderLinkMan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProviderLinkModeColumn {
                get {
                    return this.columnProviderLinkMode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateDateColumn {
                get {
                    return this.columnCreateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderFormInfoRow this[int index] {
                get {
                    return ((OF_OrderFormInfoRow)(this.Rows[index]));
                }
            }
            
            public event OF_OrderFormInfoRowChangeEventHandler OF_OrderFormInfoRowChanging;
            
            public event OF_OrderFormInfoRowChangeEventHandler OF_OrderFormInfoRowChanged;
            
            public event OF_OrderFormInfoRowChangeEventHandler OF_OrderFormInfoRowDeleting;
            
            public event OF_OrderFormInfoRowChangeEventHandler OF_OrderFormInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOF_OrderFormInfoRow(OF_OrderFormInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderFormInfoRow AddOF_OrderFormInfoRow(string OrderFormNumber, string Provider, string Buyer, string ProviderLinkMan, string ProviderLinkMode, string Remark, System.DateTime CreateDate) {
                OF_OrderFormInfoRow rowOF_OrderFormInfoRow = ((OF_OrderFormInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        OrderFormNumber,
                        Provider,
                        Buyer,
                        ProviderLinkMan,
                        ProviderLinkMode,
                        Remark,
                        CreateDate};
                rowOF_OrderFormInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOF_OrderFormInfoRow);
                return rowOF_OrderFormInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderFormInfoRow FindByOrderFormNumber(string OrderFormNumber) {
                return ((OF_OrderFormInfoRow)(this.Rows.Find(new object[] {
                            OrderFormNumber})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OF_OrderFormInfoDataTable cln = ((OF_OrderFormInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OF_OrderFormInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOrderFormNumber = base.Columns["OrderFormNumber"];
                this.columnProvider = base.Columns["Provider"];
                this.columnBuyer = base.Columns["Buyer"];
                this.columnProviderLinkMan = base.Columns["ProviderLinkMan"];
                this.columnProviderLinkMode = base.Columns["ProviderLinkMode"];
                this.columnRemark = base.Columns["Remark"];
                this.columnCreateDate = base.Columns["CreateDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOrderFormNumber = new global::System.Data.DataColumn("OrderFormNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderFormNumber);
                this.columnProvider = new global::System.Data.DataColumn("Provider", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProvider);
                this.columnBuyer = new global::System.Data.DataColumn("Buyer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyer);
                this.columnProviderLinkMan = new global::System.Data.DataColumn("ProviderLinkMan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProviderLinkMan);
                this.columnProviderLinkMode = new global::System.Data.DataColumn("ProviderLinkMode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProviderLinkMode);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columnCreateDate = new global::System.Data.DataColumn("CreateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnOrderFormNumber}, true));
                this.columnOrderFormNumber.AllowDBNull = false;
                this.columnOrderFormNumber.Unique = true;
                this.columnOrderFormNumber.MaxLength = 50;
                this.columnProvider.MaxLength = 50;
                this.columnBuyer.MaxLength = 50;
                this.columnProviderLinkMan.MaxLength = 50;
                this.columnProviderLinkMode.MaxLength = 50;
                this.columnRemark.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderFormInfoRow NewOF_OrderFormInfoRow() {
                return ((OF_OrderFormInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OF_OrderFormInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OF_OrderFormInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OF_OrderFormInfoRowChanged != null)) {
                    this.OF_OrderFormInfoRowChanged(this, new OF_OrderFormInfoRowChangeEvent(((OF_OrderFormInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OF_OrderFormInfoRowChanging != null)) {
                    this.OF_OrderFormInfoRowChanging(this, new OF_OrderFormInfoRowChangeEvent(((OF_OrderFormInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OF_OrderFormInfoRowDeleted != null)) {
                    this.OF_OrderFormInfoRowDeleted(this, new OF_OrderFormInfoRowChangeEvent(((OF_OrderFormInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OF_OrderFormInfoRowDeleting != null)) {
                    this.OF_OrderFormInfoRowDeleting(this, new OF_OrderFormInfoRowChangeEvent(((OF_OrderFormInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOF_OrderFormInfoRow(OF_OrderFormInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OF_OrderFormInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class S_AfterServiceDataTable : global::System.Data.TypedTableBase<S_AfterServiceRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnServiceID;
            
            private global::System.Data.DataColumn columnMessageSource;
            
            private global::System.Data.DataColumn columnServerType;
            
            private global::System.Data.DataColumn columnContentType;
            
            private global::System.Data.DataColumn columnAcceptName;
            
            private global::System.Data.DataColumn columnAcceptTime;
            
            private global::System.Data.DataColumn columnSiteName;
            
            private global::System.Data.DataColumn columnLinkTel;
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnUserTel;
            
            private global::System.Data.DataColumn columnUserAddress;
            
            private global::System.Data.DataColumn columnCarModel;
            
            private global::System.Data.DataColumn columnCVTCode;
            
            private global::System.Data.DataColumn columnCVTID;
            
            private global::System.Data.DataColumn columnChassisNum;
            
            private global::System.Data.DataColumn columnBugAddress;
            
            private global::System.Data.DataColumn columnBuyCarTime;
            
            private global::System.Data.DataColumn columnRunMileage;
            
            private global::System.Data.DataColumn columnUseProperty;
            
            private global::System.Data.DataColumn columnUserAttitude;
            
            private global::System.Data.DataColumn columnBugDescribe;
            
            private global::System.Data.DataColumn columnServiceIdea;
            
            private global::System.Data.DataColumn columnProcessMode;
            
            private global::System.Data.DataColumn columnProcessName;
            
            private global::System.Data.DataColumn columnProcessTime;
            
            private global::System.Data.DataColumn columnDiagnoseSituation;
            
            private global::System.Data.DataColumn columnSolution;
            
            private global::System.Data.DataColumn columnProcessResult;
            
            private global::System.Data.DataColumn columnCheckName;
            
            private global::System.Data.DataColumn columnCheckTime;
            
            private global::System.Data.DataColumn columnRepairQuality;
            
            private global::System.Data.DataColumn columnServiceAttitude;
            
            private global::System.Data.DataColumn columnIsCharge;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnFailureResults;
            
            private global::System.Data.DataColumn columnReturnName;
            
            private global::System.Data.DataColumn columnReturnTime;
            
            private global::System.Data.DataColumn columnFKBillID;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnPY;
            
            private global::System.Data.DataColumn columnWB;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_AfterServiceDataTable() {
                this.TableName = "S_AfterService";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal S_AfterServiceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected S_AfterServiceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessageSourceColumn {
                get {
                    return this.columnMessageSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServerTypeColumn {
                get {
                    return this.columnServerType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContentTypeColumn {
                get {
                    return this.columnContentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcceptNameColumn {
                get {
                    return this.columnAcceptName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcceptTimeColumn {
                get {
                    return this.columnAcceptTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteNameColumn {
                get {
                    return this.columnSiteName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkTelColumn {
                get {
                    return this.columnLinkTel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserTelColumn {
                get {
                    return this.columnUserTel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserAddressColumn {
                get {
                    return this.columnUserAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CarModelColumn {
                get {
                    return this.columnCarModel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CVTCodeColumn {
                get {
                    return this.columnCVTCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CVTIDColumn {
                get {
                    return this.columnCVTID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChassisNumColumn {
                get {
                    return this.columnChassisNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BugAddressColumn {
                get {
                    return this.columnBugAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyCarTimeColumn {
                get {
                    return this.columnBuyCarTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunMileageColumn {
                get {
                    return this.columnRunMileage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsePropertyColumn {
                get {
                    return this.columnUseProperty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserAttitudeColumn {
                get {
                    return this.columnUserAttitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BugDescribeColumn {
                get {
                    return this.columnBugDescribe;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIdeaColumn {
                get {
                    return this.columnServiceIdea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessModeColumn {
                get {
                    return this.columnProcessMode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessNameColumn {
                get {
                    return this.columnProcessName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessTimeColumn {
                get {
                    return this.columnProcessTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiagnoseSituationColumn {
                get {
                    return this.columnDiagnoseSituation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SolutionColumn {
                get {
                    return this.columnSolution;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessResultColumn {
                get {
                    return this.columnProcessResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckNameColumn {
                get {
                    return this.columnCheckName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckTimeColumn {
                get {
                    return this.columnCheckTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RepairQualityColumn {
                get {
                    return this.columnRepairQuality;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceAttitudeColumn {
                get {
                    return this.columnServiceAttitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsChargeColumn {
                get {
                    return this.columnIsCharge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FailureResultsColumn {
                get {
                    return this.columnFailureResults;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReturnNameColumn {
                get {
                    return this.columnReturnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReturnTimeColumn {
                get {
                    return this.columnReturnTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FKBillIDColumn {
                get {
                    return this.columnFKBillID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PYColumn {
                get {
                    return this.columnPY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WBColumn {
                get {
                    return this.columnWB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_AfterServiceRow this[int index] {
                get {
                    return ((S_AfterServiceRow)(this.Rows[index]));
                }
            }
            
            public event S_AfterServiceRowChangeEventHandler S_AfterServiceRowChanging;
            
            public event S_AfterServiceRowChangeEventHandler S_AfterServiceRowChanged;
            
            public event S_AfterServiceRowChangeEventHandler S_AfterServiceRowDeleting;
            
            public event S_AfterServiceRowChangeEventHandler S_AfterServiceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddS_AfterServiceRow(S_AfterServiceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_AfterServiceRow AddS_AfterServiceRow(
                        string ServiceID, 
                        string MessageSource, 
                        string ServerType, 
                        string ContentType, 
                        string AcceptName, 
                        System.DateTime AcceptTime, 
                        string SiteName, 
                        string LinkTel, 
                        string UserName, 
                        string UserTel, 
                        string UserAddress, 
                        string CarModel, 
                        string CVTCode, 
                        string CVTID, 
                        string ChassisNum, 
                        string BugAddress, 
                        string BuyCarTime, 
                        string RunMileage, 
                        string UseProperty, 
                        string UserAttitude, 
                        string BugDescribe, 
                        string ServiceIdea, 
                        string ProcessMode, 
                        string ProcessName, 
                        System.DateTime ProcessTime, 
                        string DiagnoseSituation, 
                        string Solution, 
                        string ProcessResult, 
                        string CheckName, 
                        System.DateTime CheckTime, 
                        string RepairQuality, 
                        string ServiceAttitude, 
                        string IsCharge, 
                        decimal Amount, 
                        string FailureResults, 
                        string ReturnName, 
                        System.DateTime ReturnTime, 
                        string FKBillID, 
                        string Status, 
                        string PY, 
                        string WB) {
                S_AfterServiceRow rowS_AfterServiceRow = ((S_AfterServiceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ServiceID,
                        MessageSource,
                        ServerType,
                        ContentType,
                        AcceptName,
                        AcceptTime,
                        SiteName,
                        LinkTel,
                        UserName,
                        UserTel,
                        UserAddress,
                        CarModel,
                        CVTCode,
                        CVTID,
                        ChassisNum,
                        BugAddress,
                        BuyCarTime,
                        RunMileage,
                        UseProperty,
                        UserAttitude,
                        BugDescribe,
                        ServiceIdea,
                        ProcessMode,
                        ProcessName,
                        ProcessTime,
                        DiagnoseSituation,
                        Solution,
                        ProcessResult,
                        CheckName,
                        CheckTime,
                        RepairQuality,
                        ServiceAttitude,
                        IsCharge,
                        Amount,
                        FailureResults,
                        ReturnName,
                        ReturnTime,
                        FKBillID,
                        Status,
                        PY,
                        WB};
                rowS_AfterServiceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowS_AfterServiceRow);
                return rowS_AfterServiceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_AfterServiceRow FindByID(int ID) {
                return ((S_AfterServiceRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                S_AfterServiceDataTable cln = ((S_AfterServiceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new S_AfterServiceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnServiceID = base.Columns["ServiceID"];
                this.columnMessageSource = base.Columns["MessageSource"];
                this.columnServerType = base.Columns["ServerType"];
                this.columnContentType = base.Columns["ContentType"];
                this.columnAcceptName = base.Columns["AcceptName"];
                this.columnAcceptTime = base.Columns["AcceptTime"];
                this.columnSiteName = base.Columns["SiteName"];
                this.columnLinkTel = base.Columns["LinkTel"];
                this.columnUserName = base.Columns["UserName"];
                this.columnUserTel = base.Columns["UserTel"];
                this.columnUserAddress = base.Columns["UserAddress"];
                this.columnCarModel = base.Columns["CarModel"];
                this.columnCVTCode = base.Columns["CVTCode"];
                this.columnCVTID = base.Columns["CVTID"];
                this.columnChassisNum = base.Columns["ChassisNum"];
                this.columnBugAddress = base.Columns["BugAddress"];
                this.columnBuyCarTime = base.Columns["BuyCarTime"];
                this.columnRunMileage = base.Columns["RunMileage"];
                this.columnUseProperty = base.Columns["UseProperty"];
                this.columnUserAttitude = base.Columns["UserAttitude"];
                this.columnBugDescribe = base.Columns["BugDescribe"];
                this.columnServiceIdea = base.Columns["ServiceIdea"];
                this.columnProcessMode = base.Columns["ProcessMode"];
                this.columnProcessName = base.Columns["ProcessName"];
                this.columnProcessTime = base.Columns["ProcessTime"];
                this.columnDiagnoseSituation = base.Columns["DiagnoseSituation"];
                this.columnSolution = base.Columns["Solution"];
                this.columnProcessResult = base.Columns["ProcessResult"];
                this.columnCheckName = base.Columns["CheckName"];
                this.columnCheckTime = base.Columns["CheckTime"];
                this.columnRepairQuality = base.Columns["RepairQuality"];
                this.columnServiceAttitude = base.Columns["ServiceAttitude"];
                this.columnIsCharge = base.Columns["IsCharge"];
                this.columnAmount = base.Columns["Amount"];
                this.columnFailureResults = base.Columns["FailureResults"];
                this.columnReturnName = base.Columns["ReturnName"];
                this.columnReturnTime = base.Columns["ReturnTime"];
                this.columnFKBillID = base.Columns["FKBillID"];
                this.columnStatus = base.Columns["Status"];
                this.columnPY = base.Columns["PY"];
                this.columnWB = base.Columns["WB"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnServiceID = new global::System.Data.DataColumn("ServiceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceID);
                this.columnMessageSource = new global::System.Data.DataColumn("MessageSource", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessageSource);
                this.columnServerType = new global::System.Data.DataColumn("ServerType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServerType);
                this.columnContentType = new global::System.Data.DataColumn("ContentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContentType);
                this.columnAcceptName = new global::System.Data.DataColumn("AcceptName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcceptName);
                this.columnAcceptTime = new global::System.Data.DataColumn("AcceptTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcceptTime);
                this.columnSiteName = new global::System.Data.DataColumn("SiteName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteName);
                this.columnLinkTel = new global::System.Data.DataColumn("LinkTel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkTel);
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnUserTel = new global::System.Data.DataColumn("UserTel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserTel);
                this.columnUserAddress = new global::System.Data.DataColumn("UserAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserAddress);
                this.columnCarModel = new global::System.Data.DataColumn("CarModel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCarModel);
                this.columnCVTCode = new global::System.Data.DataColumn("CVTCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCVTCode);
                this.columnCVTID = new global::System.Data.DataColumn("CVTID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCVTID);
                this.columnChassisNum = new global::System.Data.DataColumn("ChassisNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChassisNum);
                this.columnBugAddress = new global::System.Data.DataColumn("BugAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBugAddress);
                this.columnBuyCarTime = new global::System.Data.DataColumn("BuyCarTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyCarTime);
                this.columnRunMileage = new global::System.Data.DataColumn("RunMileage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunMileage);
                this.columnUseProperty = new global::System.Data.DataColumn("UseProperty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseProperty);
                this.columnUserAttitude = new global::System.Data.DataColumn("UserAttitude", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserAttitude);
                this.columnBugDescribe = new global::System.Data.DataColumn("BugDescribe", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBugDescribe);
                this.columnServiceIdea = new global::System.Data.DataColumn("ServiceIdea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceIdea);
                this.columnProcessMode = new global::System.Data.DataColumn("ProcessMode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessMode);
                this.columnProcessName = new global::System.Data.DataColumn("ProcessName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessName);
                this.columnProcessTime = new global::System.Data.DataColumn("ProcessTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessTime);
                this.columnDiagnoseSituation = new global::System.Data.DataColumn("DiagnoseSituation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiagnoseSituation);
                this.columnSolution = new global::System.Data.DataColumn("Solution", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSolution);
                this.columnProcessResult = new global::System.Data.DataColumn("ProcessResult", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessResult);
                this.columnCheckName = new global::System.Data.DataColumn("CheckName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckName);
                this.columnCheckTime = new global::System.Data.DataColumn("CheckTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckTime);
                this.columnRepairQuality = new global::System.Data.DataColumn("RepairQuality", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepairQuality);
                this.columnServiceAttitude = new global::System.Data.DataColumn("ServiceAttitude", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceAttitude);
                this.columnIsCharge = new global::System.Data.DataColumn("IsCharge", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCharge);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnFailureResults = new global::System.Data.DataColumn("FailureResults", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFailureResults);
                this.columnReturnName = new global::System.Data.DataColumn("ReturnName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReturnName);
                this.columnReturnTime = new global::System.Data.DataColumn("ReturnTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReturnTime);
                this.columnFKBillID = new global::System.Data.DataColumn("FKBillID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFKBillID);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnPY = new global::System.Data.DataColumn("PY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPY);
                this.columnWB = new global::System.Data.DataColumn("WB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWB);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnServiceID.AllowDBNull = false;
                this.columnServiceID.MaxLength = 50;
                this.columnMessageSource.AllowDBNull = false;
                this.columnMessageSource.MaxLength = 50;
                this.columnServerType.AllowDBNull = false;
                this.columnServerType.MaxLength = 50;
                this.columnContentType.AllowDBNull = false;
                this.columnContentType.MaxLength = 50;
                this.columnAcceptName.MaxLength = 50;
                this.columnSiteName.MaxLength = 50;
                this.columnLinkTel.MaxLength = 50;
                this.columnUserName.MaxLength = 50;
                this.columnUserTel.MaxLength = 50;
                this.columnUserAddress.MaxLength = 50;
                this.columnCarModel.MaxLength = 50;
                this.columnCVTCode.MaxLength = 50;
                this.columnCVTID.MaxLength = 50;
                this.columnChassisNum.MaxLength = 50;
                this.columnBugAddress.MaxLength = 50;
                this.columnBuyCarTime.MaxLength = 50;
                this.columnRunMileage.MaxLength = 50;
                this.columnUseProperty.MaxLength = 50;
                this.columnUserAttitude.MaxLength = 50;
                this.columnBugDescribe.MaxLength = 1000;
                this.columnServiceIdea.MaxLength = 200;
                this.columnProcessMode.MaxLength = 50;
                this.columnProcessName.MaxLength = 50;
                this.columnDiagnoseSituation.MaxLength = 1000;
                this.columnSolution.MaxLength = 1000;
                this.columnProcessResult.MaxLength = 1000;
                this.columnCheckName.MaxLength = 50;
                this.columnRepairQuality.MaxLength = 50;
                this.columnServiceAttitude.MaxLength = 50;
                this.columnIsCharge.MaxLength = 2;
                this.columnFailureResults.MaxLength = 200;
                this.columnReturnName.MaxLength = 50;
                this.columnFKBillID.MaxLength = 50;
                this.columnStatus.AllowDBNull = false;
                this.columnStatus.MaxLength = 50;
                this.columnPY.MaxLength = 50;
                this.columnWB.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_AfterServiceRow NewS_AfterServiceRow() {
                return ((S_AfterServiceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new S_AfterServiceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(S_AfterServiceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.S_AfterServiceRowChanged != null)) {
                    this.S_AfterServiceRowChanged(this, new S_AfterServiceRowChangeEvent(((S_AfterServiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.S_AfterServiceRowChanging != null)) {
                    this.S_AfterServiceRowChanging(this, new S_AfterServiceRowChangeEvent(((S_AfterServiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.S_AfterServiceRowDeleted != null)) {
                    this.S_AfterServiceRowDeleted(this, new S_AfterServiceRowChangeEvent(((S_AfterServiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.S_AfterServiceRowDeleting != null)) {
                    this.S_AfterServiceRowDeleting(this, new S_AfterServiceRowChangeEvent(((S_AfterServiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveS_AfterServiceRow(S_AfterServiceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "S_AfterServiceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class S_CommtionDataTable : global::System.Data.TypedTableBase<S_CommtionRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnRemarl;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_CommtionDataTable() {
                this.TableName = "S_Commtion";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal S_CommtionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected S_CommtionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarlColumn {
                get {
                    return this.columnRemarl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_CommtionRow this[int index] {
                get {
                    return ((S_CommtionRow)(this.Rows[index]));
                }
            }
            
            public event S_CommtionRowChangeEventHandler S_CommtionRowChanging;
            
            public event S_CommtionRowChangeEventHandler S_CommtionRowChanged;
            
            public event S_CommtionRowChangeEventHandler S_CommtionRowDeleting;
            
            public event S_CommtionRowChangeEventHandler S_CommtionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddS_CommtionRow(S_CommtionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_CommtionRow AddS_CommtionRow(string Type, string Remarl) {
                S_CommtionRow rowS_CommtionRow = ((S_CommtionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Type,
                        Remarl};
                rowS_CommtionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowS_CommtionRow);
                return rowS_CommtionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_CommtionRow FindByID(int ID) {
                return ((S_CommtionRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                S_CommtionDataTable cln = ((S_CommtionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new S_CommtionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnType = base.Columns["Type"];
                this.columnRemarl = base.Columns["Remarl"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnRemarl = new global::System.Data.DataColumn("Remarl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemarl);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnType.AllowDBNull = false;
                this.columnType.MaxLength = 50;
                this.columnRemarl.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_CommtionRow NewS_CommtionRow() {
                return ((S_CommtionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new S_CommtionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(S_CommtionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.S_CommtionRowChanged != null)) {
                    this.S_CommtionRowChanged(this, new S_CommtionRowChangeEvent(((S_CommtionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.S_CommtionRowChanging != null)) {
                    this.S_CommtionRowChanging(this, new S_CommtionRowChangeEvent(((S_CommtionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.S_CommtionRowDeleted != null)) {
                    this.S_CommtionRowDeleted(this, new S_CommtionRowChangeEvent(((S_CommtionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.S_CommtionRowDeleting != null)) {
                    this.S_CommtionRowDeleting(this, new S_CommtionRowChangeEvent(((S_CommtionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveS_CommtionRow(S_CommtionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "S_CommtionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class S_MessageSourceDataTable : global::System.Data.TypedTableBase<S_MessageSourceRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnMessageCode;
            
            private global::System.Data.DataColumn columnMessageName;
            
            private global::System.Data.DataColumn columnRemark;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_MessageSourceDataTable() {
                this.TableName = "S_MessageSource";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal S_MessageSourceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected S_MessageSourceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessageCodeColumn {
                get {
                    return this.columnMessageCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessageNameColumn {
                get {
                    return this.columnMessageName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_MessageSourceRow this[int index] {
                get {
                    return ((S_MessageSourceRow)(this.Rows[index]));
                }
            }
            
            public event S_MessageSourceRowChangeEventHandler S_MessageSourceRowChanging;
            
            public event S_MessageSourceRowChangeEventHandler S_MessageSourceRowChanged;
            
            public event S_MessageSourceRowChangeEventHandler S_MessageSourceRowDeleting;
            
            public event S_MessageSourceRowChangeEventHandler S_MessageSourceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddS_MessageSourceRow(S_MessageSourceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_MessageSourceRow AddS_MessageSourceRow(string MessageCode, string MessageName, string Remark) {
                S_MessageSourceRow rowS_MessageSourceRow = ((S_MessageSourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MessageCode,
                        MessageName,
                        Remark};
                rowS_MessageSourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowS_MessageSourceRow);
                return rowS_MessageSourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_MessageSourceRow FindByID(int ID) {
                return ((S_MessageSourceRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                S_MessageSourceDataTable cln = ((S_MessageSourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new S_MessageSourceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnMessageCode = base.Columns["MessageCode"];
                this.columnMessageName = base.Columns["MessageName"];
                this.columnRemark = base.Columns["Remark"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnMessageCode = new global::System.Data.DataColumn("MessageCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessageCode);
                this.columnMessageName = new global::System.Data.DataColumn("MessageName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessageName);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnMessageCode.AllowDBNull = false;
                this.columnMessageCode.MaxLength = 50;
                this.columnMessageName.AllowDBNull = false;
                this.columnMessageName.MaxLength = 50;
                this.columnRemark.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_MessageSourceRow NewS_MessageSourceRow() {
                return ((S_MessageSourceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new S_MessageSourceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(S_MessageSourceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.S_MessageSourceRowChanged != null)) {
                    this.S_MessageSourceRowChanged(this, new S_MessageSourceRowChangeEvent(((S_MessageSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.S_MessageSourceRowChanging != null)) {
                    this.S_MessageSourceRowChanging(this, new S_MessageSourceRowChangeEvent(((S_MessageSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.S_MessageSourceRowDeleted != null)) {
                    this.S_MessageSourceRowDeleted(this, new S_MessageSourceRowChangeEvent(((S_MessageSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.S_MessageSourceRowDeleting != null)) {
                    this.S_MessageSourceRowDeleting(this, new S_MessageSourceRowChangeEvent(((S_MessageSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveS_MessageSourceRow(S_MessageSourceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "S_MessageSourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class S_ReplaceAccessoryDataTable : global::System.Data.TypedTableBase<S_ReplaceAccessoryRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnServiceID;
            
            private global::System.Data.DataColumn columnOldGoodsName;
            
            private global::System.Data.DataColumn columnOldGoodsCode;
            
            private global::System.Data.DataColumn columnOldSpec;
            
            private global::System.Data.DataColumn columnOldCvtID;
            
            private global::System.Data.DataColumn columnBackTime;
            
            private global::System.Data.DataColumn columnNewGoodsName;
            
            private global::System.Data.DataColumn columnNewGoodsCode;
            
            private global::System.Data.DataColumn columnNewSpec;
            
            private global::System.Data.DataColumn columnNewCvtID;
            
            private global::System.Data.DataColumn columnCount;
            
            private global::System.Data.DataColumn columnUnit;
            
            private global::System.Data.DataColumn columnRemark;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_ReplaceAccessoryDataTable() {
                this.TableName = "S_ReplaceAccessory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal S_ReplaceAccessoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected S_ReplaceAccessoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OldGoodsNameColumn {
                get {
                    return this.columnOldGoodsName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OldGoodsCodeColumn {
                get {
                    return this.columnOldGoodsCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OldSpecColumn {
                get {
                    return this.columnOldSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OldCvtIDColumn {
                get {
                    return this.columnOldCvtID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackTimeColumn {
                get {
                    return this.columnBackTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewGoodsNameColumn {
                get {
                    return this.columnNewGoodsName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewGoodsCodeColumn {
                get {
                    return this.columnNewGoodsCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewSpecColumn {
                get {
                    return this.columnNewSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewCvtIDColumn {
                get {
                    return this.columnNewCvtID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountColumn {
                get {
                    return this.columnCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitColumn {
                get {
                    return this.columnUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_ReplaceAccessoryRow this[int index] {
                get {
                    return ((S_ReplaceAccessoryRow)(this.Rows[index]));
                }
            }
            
            public event S_ReplaceAccessoryRowChangeEventHandler S_ReplaceAccessoryRowChanging;
            
            public event S_ReplaceAccessoryRowChangeEventHandler S_ReplaceAccessoryRowChanged;
            
            public event S_ReplaceAccessoryRowChangeEventHandler S_ReplaceAccessoryRowDeleting;
            
            public event S_ReplaceAccessoryRowChangeEventHandler S_ReplaceAccessoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddS_ReplaceAccessoryRow(S_ReplaceAccessoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_ReplaceAccessoryRow AddS_ReplaceAccessoryRow(string ServiceID, string OldGoodsName, string OldGoodsCode, string OldSpec, string OldCvtID, System.DateTime BackTime, string NewGoodsName, string NewGoodsCode, string NewSpec, string NewCvtID, int Count, string Unit, string Remark) {
                S_ReplaceAccessoryRow rowS_ReplaceAccessoryRow = ((S_ReplaceAccessoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ServiceID,
                        OldGoodsName,
                        OldGoodsCode,
                        OldSpec,
                        OldCvtID,
                        BackTime,
                        NewGoodsName,
                        NewGoodsCode,
                        NewSpec,
                        NewCvtID,
                        Count,
                        Unit,
                        Remark};
                rowS_ReplaceAccessoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowS_ReplaceAccessoryRow);
                return rowS_ReplaceAccessoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_ReplaceAccessoryRow FindByID(int ID) {
                return ((S_ReplaceAccessoryRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                S_ReplaceAccessoryDataTable cln = ((S_ReplaceAccessoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new S_ReplaceAccessoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnServiceID = base.Columns["ServiceID"];
                this.columnOldGoodsName = base.Columns["OldGoodsName"];
                this.columnOldGoodsCode = base.Columns["OldGoodsCode"];
                this.columnOldSpec = base.Columns["OldSpec"];
                this.columnOldCvtID = base.Columns["OldCvtID"];
                this.columnBackTime = base.Columns["BackTime"];
                this.columnNewGoodsName = base.Columns["NewGoodsName"];
                this.columnNewGoodsCode = base.Columns["NewGoodsCode"];
                this.columnNewSpec = base.Columns["NewSpec"];
                this.columnNewCvtID = base.Columns["NewCvtID"];
                this.columnCount = base.Columns["Count"];
                this.columnUnit = base.Columns["Unit"];
                this.columnRemark = base.Columns["Remark"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnServiceID = new global::System.Data.DataColumn("ServiceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceID);
                this.columnOldGoodsName = new global::System.Data.DataColumn("OldGoodsName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOldGoodsName);
                this.columnOldGoodsCode = new global::System.Data.DataColumn("OldGoodsCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOldGoodsCode);
                this.columnOldSpec = new global::System.Data.DataColumn("OldSpec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOldSpec);
                this.columnOldCvtID = new global::System.Data.DataColumn("OldCvtID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOldCvtID);
                this.columnBackTime = new global::System.Data.DataColumn("BackTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackTime);
                this.columnNewGoodsName = new global::System.Data.DataColumn("NewGoodsName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewGoodsName);
                this.columnNewGoodsCode = new global::System.Data.DataColumn("NewGoodsCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewGoodsCode);
                this.columnNewSpec = new global::System.Data.DataColumn("NewSpec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewSpec);
                this.columnNewCvtID = new global::System.Data.DataColumn("NewCvtID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewCvtID);
                this.columnCount = new global::System.Data.DataColumn("Count", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCount);
                this.columnUnit = new global::System.Data.DataColumn("Unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnServiceID.AllowDBNull = false;
                this.columnServiceID.MaxLength = 50;
                this.columnOldGoodsName.AllowDBNull = false;
                this.columnOldGoodsName.MaxLength = 50;
                this.columnOldGoodsCode.AllowDBNull = false;
                this.columnOldGoodsCode.MaxLength = 50;
                this.columnOldSpec.MaxLength = 50;
                this.columnOldCvtID.MaxLength = 50;
                this.columnNewGoodsName.MaxLength = 50;
                this.columnNewGoodsCode.MaxLength = 50;
                this.columnNewSpec.MaxLength = 50;
                this.columnNewCvtID.MaxLength = 50;
                this.columnUnit.MaxLength = 50;
                this.columnRemark.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_ReplaceAccessoryRow NewS_ReplaceAccessoryRow() {
                return ((S_ReplaceAccessoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new S_ReplaceAccessoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(S_ReplaceAccessoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.S_ReplaceAccessoryRowChanged != null)) {
                    this.S_ReplaceAccessoryRowChanged(this, new S_ReplaceAccessoryRowChangeEvent(((S_ReplaceAccessoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.S_ReplaceAccessoryRowChanging != null)) {
                    this.S_ReplaceAccessoryRowChanging(this, new S_ReplaceAccessoryRowChangeEvent(((S_ReplaceAccessoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.S_ReplaceAccessoryRowDeleted != null)) {
                    this.S_ReplaceAccessoryRowDeleted(this, new S_ReplaceAccessoryRowChangeEvent(((S_ReplaceAccessoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.S_ReplaceAccessoryRowDeleting != null)) {
                    this.S_ReplaceAccessoryRowDeleting(this, new S_ReplaceAccessoryRowChangeEvent(((S_ReplaceAccessoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveS_ReplaceAccessoryRow(S_ReplaceAccessoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "S_ReplaceAccessoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class S_ServiceFeedBackDataTable : global::System.Data.TypedTableBase<S_ServiceFeedBackRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnFK_Bill_ID;
            
            private global::System.Data.DataColumn columnServiceID;
            
            private global::System.Data.DataColumn columnMessageSource;
            
            private global::System.Data.DataColumn columnSiteName;
            
            private global::System.Data.DataColumn columnCarModel;
            
            private global::System.Data.DataColumn columnCVTCode;
            
            private global::System.Data.DataColumn columnCVTID;
            
            private global::System.Data.DataColumn columnChassisNum;
            
            private global::System.Data.DataColumn columnTCUCode;
            
            private global::System.Data.DataColumn columnNewSoftware;
            
            private global::System.Data.DataColumn columnBugCode;
            
            private global::System.Data.DataColumn columnCVTCondition;
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnLinkman;
            
            private global::System.Data.DataColumn columnLinkTel;
            
            private global::System.Data.DataColumn columnBugNumber;
            
            private global::System.Data.DataColumn columnBatchNumber;
            
            private global::System.Data.DataColumn columnOutFactoryTime;
            
            private global::System.Data.DataColumn columnBuyCarTime;
            
            private global::System.Data.DataColumn columnRunMileage;
            
            private global::System.Data.DataColumn columnProcessName;
            
            private global::System.Data.DataColumn columnProcessTime;
            
            private global::System.Data.DataColumn columnProcessMode;
            
            private global::System.Data.DataColumn columnDiagnoseSituation;
            
            private global::System.Data.DataColumn columnSolution;
            
            private global::System.Data.DataColumn columnIsBack;
            
            private global::System.Data.DataColumn columnYXChargeSuggestion;
            
            private global::System.Data.DataColumn columnZGChargeSuggestion;
            
            private global::System.Data.DataColumn columnDutyDept;
            
            private global::System.Data.DataColumn columnReplyTime;
            
            private global::System.Data.DataColumn columnAppearCount;
            
            private global::System.Data.DataColumn columnDutyDeptCharge;
            
            private global::System.Data.DataColumn columnDutyPerson;
            
            private global::System.Data.DataColumn columnFinishClaim;
            
            private global::System.Data.DataColumn columnStockSuggestion;
            
            private global::System.Data.DataColumn columnTemporary;
            
            private global::System.Data.DataColumn columnAnalyse;
            
            private global::System.Data.DataColumn columnforeverImplement;
            
            private global::System.Data.DataColumn columnIsFMEAfile;
            
            private global::System.Data.DataColumn columnIsOpen;
            
            private global::System.Data.DataColumn columnZGCheckName;
            
            private global::System.Data.DataColumn columnIsClose;
            
            private global::System.Data.DataColumn columnPracticable;
            
            private global::System.Data.DataColumn columnStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_ServiceFeedBackDataTable() {
                this.TableName = "S_ServiceFeedBack";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal S_ServiceFeedBackDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected S_ServiceFeedBackDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FK_Bill_IDColumn {
                get {
                    return this.columnFK_Bill_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessageSourceColumn {
                get {
                    return this.columnMessageSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteNameColumn {
                get {
                    return this.columnSiteName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CarModelColumn {
                get {
                    return this.columnCarModel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CVTCodeColumn {
                get {
                    return this.columnCVTCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CVTIDColumn {
                get {
                    return this.columnCVTID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChassisNumColumn {
                get {
                    return this.columnChassisNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TCUCodeColumn {
                get {
                    return this.columnTCUCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewSoftwareColumn {
                get {
                    return this.columnNewSoftware;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BugCodeColumn {
                get {
                    return this.columnBugCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CVTConditionColumn {
                get {
                    return this.columnCVTCondition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkmanColumn {
                get {
                    return this.columnLinkman;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkTelColumn {
                get {
                    return this.columnLinkTel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BugNumberColumn {
                get {
                    return this.columnBugNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BatchNumberColumn {
                get {
                    return this.columnBatchNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OutFactoryTimeColumn {
                get {
                    return this.columnOutFactoryTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyCarTimeColumn {
                get {
                    return this.columnBuyCarTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunMileageColumn {
                get {
                    return this.columnRunMileage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessNameColumn {
                get {
                    return this.columnProcessName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessTimeColumn {
                get {
                    return this.columnProcessTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessModeColumn {
                get {
                    return this.columnProcessMode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiagnoseSituationColumn {
                get {
                    return this.columnDiagnoseSituation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SolutionColumn {
                get {
                    return this.columnSolution;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsBackColumn {
                get {
                    return this.columnIsBack;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YXChargeSuggestionColumn {
                get {
                    return this.columnYXChargeSuggestion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZGChargeSuggestionColumn {
                get {
                    return this.columnZGChargeSuggestion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DutyDeptColumn {
                get {
                    return this.columnDutyDept;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReplyTimeColumn {
                get {
                    return this.columnReplyTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppearCountColumn {
                get {
                    return this.columnAppearCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DutyDeptChargeColumn {
                get {
                    return this.columnDutyDeptCharge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DutyPersonColumn {
                get {
                    return this.columnDutyPerson;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinishClaimColumn {
                get {
                    return this.columnFinishClaim;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockSuggestionColumn {
                get {
                    return this.columnStockSuggestion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemporaryColumn {
                get {
                    return this.columnTemporary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AnalyseColumn {
                get {
                    return this.columnAnalyse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn foreverImplementColumn {
                get {
                    return this.columnforeverImplement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsFMEAfileColumn {
                get {
                    return this.columnIsFMEAfile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOpenColumn {
                get {
                    return this.columnIsOpen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZGCheckNameColumn {
                get {
                    return this.columnZGCheckName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCloseColumn {
                get {
                    return this.columnIsClose;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PracticableColumn {
                get {
                    return this.columnPracticable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_ServiceFeedBackRow this[int index] {
                get {
                    return ((S_ServiceFeedBackRow)(this.Rows[index]));
                }
            }
            
            public event S_ServiceFeedBackRowChangeEventHandler S_ServiceFeedBackRowChanging;
            
            public event S_ServiceFeedBackRowChangeEventHandler S_ServiceFeedBackRowChanged;
            
            public event S_ServiceFeedBackRowChangeEventHandler S_ServiceFeedBackRowDeleting;
            
            public event S_ServiceFeedBackRowChangeEventHandler S_ServiceFeedBackRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddS_ServiceFeedBackRow(S_ServiceFeedBackRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_ServiceFeedBackRow AddS_ServiceFeedBackRow(
                        string FK_Bill_ID, 
                        string ServiceID, 
                        string MessageSource, 
                        string SiteName, 
                        string CarModel, 
                        string CVTCode, 
                        string CVTID, 
                        string ChassisNum, 
                        string TCUCode, 
                        string NewSoftware, 
                        string BugCode, 
                        string CVTCondition, 
                        string UserName, 
                        string Linkman, 
                        string LinkTel, 
                        string BugNumber, 
                        string BatchNumber, 
                        System.DateTime OutFactoryTime, 
                        System.DateTime BuyCarTime, 
                        string RunMileage, 
                        string ProcessName, 
                        System.DateTime ProcessTime, 
                        string ProcessMode, 
                        string DiagnoseSituation, 
                        string Solution, 
                        string IsBack, 
                        string YXChargeSuggestion, 
                        string ZGChargeSuggestion, 
                        string DutyDept, 
                        System.DateTime ReplyTime, 
                        int AppearCount, 
                        string DutyDeptCharge, 
                        string DutyPerson, 
                        string FinishClaim, 
                        string StockSuggestion, 
                        string Temporary, 
                        string Analyse, 
                        string foreverImplement, 
                        string IsFMEAfile, 
                        string IsOpen, 
                        string ZGCheckName, 
                        string IsClose, 
                        string Practicable, 
                        string Status) {
                S_ServiceFeedBackRow rowS_ServiceFeedBackRow = ((S_ServiceFeedBackRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        FK_Bill_ID,
                        ServiceID,
                        MessageSource,
                        SiteName,
                        CarModel,
                        CVTCode,
                        CVTID,
                        ChassisNum,
                        TCUCode,
                        NewSoftware,
                        BugCode,
                        CVTCondition,
                        UserName,
                        Linkman,
                        LinkTel,
                        BugNumber,
                        BatchNumber,
                        OutFactoryTime,
                        BuyCarTime,
                        RunMileage,
                        ProcessName,
                        ProcessTime,
                        ProcessMode,
                        DiagnoseSituation,
                        Solution,
                        IsBack,
                        YXChargeSuggestion,
                        ZGChargeSuggestion,
                        DutyDept,
                        ReplyTime,
                        AppearCount,
                        DutyDeptCharge,
                        DutyPerson,
                        FinishClaim,
                        StockSuggestion,
                        Temporary,
                        Analyse,
                        foreverImplement,
                        IsFMEAfile,
                        IsOpen,
                        ZGCheckName,
                        IsClose,
                        Practicable,
                        Status};
                rowS_ServiceFeedBackRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowS_ServiceFeedBackRow);
                return rowS_ServiceFeedBackRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_ServiceFeedBackRow FindByID(int ID) {
                return ((S_ServiceFeedBackRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                S_ServiceFeedBackDataTable cln = ((S_ServiceFeedBackDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new S_ServiceFeedBackDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnFK_Bill_ID = base.Columns["FK_Bill_ID"];
                this.columnServiceID = base.Columns["ServiceID"];
                this.columnMessageSource = base.Columns["MessageSource"];
                this.columnSiteName = base.Columns["SiteName"];
                this.columnCarModel = base.Columns["CarModel"];
                this.columnCVTCode = base.Columns["CVTCode"];
                this.columnCVTID = base.Columns["CVTID"];
                this.columnChassisNum = base.Columns["ChassisNum"];
                this.columnTCUCode = base.Columns["TCUCode"];
                this.columnNewSoftware = base.Columns["NewSoftware"];
                this.columnBugCode = base.Columns["BugCode"];
                this.columnCVTCondition = base.Columns["CVTCondition"];
                this.columnUserName = base.Columns["UserName"];
                this.columnLinkman = base.Columns["Linkman"];
                this.columnLinkTel = base.Columns["LinkTel"];
                this.columnBugNumber = base.Columns["BugNumber"];
                this.columnBatchNumber = base.Columns["BatchNumber"];
                this.columnOutFactoryTime = base.Columns["OutFactoryTime"];
                this.columnBuyCarTime = base.Columns["BuyCarTime"];
                this.columnRunMileage = base.Columns["RunMileage"];
                this.columnProcessName = base.Columns["ProcessName"];
                this.columnProcessTime = base.Columns["ProcessTime"];
                this.columnProcessMode = base.Columns["ProcessMode"];
                this.columnDiagnoseSituation = base.Columns["DiagnoseSituation"];
                this.columnSolution = base.Columns["Solution"];
                this.columnIsBack = base.Columns["IsBack"];
                this.columnYXChargeSuggestion = base.Columns["YXChargeSuggestion"];
                this.columnZGChargeSuggestion = base.Columns["ZGChargeSuggestion"];
                this.columnDutyDept = base.Columns["DutyDept"];
                this.columnReplyTime = base.Columns["ReplyTime"];
                this.columnAppearCount = base.Columns["AppearCount"];
                this.columnDutyDeptCharge = base.Columns["DutyDeptCharge"];
                this.columnDutyPerson = base.Columns["DutyPerson"];
                this.columnFinishClaim = base.Columns["FinishClaim"];
                this.columnStockSuggestion = base.Columns["StockSuggestion"];
                this.columnTemporary = base.Columns["Temporary"];
                this.columnAnalyse = base.Columns["Analyse"];
                this.columnforeverImplement = base.Columns["foreverImplement"];
                this.columnIsFMEAfile = base.Columns["IsFMEAfile"];
                this.columnIsOpen = base.Columns["IsOpen"];
                this.columnZGCheckName = base.Columns["ZGCheckName"];
                this.columnIsClose = base.Columns["IsClose"];
                this.columnPracticable = base.Columns["Practicable"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnFK_Bill_ID = new global::System.Data.DataColumn("FK_Bill_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFK_Bill_ID);
                this.columnServiceID = new global::System.Data.DataColumn("ServiceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceID);
                this.columnMessageSource = new global::System.Data.DataColumn("MessageSource", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessageSource);
                this.columnSiteName = new global::System.Data.DataColumn("SiteName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteName);
                this.columnCarModel = new global::System.Data.DataColumn("CarModel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCarModel);
                this.columnCVTCode = new global::System.Data.DataColumn("CVTCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCVTCode);
                this.columnCVTID = new global::System.Data.DataColumn("CVTID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCVTID);
                this.columnChassisNum = new global::System.Data.DataColumn("ChassisNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChassisNum);
                this.columnTCUCode = new global::System.Data.DataColumn("TCUCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTCUCode);
                this.columnNewSoftware = new global::System.Data.DataColumn("NewSoftware", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewSoftware);
                this.columnBugCode = new global::System.Data.DataColumn("BugCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBugCode);
                this.columnCVTCondition = new global::System.Data.DataColumn("CVTCondition", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCVTCondition);
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnLinkman = new global::System.Data.DataColumn("Linkman", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkman);
                this.columnLinkTel = new global::System.Data.DataColumn("LinkTel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkTel);
                this.columnBugNumber = new global::System.Data.DataColumn("BugNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBugNumber);
                this.columnBatchNumber = new global::System.Data.DataColumn("BatchNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBatchNumber);
                this.columnOutFactoryTime = new global::System.Data.DataColumn("OutFactoryTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutFactoryTime);
                this.columnBuyCarTime = new global::System.Data.DataColumn("BuyCarTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyCarTime);
                this.columnRunMileage = new global::System.Data.DataColumn("RunMileage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunMileage);
                this.columnProcessName = new global::System.Data.DataColumn("ProcessName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessName);
                this.columnProcessTime = new global::System.Data.DataColumn("ProcessTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessTime);
                this.columnProcessMode = new global::System.Data.DataColumn("ProcessMode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessMode);
                this.columnDiagnoseSituation = new global::System.Data.DataColumn("DiagnoseSituation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiagnoseSituation);
                this.columnSolution = new global::System.Data.DataColumn("Solution", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSolution);
                this.columnIsBack = new global::System.Data.DataColumn("IsBack", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsBack);
                this.columnYXChargeSuggestion = new global::System.Data.DataColumn("YXChargeSuggestion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYXChargeSuggestion);
                this.columnZGChargeSuggestion = new global::System.Data.DataColumn("ZGChargeSuggestion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZGChargeSuggestion);
                this.columnDutyDept = new global::System.Data.DataColumn("DutyDept", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDutyDept);
                this.columnReplyTime = new global::System.Data.DataColumn("ReplyTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReplyTime);
                this.columnAppearCount = new global::System.Data.DataColumn("AppearCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppearCount);
                this.columnDutyDeptCharge = new global::System.Data.DataColumn("DutyDeptCharge", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDutyDeptCharge);
                this.columnDutyPerson = new global::System.Data.DataColumn("DutyPerson", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDutyPerson);
                this.columnFinishClaim = new global::System.Data.DataColumn("FinishClaim", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinishClaim);
                this.columnStockSuggestion = new global::System.Data.DataColumn("StockSuggestion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockSuggestion);
                this.columnTemporary = new global::System.Data.DataColumn("Temporary", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemporary);
                this.columnAnalyse = new global::System.Data.DataColumn("Analyse", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnalyse);
                this.columnforeverImplement = new global::System.Data.DataColumn("foreverImplement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnforeverImplement);
                this.columnIsFMEAfile = new global::System.Data.DataColumn("IsFMEAfile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsFMEAfile);
                this.columnIsOpen = new global::System.Data.DataColumn("IsOpen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOpen);
                this.columnZGCheckName = new global::System.Data.DataColumn("ZGCheckName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZGCheckName);
                this.columnIsClose = new global::System.Data.DataColumn("IsClose", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsClose);
                this.columnPracticable = new global::System.Data.DataColumn("Practicable", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPracticable);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnFK_Bill_ID.AllowDBNull = false;
                this.columnFK_Bill_ID.MaxLength = 50;
                this.columnServiceID.MaxLength = 50;
                this.columnMessageSource.AllowDBNull = false;
                this.columnMessageSource.MaxLength = 50;
                this.columnSiteName.AllowDBNull = false;
                this.columnSiteName.MaxLength = 50;
                this.columnCarModel.AllowDBNull = false;
                this.columnCarModel.MaxLength = 50;
                this.columnCVTCode.AllowDBNull = false;
                this.columnCVTCode.MaxLength = 50;
                this.columnCVTID.AllowDBNull = false;
                this.columnCVTID.MaxLength = 50;
                this.columnChassisNum.MaxLength = 50;
                this.columnTCUCode.MaxLength = 50;
                this.columnNewSoftware.MaxLength = 50;
                this.columnBugCode.MaxLength = 50;
                this.columnCVTCondition.MaxLength = 50;
                this.columnUserName.MaxLength = 50;
                this.columnLinkman.MaxLength = 50;
                this.columnLinkTel.MaxLength = 50;
                this.columnBugNumber.MaxLength = 50;
                this.columnBatchNumber.MaxLength = 50;
                this.columnRunMileage.MaxLength = 50;
                this.columnProcessName.MaxLength = 50;
                this.columnProcessMode.MaxLength = 50;
                this.columnDiagnoseSituation.MaxLength = 1000;
                this.columnSolution.MaxLength = 1000;
                this.columnIsBack.MaxLength = 2;
                this.columnYXChargeSuggestion.MaxLength = 200;
                this.columnZGChargeSuggestion.MaxLength = 200;
                this.columnDutyDept.MaxLength = 50;
                this.columnDutyDeptCharge.MaxLength = 50;
                this.columnDutyPerson.MaxLength = 50;
                this.columnFinishClaim.MaxLength = 50;
                this.columnStockSuggestion.MaxLength = 100;
                this.columnTemporary.MaxLength = 1000;
                this.columnAnalyse.MaxLength = 500;
                this.columnforeverImplement.MaxLength = 500;
                this.columnIsFMEAfile.MaxLength = 2;
                this.columnIsOpen.MaxLength = 2;
                this.columnZGCheckName.MaxLength = 50;
                this.columnIsClose.MaxLength = 2;
                this.columnPracticable.MaxLength = 100;
                this.columnStatus.AllowDBNull = false;
                this.columnStatus.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_ServiceFeedBackRow NewS_ServiceFeedBackRow() {
                return ((S_ServiceFeedBackRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new S_ServiceFeedBackRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(S_ServiceFeedBackRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.S_ServiceFeedBackRowChanged != null)) {
                    this.S_ServiceFeedBackRowChanged(this, new S_ServiceFeedBackRowChangeEvent(((S_ServiceFeedBackRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.S_ServiceFeedBackRowChanging != null)) {
                    this.S_ServiceFeedBackRowChanging(this, new S_ServiceFeedBackRowChangeEvent(((S_ServiceFeedBackRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.S_ServiceFeedBackRowDeleted != null)) {
                    this.S_ServiceFeedBackRowDeleted(this, new S_ServiceFeedBackRowChangeEvent(((S_ServiceFeedBackRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.S_ServiceFeedBackRowDeleting != null)) {
                    this.S_ServiceFeedBackRowDeleting(this, new S_ServiceFeedBackRowChangeEvent(((S_ServiceFeedBackRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveS_ServiceFeedBackRow(S_ServiceFeedBackRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "S_ServiceFeedBackDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class S_ServiceFileDownDataTable : global::System.Data.TypedTableBase<S_ServiceFileDownRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnServiceID;
            
            private global::System.Data.DataColumn columnFileNames;
            
            private global::System.Data.DataColumn columnFileAddress;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_ServiceFileDownDataTable() {
                this.TableName = "S_ServiceFileDown";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal S_ServiceFileDownDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected S_ServiceFileDownDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileNamesColumn {
                get {
                    return this.columnFileNames;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileAddressColumn {
                get {
                    return this.columnFileAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_ServiceFileDownRow this[int index] {
                get {
                    return ((S_ServiceFileDownRow)(this.Rows[index]));
                }
            }
            
            public event S_ServiceFileDownRowChangeEventHandler S_ServiceFileDownRowChanging;
            
            public event S_ServiceFileDownRowChangeEventHandler S_ServiceFileDownRowChanged;
            
            public event S_ServiceFileDownRowChangeEventHandler S_ServiceFileDownRowDeleting;
            
            public event S_ServiceFileDownRowChangeEventHandler S_ServiceFileDownRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddS_ServiceFileDownRow(S_ServiceFileDownRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_ServiceFileDownRow AddS_ServiceFileDownRow(string ServiceID, string FileNames, string FileAddress) {
                S_ServiceFileDownRow rowS_ServiceFileDownRow = ((S_ServiceFileDownRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ServiceID,
                        FileNames,
                        FileAddress};
                rowS_ServiceFileDownRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowS_ServiceFileDownRow);
                return rowS_ServiceFileDownRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_ServiceFileDownRow FindByID(int ID) {
                return ((S_ServiceFileDownRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                S_ServiceFileDownDataTable cln = ((S_ServiceFileDownDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new S_ServiceFileDownDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnServiceID = base.Columns["ServiceID"];
                this.columnFileNames = base.Columns["FileNames"];
                this.columnFileAddress = base.Columns["FileAddress"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnServiceID = new global::System.Data.DataColumn("ServiceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceID);
                this.columnFileNames = new global::System.Data.DataColumn("FileNames", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileNames);
                this.columnFileAddress = new global::System.Data.DataColumn("FileAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileAddress);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnServiceID.AllowDBNull = false;
                this.columnServiceID.MaxLength = 50;
                this.columnFileNames.AllowDBNull = false;
                this.columnFileNames.MaxLength = 50;
                this.columnFileAddress.AllowDBNull = false;
                this.columnFileAddress.MaxLength = 150;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_ServiceFileDownRow NewS_ServiceFileDownRow() {
                return ((S_ServiceFileDownRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new S_ServiceFileDownRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(S_ServiceFileDownRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.S_ServiceFileDownRowChanged != null)) {
                    this.S_ServiceFileDownRowChanged(this, new S_ServiceFileDownRowChangeEvent(((S_ServiceFileDownRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.S_ServiceFileDownRowChanging != null)) {
                    this.S_ServiceFileDownRowChanging(this, new S_ServiceFileDownRowChangeEvent(((S_ServiceFileDownRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.S_ServiceFileDownRowDeleted != null)) {
                    this.S_ServiceFileDownRowDeleted(this, new S_ServiceFileDownRowChangeEvent(((S_ServiceFileDownRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.S_ServiceFileDownRowDeleting != null)) {
                    this.S_ServiceFileDownRowDeleting(this, new S_ServiceFileDownRowChangeEvent(((S_ServiceFileDownRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveS_ServiceFileDownRow(S_ServiceFileDownRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "S_ServiceFileDownDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TCU_UP_DownloadLogDataTable : global::System.Data.TypedTableBase<TCU_UP_DownloadLogRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnMachineCode;
            
            private global::System.Data.DataColumn columnProgramType;
            
            private global::System.Data.DataColumn columnProgramVersion;
            
            private global::System.Data.DataColumn columnDownloadDate;
            
            private global::System.Data.DataColumn columnIpAddress;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_DownloadLogDataTable() {
                this.TableName = "TCU_UP_DownloadLog";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCU_UP_DownloadLogDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TCU_UP_DownloadLogDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MachineCodeColumn {
                get {
                    return this.columnMachineCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramTypeColumn {
                get {
                    return this.columnProgramType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramVersionColumn {
                get {
                    return this.columnProgramVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DownloadDateColumn {
                get {
                    return this.columnDownloadDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IpAddressColumn {
                get {
                    return this.columnIpAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_DownloadLogRow this[int index] {
                get {
                    return ((TCU_UP_DownloadLogRow)(this.Rows[index]));
                }
            }
            
            public event TCU_UP_DownloadLogRowChangeEventHandler TCU_UP_DownloadLogRowChanging;
            
            public event TCU_UP_DownloadLogRowChangeEventHandler TCU_UP_DownloadLogRowChanged;
            
            public event TCU_UP_DownloadLogRowChangeEventHandler TCU_UP_DownloadLogRowDeleting;
            
            public event TCU_UP_DownloadLogRowChangeEventHandler TCU_UP_DownloadLogRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTCU_UP_DownloadLogRow(TCU_UP_DownloadLogRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_DownloadLogRow AddTCU_UP_DownloadLogRow(string MachineCode, int ProgramType, double ProgramVersion, string DownloadDate, string IpAddress) {
                TCU_UP_DownloadLogRow rowTCU_UP_DownloadLogRow = ((TCU_UP_DownloadLogRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MachineCode,
                        ProgramType,
                        ProgramVersion,
                        DownloadDate,
                        IpAddress};
                rowTCU_UP_DownloadLogRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTCU_UP_DownloadLogRow);
                return rowTCU_UP_DownloadLogRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_DownloadLogRow FindByID(int ID) {
                return ((TCU_UP_DownloadLogRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TCU_UP_DownloadLogDataTable cln = ((TCU_UP_DownloadLogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TCU_UP_DownloadLogDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnMachineCode = base.Columns["MachineCode"];
                this.columnProgramType = base.Columns["ProgramType"];
                this.columnProgramVersion = base.Columns["ProgramVersion"];
                this.columnDownloadDate = base.Columns["DownloadDate"];
                this.columnIpAddress = base.Columns["IpAddress"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnMachineCode = new global::System.Data.DataColumn("MachineCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMachineCode);
                this.columnProgramType = new global::System.Data.DataColumn("ProgramType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramType);
                this.columnProgramVersion = new global::System.Data.DataColumn("ProgramVersion", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramVersion);
                this.columnDownloadDate = new global::System.Data.DataColumn("DownloadDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDownloadDate);
                this.columnIpAddress = new global::System.Data.DataColumn("IpAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIpAddress);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnMachineCode.AllowDBNull = false;
                this.columnMachineCode.MaxLength = 500;
                this.columnProgramType.AllowDBNull = false;
                this.columnProgramVersion.AllowDBNull = false;
                this.columnDownloadDate.AllowDBNull = false;
                this.columnDownloadDate.MaxLength = 50;
                this.columnIpAddress.AllowDBNull = false;
                this.columnIpAddress.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_DownloadLogRow NewTCU_UP_DownloadLogRow() {
                return ((TCU_UP_DownloadLogRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TCU_UP_DownloadLogRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TCU_UP_DownloadLogRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TCU_UP_DownloadLogRowChanged != null)) {
                    this.TCU_UP_DownloadLogRowChanged(this, new TCU_UP_DownloadLogRowChangeEvent(((TCU_UP_DownloadLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TCU_UP_DownloadLogRowChanging != null)) {
                    this.TCU_UP_DownloadLogRowChanging(this, new TCU_UP_DownloadLogRowChangeEvent(((TCU_UP_DownloadLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TCU_UP_DownloadLogRowDeleted != null)) {
                    this.TCU_UP_DownloadLogRowDeleted(this, new TCU_UP_DownloadLogRowChangeEvent(((TCU_UP_DownloadLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TCU_UP_DownloadLogRowDeleting != null)) {
                    this.TCU_UP_DownloadLogRowDeleting(this, new TCU_UP_DownloadLogRowChangeEvent(((TCU_UP_DownloadLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTCU_UP_DownloadLogRow(TCU_UP_DownloadLogRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TCU_UP_DownloadLogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TCU_UP_FILEDataTable : global::System.Data.TypedTableBase<TCU_UP_FILERow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnProgramType;
            
            private global::System.Data.DataColumn columnProgramVersion;
            
            private global::System.Data.DataColumn columnVersionDetail;
            
            private global::System.Data.DataColumn columnFileName;
            
            private global::System.Data.DataColumn columnFileContent;
            
            private global::System.Data.DataColumn columnFileLength;
            
            private global::System.Data.DataColumn columnFileLengthDetail;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnRemark;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_FILEDataTable() {
                this.TableName = "TCU_UP_FILE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCU_UP_FILEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TCU_UP_FILEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramTypeColumn {
                get {
                    return this.columnProgramType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramVersionColumn {
                get {
                    return this.columnProgramVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VersionDetailColumn {
                get {
                    return this.columnVersionDetail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileNameColumn {
                get {
                    return this.columnFileName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileContentColumn {
                get {
                    return this.columnFileContent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileLengthColumn {
                get {
                    return this.columnFileLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileLengthDetailColumn {
                get {
                    return this.columnFileLengthDetail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_FILERow this[int index] {
                get {
                    return ((TCU_UP_FILERow)(this.Rows[index]));
                }
            }
            
            public event TCU_UP_FILERowChangeEventHandler TCU_UP_FILERowChanging;
            
            public event TCU_UP_FILERowChangeEventHandler TCU_UP_FILERowChanged;
            
            public event TCU_UP_FILERowChangeEventHandler TCU_UP_FILERowDeleting;
            
            public event TCU_UP_FILERowChangeEventHandler TCU_UP_FILERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTCU_UP_FILERow(TCU_UP_FILERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_FILERow AddTCU_UP_FILERow(TCU_UP_ProgramTypeRow parentTCU_UP_ProgramTypeRowByFK_TCU_UP_FILE_TCU_UP_ProgramType, double ProgramVersion, string VersionDetail, string FileName, byte[] FileContent, int FileLength, string FileLengthDetail, System.DateTime Date, string Remark) {
                TCU_UP_FILERow rowTCU_UP_FILERow = ((TCU_UP_FILERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        ProgramVersion,
                        VersionDetail,
                        FileName,
                        FileContent,
                        FileLength,
                        FileLengthDetail,
                        Date,
                        Remark};
                if ((parentTCU_UP_ProgramTypeRowByFK_TCU_UP_FILE_TCU_UP_ProgramType != null)) {
                    columnValuesArray[1] = parentTCU_UP_ProgramTypeRowByFK_TCU_UP_FILE_TCU_UP_ProgramType[0];
                }
                rowTCU_UP_FILERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTCU_UP_FILERow);
                return rowTCU_UP_FILERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_FILERow FindByID(int ID) {
                return ((TCU_UP_FILERow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TCU_UP_FILEDataTable cln = ((TCU_UP_FILEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TCU_UP_FILEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnProgramType = base.Columns["ProgramType"];
                this.columnProgramVersion = base.Columns["ProgramVersion"];
                this.columnVersionDetail = base.Columns["VersionDetail"];
                this.columnFileName = base.Columns["FileName"];
                this.columnFileContent = base.Columns["FileContent"];
                this.columnFileLength = base.Columns["FileLength"];
                this.columnFileLengthDetail = base.Columns["FileLengthDetail"];
                this.columnDate = base.Columns["Date"];
                this.columnRemark = base.Columns["Remark"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnProgramType = new global::System.Data.DataColumn("ProgramType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramType);
                this.columnProgramVersion = new global::System.Data.DataColumn("ProgramVersion", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramVersion);
                this.columnVersionDetail = new global::System.Data.DataColumn("VersionDetail", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersionDetail);
                this.columnFileName = new global::System.Data.DataColumn("FileName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileName);
                this.columnFileContent = new global::System.Data.DataColumn("FileContent", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileContent);
                this.columnFileLength = new global::System.Data.DataColumn("FileLength", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileLength);
                this.columnFileLengthDetail = new global::System.Data.DataColumn("FileLengthDetail", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileLengthDetail);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnProgramType.AllowDBNull = false;
                this.columnProgramVersion.AllowDBNull = false;
                this.columnVersionDetail.AllowDBNull = false;
                this.columnVersionDetail.MaxLength = 500;
                this.columnFileName.AllowDBNull = false;
                this.columnFileName.MaxLength = 500;
                this.columnFileContent.AllowDBNull = false;
                this.columnFileLength.AllowDBNull = false;
                this.columnFileLengthDetail.AllowDBNull = false;
                this.columnFileLengthDetail.MaxLength = 50;
                this.columnDate.AllowDBNull = false;
                this.columnRemark.AllowDBNull = false;
                this.columnRemark.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_FILERow NewTCU_UP_FILERow() {
                return ((TCU_UP_FILERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TCU_UP_FILERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TCU_UP_FILERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TCU_UP_FILERowChanged != null)) {
                    this.TCU_UP_FILERowChanged(this, new TCU_UP_FILERowChangeEvent(((TCU_UP_FILERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TCU_UP_FILERowChanging != null)) {
                    this.TCU_UP_FILERowChanging(this, new TCU_UP_FILERowChangeEvent(((TCU_UP_FILERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TCU_UP_FILERowDeleted != null)) {
                    this.TCU_UP_FILERowDeleted(this, new TCU_UP_FILERowChangeEvent(((TCU_UP_FILERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TCU_UP_FILERowDeleting != null)) {
                    this.TCU_UP_FILERowDeleting(this, new TCU_UP_FILERowChangeEvent(((TCU_UP_FILERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTCU_UP_FILERow(TCU_UP_FILERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TCU_UP_FILEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TCU_UP_LOGDataTable : global::System.Data.TypedTableBase<TCU_UP_LOGRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnMachineCode;
            
            private global::System.Data.DataColumn columnTcuNumber;
            
            private global::System.Data.DataColumn columnVehicleModel;
            
            private global::System.Data.DataColumn columnVersion;
            
            private global::System.Data.DataColumn columnWriteCount;
            
            private global::System.Data.DataColumn columnWriteDate;
            
            private global::System.Data.DataColumn columnRemark;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_LOGDataTable() {
                this.TableName = "TCU_UP_LOG";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCU_UP_LOGDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TCU_UP_LOGDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MachineCodeColumn {
                get {
                    return this.columnMachineCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TcuNumberColumn {
                get {
                    return this.columnTcuNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VehicleModelColumn {
                get {
                    return this.columnVehicleModel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VersionColumn {
                get {
                    return this.columnVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WriteCountColumn {
                get {
                    return this.columnWriteCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WriteDateColumn {
                get {
                    return this.columnWriteDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_LOGRow this[int index] {
                get {
                    return ((TCU_UP_LOGRow)(this.Rows[index]));
                }
            }
            
            public event TCU_UP_LOGRowChangeEventHandler TCU_UP_LOGRowChanging;
            
            public event TCU_UP_LOGRowChangeEventHandler TCU_UP_LOGRowChanged;
            
            public event TCU_UP_LOGRowChangeEventHandler TCU_UP_LOGRowDeleting;
            
            public event TCU_UP_LOGRowChangeEventHandler TCU_UP_LOGRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTCU_UP_LOGRow(TCU_UP_LOGRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_LOGRow AddTCU_UP_LOGRow(string MachineCode, string TcuNumber, string VehicleModel, string Version, int WriteCount, string WriteDate, string Remark) {
                TCU_UP_LOGRow rowTCU_UP_LOGRow = ((TCU_UP_LOGRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MachineCode,
                        TcuNumber,
                        VehicleModel,
                        Version,
                        WriteCount,
                        WriteDate,
                        Remark};
                rowTCU_UP_LOGRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTCU_UP_LOGRow);
                return rowTCU_UP_LOGRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_LOGRow FindByID(int ID) {
                return ((TCU_UP_LOGRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TCU_UP_LOGDataTable cln = ((TCU_UP_LOGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TCU_UP_LOGDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnMachineCode = base.Columns["MachineCode"];
                this.columnTcuNumber = base.Columns["TcuNumber"];
                this.columnVehicleModel = base.Columns["VehicleModel"];
                this.columnVersion = base.Columns["Version"];
                this.columnWriteCount = base.Columns["WriteCount"];
                this.columnWriteDate = base.Columns["WriteDate"];
                this.columnRemark = base.Columns["Remark"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnMachineCode = new global::System.Data.DataColumn("MachineCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMachineCode);
                this.columnTcuNumber = new global::System.Data.DataColumn("TcuNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTcuNumber);
                this.columnVehicleModel = new global::System.Data.DataColumn("VehicleModel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVehicleModel);
                this.columnVersion = new global::System.Data.DataColumn("Version", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersion);
                this.columnWriteCount = new global::System.Data.DataColumn("WriteCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWriteCount);
                this.columnWriteDate = new global::System.Data.DataColumn("WriteDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWriteDate);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnMachineCode.AllowDBNull = false;
                this.columnMachineCode.MaxLength = 500;
                this.columnTcuNumber.AllowDBNull = false;
                this.columnTcuNumber.MaxLength = 50;
                this.columnVehicleModel.AllowDBNull = false;
                this.columnVehicleModel.MaxLength = 50;
                this.columnVersion.AllowDBNull = false;
                this.columnVersion.MaxLength = 50;
                this.columnWriteCount.AllowDBNull = false;
                this.columnWriteDate.AllowDBNull = false;
                this.columnWriteDate.MaxLength = 50;
                this.columnRemark.AllowDBNull = false;
                this.columnRemark.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_LOGRow NewTCU_UP_LOGRow() {
                return ((TCU_UP_LOGRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TCU_UP_LOGRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TCU_UP_LOGRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TCU_UP_LOGRowChanged != null)) {
                    this.TCU_UP_LOGRowChanged(this, new TCU_UP_LOGRowChangeEvent(((TCU_UP_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TCU_UP_LOGRowChanging != null)) {
                    this.TCU_UP_LOGRowChanging(this, new TCU_UP_LOGRowChangeEvent(((TCU_UP_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TCU_UP_LOGRowDeleted != null)) {
                    this.TCU_UP_LOGRowDeleted(this, new TCU_UP_LOGRowChangeEvent(((TCU_UP_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TCU_UP_LOGRowDeleting != null)) {
                    this.TCU_UP_LOGRowDeleting(this, new TCU_UP_LOGRowChangeEvent(((TCU_UP_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTCU_UP_LOGRow(TCU_UP_LOGRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TCU_UP_LOGDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TCU_UP_Program_Update_LogDataTable : global::System.Data.TypedTableBase<TCU_UP_Program_Update_LogRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnVehicleModel;
            
            private global::System.Data.DataColumn columnProgramVersion;
            
            private global::System.Data.DataColumn columnUpdateDetail;
            
            private global::System.Data.DataColumn columnUpdateDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_Program_Update_LogDataTable() {
                this.TableName = "TCU_UP_Program_Update_Log";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCU_UP_Program_Update_LogDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TCU_UP_Program_Update_LogDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VehicleModelColumn {
                get {
                    return this.columnVehicleModel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramVersionColumn {
                get {
                    return this.columnProgramVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateDetailColumn {
                get {
                    return this.columnUpdateDetail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateDateColumn {
                get {
                    return this.columnUpdateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_Program_Update_LogRow this[int index] {
                get {
                    return ((TCU_UP_Program_Update_LogRow)(this.Rows[index]));
                }
            }
            
            public event TCU_UP_Program_Update_LogRowChangeEventHandler TCU_UP_Program_Update_LogRowChanging;
            
            public event TCU_UP_Program_Update_LogRowChangeEventHandler TCU_UP_Program_Update_LogRowChanged;
            
            public event TCU_UP_Program_Update_LogRowChangeEventHandler TCU_UP_Program_Update_LogRowDeleting;
            
            public event TCU_UP_Program_Update_LogRowChangeEventHandler TCU_UP_Program_Update_LogRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTCU_UP_Program_Update_LogRow(TCU_UP_Program_Update_LogRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_Program_Update_LogRow AddTCU_UP_Program_Update_LogRow(string VehicleModel, double ProgramVersion, string UpdateDetail, System.DateTime UpdateDate) {
                TCU_UP_Program_Update_LogRow rowTCU_UP_Program_Update_LogRow = ((TCU_UP_Program_Update_LogRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        VehicleModel,
                        ProgramVersion,
                        UpdateDetail,
                        UpdateDate};
                rowTCU_UP_Program_Update_LogRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTCU_UP_Program_Update_LogRow);
                return rowTCU_UP_Program_Update_LogRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_Program_Update_LogRow FindByID(int ID) {
                return ((TCU_UP_Program_Update_LogRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TCU_UP_Program_Update_LogDataTable cln = ((TCU_UP_Program_Update_LogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TCU_UP_Program_Update_LogDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnVehicleModel = base.Columns["VehicleModel"];
                this.columnProgramVersion = base.Columns["ProgramVersion"];
                this.columnUpdateDetail = base.Columns["UpdateDetail"];
                this.columnUpdateDate = base.Columns["UpdateDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnVehicleModel = new global::System.Data.DataColumn("VehicleModel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVehicleModel);
                this.columnProgramVersion = new global::System.Data.DataColumn("ProgramVersion", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramVersion);
                this.columnUpdateDetail = new global::System.Data.DataColumn("UpdateDetail", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateDetail);
                this.columnUpdateDate = new global::System.Data.DataColumn("UpdateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnVehicleModel.AllowDBNull = false;
                this.columnVehicleModel.MaxLength = 50;
                this.columnProgramVersion.AllowDBNull = false;
                this.columnUpdateDetail.AllowDBNull = false;
                this.columnUpdateDetail.MaxLength = 1000;
                this.columnUpdateDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_Program_Update_LogRow NewTCU_UP_Program_Update_LogRow() {
                return ((TCU_UP_Program_Update_LogRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TCU_UP_Program_Update_LogRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TCU_UP_Program_Update_LogRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TCU_UP_Program_Update_LogRowChanged != null)) {
                    this.TCU_UP_Program_Update_LogRowChanged(this, new TCU_UP_Program_Update_LogRowChangeEvent(((TCU_UP_Program_Update_LogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TCU_UP_Program_Update_LogRowChanging != null)) {
                    this.TCU_UP_Program_Update_LogRowChanging(this, new TCU_UP_Program_Update_LogRowChangeEvent(((TCU_UP_Program_Update_LogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TCU_UP_Program_Update_LogRowDeleted != null)) {
                    this.TCU_UP_Program_Update_LogRowDeleted(this, new TCU_UP_Program_Update_LogRowChangeEvent(((TCU_UP_Program_Update_LogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TCU_UP_Program_Update_LogRowDeleting != null)) {
                    this.TCU_UP_Program_Update_LogRowDeleting(this, new TCU_UP_Program_Update_LogRowChangeEvent(((TCU_UP_Program_Update_LogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTCU_UP_Program_Update_LogRow(TCU_UP_Program_Update_LogRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TCU_UP_Program_Update_LogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TCU_UP_ProgramTypeDataTable : global::System.Data.TypedTableBase<TCU_UP_ProgramTypeRow> {
            
            private global::System.Data.DataColumn columnProgramType;
            
            private global::System.Data.DataColumn columnProgramTypeName;
            
            private global::System.Data.DataColumn columnRemark;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_ProgramTypeDataTable() {
                this.TableName = "TCU_UP_ProgramType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCU_UP_ProgramTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TCU_UP_ProgramTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramTypeColumn {
                get {
                    return this.columnProgramType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramTypeNameColumn {
                get {
                    return this.columnProgramTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_ProgramTypeRow this[int index] {
                get {
                    return ((TCU_UP_ProgramTypeRow)(this.Rows[index]));
                }
            }
            
            public event TCU_UP_ProgramTypeRowChangeEventHandler TCU_UP_ProgramTypeRowChanging;
            
            public event TCU_UP_ProgramTypeRowChangeEventHandler TCU_UP_ProgramTypeRowChanged;
            
            public event TCU_UP_ProgramTypeRowChangeEventHandler TCU_UP_ProgramTypeRowDeleting;
            
            public event TCU_UP_ProgramTypeRowChangeEventHandler TCU_UP_ProgramTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTCU_UP_ProgramTypeRow(TCU_UP_ProgramTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_ProgramTypeRow AddTCU_UP_ProgramTypeRow(int ProgramType, string ProgramTypeName, string Remark) {
                TCU_UP_ProgramTypeRow rowTCU_UP_ProgramTypeRow = ((TCU_UP_ProgramTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProgramType,
                        ProgramTypeName,
                        Remark};
                rowTCU_UP_ProgramTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTCU_UP_ProgramTypeRow);
                return rowTCU_UP_ProgramTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_ProgramTypeRow FindByProgramType(int ProgramType) {
                return ((TCU_UP_ProgramTypeRow)(this.Rows.Find(new object[] {
                            ProgramType})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TCU_UP_ProgramTypeDataTable cln = ((TCU_UP_ProgramTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TCU_UP_ProgramTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProgramType = base.Columns["ProgramType"];
                this.columnProgramTypeName = base.Columns["ProgramTypeName"];
                this.columnRemark = base.Columns["Remark"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProgramType = new global::System.Data.DataColumn("ProgramType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramType);
                this.columnProgramTypeName = new global::System.Data.DataColumn("ProgramTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramTypeName);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProgramType}, true));
                this.columnProgramType.AllowDBNull = false;
                this.columnProgramType.Unique = true;
                this.columnProgramTypeName.AllowDBNull = false;
                this.columnProgramTypeName.MaxLength = 100;
                this.columnRemark.AllowDBNull = false;
                this.columnRemark.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_ProgramTypeRow NewTCU_UP_ProgramTypeRow() {
                return ((TCU_UP_ProgramTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TCU_UP_ProgramTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TCU_UP_ProgramTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TCU_UP_ProgramTypeRowChanged != null)) {
                    this.TCU_UP_ProgramTypeRowChanged(this, new TCU_UP_ProgramTypeRowChangeEvent(((TCU_UP_ProgramTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TCU_UP_ProgramTypeRowChanging != null)) {
                    this.TCU_UP_ProgramTypeRowChanging(this, new TCU_UP_ProgramTypeRowChangeEvent(((TCU_UP_ProgramTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TCU_UP_ProgramTypeRowDeleted != null)) {
                    this.TCU_UP_ProgramTypeRowDeleted(this, new TCU_UP_ProgramTypeRowChangeEvent(((TCU_UP_ProgramTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TCU_UP_ProgramTypeRowDeleting != null)) {
                    this.TCU_UP_ProgramTypeRowDeleting(this, new TCU_UP_ProgramTypeRowChangeEvent(((TCU_UP_ProgramTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTCU_UP_ProgramTypeRow(TCU_UP_ProgramTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TCU_UP_ProgramTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TCU_UP_UserInfoDataTable : global::System.Data.TypedTableBase<TCU_UP_UserInfoRow> {
            
            private global::System.Data.DataColumn columnMachineCode;
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnCompany;
            
            private global::System.Data.DataColumn columnContact;
            
            private global::System.Data.DataColumn columnContactAddress;
            
            private global::System.Data.DataColumn columnIsEnable;
            
            private global::System.Data.DataColumn columnCheckType;
            
            private global::System.Data.DataColumn columnAllowCount;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnAllowProgramType;
            
            private global::System.Data.DataColumn columnRemark;
            
            private global::System.Data.DataColumn columnUpdateDate;
            
            private global::System.Data.DataColumn columnUpdateLog;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_UserInfoDataTable() {
                this.TableName = "TCU_UP_UserInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCU_UP_UserInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TCU_UP_UserInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MachineCodeColumn {
                get {
                    return this.columnMachineCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyColumn {
                get {
                    return this.columnCompany;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContactColumn {
                get {
                    return this.columnContact;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContactAddressColumn {
                get {
                    return this.columnContactAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsEnableColumn {
                get {
                    return this.columnIsEnable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckTypeColumn {
                get {
                    return this.columnCheckType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllowCountColumn {
                get {
                    return this.columnAllowCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllowProgramTypeColumn {
                get {
                    return this.columnAllowProgramType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateDateColumn {
                get {
                    return this.columnUpdateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateLogColumn {
                get {
                    return this.columnUpdateLog;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_UserInfoRow this[int index] {
                get {
                    return ((TCU_UP_UserInfoRow)(this.Rows[index]));
                }
            }
            
            public event TCU_UP_UserInfoRowChangeEventHandler TCU_UP_UserInfoRowChanging;
            
            public event TCU_UP_UserInfoRowChangeEventHandler TCU_UP_UserInfoRowChanged;
            
            public event TCU_UP_UserInfoRowChangeEventHandler TCU_UP_UserInfoRowDeleting;
            
            public event TCU_UP_UserInfoRowChangeEventHandler TCU_UP_UserInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTCU_UP_UserInfoRow(TCU_UP_UserInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_UserInfoRow AddTCU_UP_UserInfoRow(string MachineCode, string UserName, string Company, string Contact, string ContactAddress, bool IsEnable, int CheckType, int AllowCount, System.DateTime EndDate, TCU_UP_ProgramTypeRow parentTCU_UP_ProgramTypeRowByFK_TCU_UP_UserInfo_TCU_UP_ProgramType, string Remark, System.DateTime UpdateDate, string UpdateLog) {
                TCU_UP_UserInfoRow rowTCU_UP_UserInfoRow = ((TCU_UP_UserInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MachineCode,
                        UserName,
                        Company,
                        Contact,
                        ContactAddress,
                        IsEnable,
                        CheckType,
                        AllowCount,
                        EndDate,
                        null,
                        Remark,
                        UpdateDate,
                        UpdateLog};
                if ((parentTCU_UP_ProgramTypeRowByFK_TCU_UP_UserInfo_TCU_UP_ProgramType != null)) {
                    columnValuesArray[9] = parentTCU_UP_ProgramTypeRowByFK_TCU_UP_UserInfo_TCU_UP_ProgramType[0];
                }
                rowTCU_UP_UserInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTCU_UP_UserInfoRow);
                return rowTCU_UP_UserInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_UserInfoRow FindByMachineCode(string MachineCode) {
                return ((TCU_UP_UserInfoRow)(this.Rows.Find(new object[] {
                            MachineCode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TCU_UP_UserInfoDataTable cln = ((TCU_UP_UserInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TCU_UP_UserInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMachineCode = base.Columns["MachineCode"];
                this.columnUserName = base.Columns["UserName"];
                this.columnCompany = base.Columns["Company"];
                this.columnContact = base.Columns["Contact"];
                this.columnContactAddress = base.Columns["ContactAddress"];
                this.columnIsEnable = base.Columns["IsEnable"];
                this.columnCheckType = base.Columns["CheckType"];
                this.columnAllowCount = base.Columns["AllowCount"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnAllowProgramType = base.Columns["AllowProgramType"];
                this.columnRemark = base.Columns["Remark"];
                this.columnUpdateDate = base.Columns["UpdateDate"];
                this.columnUpdateLog = base.Columns["UpdateLog"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMachineCode = new global::System.Data.DataColumn("MachineCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMachineCode);
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnCompany = new global::System.Data.DataColumn("Company", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompany);
                this.columnContact = new global::System.Data.DataColumn("Contact", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContact);
                this.columnContactAddress = new global::System.Data.DataColumn("ContactAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContactAddress);
                this.columnIsEnable = new global::System.Data.DataColumn("IsEnable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsEnable);
                this.columnCheckType = new global::System.Data.DataColumn("CheckType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckType);
                this.columnAllowCount = new global::System.Data.DataColumn("AllowCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllowCount);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnAllowProgramType = new global::System.Data.DataColumn("AllowProgramType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllowProgramType);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columnUpdateDate = new global::System.Data.DataColumn("UpdateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateDate);
                this.columnUpdateLog = new global::System.Data.DataColumn("UpdateLog", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateLog);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMachineCode}, true));
                this.columnMachineCode.AllowDBNull = false;
                this.columnMachineCode.Unique = true;
                this.columnMachineCode.MaxLength = 500;
                this.columnUserName.AllowDBNull = false;
                this.columnUserName.MaxLength = 500;
                this.columnCompany.AllowDBNull = false;
                this.columnCompany.MaxLength = 500;
                this.columnContact.AllowDBNull = false;
                this.columnContact.MaxLength = 500;
                this.columnContactAddress.AllowDBNull = false;
                this.columnContactAddress.MaxLength = 500;
                this.columnIsEnable.AllowDBNull = false;
                this.columnCheckType.AllowDBNull = false;
                this.columnAllowCount.AllowDBNull = false;
                this.columnEndDate.AllowDBNull = false;
                this.columnAllowProgramType.AllowDBNull = false;
                this.columnRemark.AllowDBNull = false;
                this.columnRemark.MaxLength = 2147483647;
                this.columnUpdateDate.AllowDBNull = false;
                this.columnUpdateLog.AllowDBNull = false;
                this.columnUpdateLog.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_UserInfoRow NewTCU_UP_UserInfoRow() {
                return ((TCU_UP_UserInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TCU_UP_UserInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TCU_UP_UserInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TCU_UP_UserInfoRowChanged != null)) {
                    this.TCU_UP_UserInfoRowChanged(this, new TCU_UP_UserInfoRowChangeEvent(((TCU_UP_UserInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TCU_UP_UserInfoRowChanging != null)) {
                    this.TCU_UP_UserInfoRowChanging(this, new TCU_UP_UserInfoRowChangeEvent(((TCU_UP_UserInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TCU_UP_UserInfoRowDeleted != null)) {
                    this.TCU_UP_UserInfoRowDeleted(this, new TCU_UP_UserInfoRowChangeEvent(((TCU_UP_UserInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TCU_UP_UserInfoRowDeleting != null)) {
                    this.TCU_UP_UserInfoRowDeleting(this, new TCU_UP_UserInfoRowChangeEvent(((TCU_UP_UserInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTCU_UP_UserInfoRow(TCU_UP_UserInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TCU_UP_UserInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TCU_UP_VehicleModelDataTable : global::System.Data.TypedTableBase<TCU_UP_VehicleModelRow> {
            
            private global::System.Data.DataColumn columnVehicleModel;
            
            private global::System.Data.DataColumn columnRemark;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_VehicleModelDataTable() {
                this.TableName = "TCU_UP_VehicleModel";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCU_UP_VehicleModelDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TCU_UP_VehicleModelDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VehicleModelColumn {
                get {
                    return this.columnVehicleModel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_VehicleModelRow this[int index] {
                get {
                    return ((TCU_UP_VehicleModelRow)(this.Rows[index]));
                }
            }
            
            public event TCU_UP_VehicleModelRowChangeEventHandler TCU_UP_VehicleModelRowChanging;
            
            public event TCU_UP_VehicleModelRowChangeEventHandler TCU_UP_VehicleModelRowChanged;
            
            public event TCU_UP_VehicleModelRowChangeEventHandler TCU_UP_VehicleModelRowDeleting;
            
            public event TCU_UP_VehicleModelRowChangeEventHandler TCU_UP_VehicleModelRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTCU_UP_VehicleModelRow(TCU_UP_VehicleModelRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_VehicleModelRow AddTCU_UP_VehicleModelRow(string VehicleModel, string Remark) {
                TCU_UP_VehicleModelRow rowTCU_UP_VehicleModelRow = ((TCU_UP_VehicleModelRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        VehicleModel,
                        Remark};
                rowTCU_UP_VehicleModelRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTCU_UP_VehicleModelRow);
                return rowTCU_UP_VehicleModelRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_VehicleModelRow FindByVehicleModel(string VehicleModel) {
                return ((TCU_UP_VehicleModelRow)(this.Rows.Find(new object[] {
                            VehicleModel})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TCU_UP_VehicleModelDataTable cln = ((TCU_UP_VehicleModelDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TCU_UP_VehicleModelDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnVehicleModel = base.Columns["VehicleModel"];
                this.columnRemark = base.Columns["Remark"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnVehicleModel = new global::System.Data.DataColumn("VehicleModel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVehicleModel);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnVehicleModel}, true));
                this.columnVehicleModel.AllowDBNull = false;
                this.columnVehicleModel.Unique = true;
                this.columnVehicleModel.MaxLength = 50;
                this.columnRemark.AllowDBNull = false;
                this.columnRemark.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_VehicleModelRow NewTCU_UP_VehicleModelRow() {
                return ((TCU_UP_VehicleModelRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TCU_UP_VehicleModelRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TCU_UP_VehicleModelRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TCU_UP_VehicleModelRowChanged != null)) {
                    this.TCU_UP_VehicleModelRowChanged(this, new TCU_UP_VehicleModelRowChangeEvent(((TCU_UP_VehicleModelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TCU_UP_VehicleModelRowChanging != null)) {
                    this.TCU_UP_VehicleModelRowChanging(this, new TCU_UP_VehicleModelRowChangeEvent(((TCU_UP_VehicleModelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TCU_UP_VehicleModelRowDeleted != null)) {
                    this.TCU_UP_VehicleModelRowDeleted(this, new TCU_UP_VehicleModelRowChangeEvent(((TCU_UP_VehicleModelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TCU_UP_VehicleModelRowDeleting != null)) {
                    this.TCU_UP_VehicleModelRowDeleting(this, new TCU_UP_VehicleModelRowChangeEvent(((TCU_UP_VehicleModelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTCU_UP_VehicleModelRow(TCU_UP_VehicleModelRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TCU_UP_VehicleModelDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View_CCAR_QuestionTrackListDataTable : global::System.Data.TypedTableBase<View_CCAR_QuestionTrackListRow> {
            
            private global::System.Data.DataColumn column序号;
            
            private global::System.Data.DataColumn column父级编号;
            
            private global::System.Data.DataColumn column供应商负责人;
            
            private global::System.Data.DataColumn column零件名称;
            
            private global::System.Data.DataColumn column图形型号;
            
            private global::System.Data.DataColumn column规格;
            
            private global::System.Data.DataColumn column问题描述;
            
            private global::System.Data.DataColumn column供应商接受时间;
            
            private global::System.Data.DataColumn column解决方案;
            
            private global::System.Data.DataColumn column发现时间;
            
            private global::System.Data.DataColumn column进行状态;
            
            private global::System.Data.DataColumn column供应商结束时间;
            
            private global::System.Data.DataColumn column最后审核时间;
            
            private global::System.Data.DataColumn column备注;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_CCAR_QuestionTrackListDataTable() {
                this.TableName = "View_CCAR_QuestionTrackList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_CCAR_QuestionTrackListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View_CCAR_QuestionTrackListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 序号Column {
                get {
                    return this.column序号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 父级编号Column {
                get {
                    return this.column父级编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 供应商负责人Column {
                get {
                    return this.column供应商负责人;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 零件名称Column {
                get {
                    return this.column零件名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 图形型号Column {
                get {
                    return this.column图形型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 规格Column {
                get {
                    return this.column规格;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 问题描述Column {
                get {
                    return this.column问题描述;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 供应商接受时间Column {
                get {
                    return this.column供应商接受时间;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 解决方案Column {
                get {
                    return this.column解决方案;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 发现时间Column {
                get {
                    return this.column发现时间;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 进行状态Column {
                get {
                    return this.column进行状态;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 供应商结束时间Column {
                get {
                    return this.column供应商结束时间;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 最后审核时间Column {
                get {
                    return this.column最后审核时间;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 备注Column {
                get {
                    return this.column备注;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_CCAR_QuestionTrackListRow this[int index] {
                get {
                    return ((View_CCAR_QuestionTrackListRow)(this.Rows[index]));
                }
            }
            
            public event View_CCAR_QuestionTrackListRowChangeEventHandler View_CCAR_QuestionTrackListRowChanging;
            
            public event View_CCAR_QuestionTrackListRowChangeEventHandler View_CCAR_QuestionTrackListRowChanged;
            
            public event View_CCAR_QuestionTrackListRowChangeEventHandler View_CCAR_QuestionTrackListRowDeleting;
            
            public event View_CCAR_QuestionTrackListRowChangeEventHandler View_CCAR_QuestionTrackListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView_CCAR_QuestionTrackListRow(View_CCAR_QuestionTrackListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_CCAR_QuestionTrackListRow AddView_CCAR_QuestionTrackListRow(int 父级编号, string 供应商负责人, string 零件名称, string 图形型号, string 规格, string 问题描述, System.DateTime 供应商接受时间, string 解决方案, System.DateTime 发现时间, string 进行状态, System.DateTime 供应商结束时间, System.DateTime 最后审核时间, string 备注) {
                View_CCAR_QuestionTrackListRow rowView_CCAR_QuestionTrackListRow = ((View_CCAR_QuestionTrackListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        父级编号,
                        供应商负责人,
                        零件名称,
                        图形型号,
                        规格,
                        问题描述,
                        供应商接受时间,
                        解决方案,
                        发现时间,
                        进行状态,
                        供应商结束时间,
                        最后审核时间,
                        备注};
                rowView_CCAR_QuestionTrackListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowView_CCAR_QuestionTrackListRow);
                return rowView_CCAR_QuestionTrackListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_CCAR_QuestionTrackListRow FindBy序号(int 序号) {
                return ((View_CCAR_QuestionTrackListRow)(this.Rows.Find(new object[] {
                            序号})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View_CCAR_QuestionTrackListDataTable cln = ((View_CCAR_QuestionTrackListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View_CCAR_QuestionTrackListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column序号 = base.Columns["序号"];
                this.column父级编号 = base.Columns["父级编号"];
                this.column供应商负责人 = base.Columns["供应商负责人"];
                this.column零件名称 = base.Columns["零件名称"];
                this.column图形型号 = base.Columns["图形型号"];
                this.column规格 = base.Columns["规格"];
                this.column问题描述 = base.Columns["问题描述"];
                this.column供应商接受时间 = base.Columns["供应商接受时间"];
                this.column解决方案 = base.Columns["解决方案"];
                this.column发现时间 = base.Columns["发现时间"];
                this.column进行状态 = base.Columns["进行状态"];
                this.column供应商结束时间 = base.Columns["供应商结束时间"];
                this.column最后审核时间 = base.Columns["最后审核时间"];
                this.column备注 = base.Columns["备注"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column序号 = new global::System.Data.DataColumn("序号", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column序号);
                this.column父级编号 = new global::System.Data.DataColumn("父级编号", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column父级编号);
                this.column供应商负责人 = new global::System.Data.DataColumn("供应商负责人", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column供应商负责人);
                this.column零件名称 = new global::System.Data.DataColumn("零件名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column零件名称);
                this.column图形型号 = new global::System.Data.DataColumn("图形型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column图形型号);
                this.column规格 = new global::System.Data.DataColumn("规格", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column规格);
                this.column问题描述 = new global::System.Data.DataColumn("问题描述", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column问题描述);
                this.column供应商接受时间 = new global::System.Data.DataColumn("供应商接受时间", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column供应商接受时间);
                this.column解决方案 = new global::System.Data.DataColumn("解决方案", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column解决方案);
                this.column发现时间 = new global::System.Data.DataColumn("发现时间", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column发现时间);
                this.column进行状态 = new global::System.Data.DataColumn("进行状态", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column进行状态);
                this.column供应商结束时间 = new global::System.Data.DataColumn("供应商结束时间", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column供应商结束时间);
                this.column最后审核时间 = new global::System.Data.DataColumn("最后审核时间", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column最后审核时间);
                this.column备注 = new global::System.Data.DataColumn("备注", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column备注);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.column序号}, true));
                this.column序号.AutoIncrement = true;
                this.column序号.AutoIncrementSeed = -1;
                this.column序号.AutoIncrementStep = -1;
                this.column序号.AllowDBNull = false;
                this.column序号.ReadOnly = true;
                this.column序号.Unique = true;
                this.column父级编号.AllowDBNull = false;
                this.column供应商负责人.MaxLength = 50;
                this.column零件名称.AllowDBNull = false;
                this.column零件名称.MaxLength = 50;
                this.column图形型号.AllowDBNull = false;
                this.column图形型号.MaxLength = 50;
                this.column规格.MaxLength = 50;
                this.column问题描述.AllowDBNull = false;
                this.column问题描述.MaxLength = 2000;
                this.column解决方案.MaxLength = 2000;
                this.column发现时间.AllowDBNull = false;
                this.column进行状态.MaxLength = 50;
                this.column备注.MaxLength = 800;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_CCAR_QuestionTrackListRow NewView_CCAR_QuestionTrackListRow() {
                return ((View_CCAR_QuestionTrackListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View_CCAR_QuestionTrackListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View_CCAR_QuestionTrackListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View_CCAR_QuestionTrackListRowChanged != null)) {
                    this.View_CCAR_QuestionTrackListRowChanged(this, new View_CCAR_QuestionTrackListRowChangeEvent(((View_CCAR_QuestionTrackListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View_CCAR_QuestionTrackListRowChanging != null)) {
                    this.View_CCAR_QuestionTrackListRowChanging(this, new View_CCAR_QuestionTrackListRowChangeEvent(((View_CCAR_QuestionTrackListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View_CCAR_QuestionTrackListRowDeleted != null)) {
                    this.View_CCAR_QuestionTrackListRowDeleted(this, new View_CCAR_QuestionTrackListRowChangeEvent(((View_CCAR_QuestionTrackListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View_CCAR_QuestionTrackListRowDeleting != null)) {
                    this.View_CCAR_QuestionTrackListRowDeleting(this, new View_CCAR_QuestionTrackListRowChangeEvent(((View_CCAR_QuestionTrackListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView_CCAR_QuestionTrackListRow(View_CCAR_QuestionTrackListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View_CCAR_QuestionTrackListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View_OF_LoginLogDataTable : global::System.Data.TypedTableBase<View_OF_LoginLogRow> {
            
            private global::System.Data.DataColumn column序号;
            
            private global::System.Data.DataColumn column用户编码;
            
            private global::System.Data.DataColumn column用户姓名;
            
            private global::System.Data.DataColumn column最近登录日期;
            
            private global::System.Data.DataColumn column登录IP地址;
            
            private global::System.Data.DataColumn column登录次数;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_LoginLogDataTable() {
                this.TableName = "View_OF_LoginLog";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_OF_LoginLogDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View_OF_LoginLogDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 序号Column {
                get {
                    return this.column序号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 用户编码Column {
                get {
                    return this.column用户编码;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 用户姓名Column {
                get {
                    return this.column用户姓名;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 最近登录日期Column {
                get {
                    return this.column最近登录日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 登录IP地址Column {
                get {
                    return this.column登录IP地址;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 登录次数Column {
                get {
                    return this.column登录次数;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_LoginLogRow this[int index] {
                get {
                    return ((View_OF_LoginLogRow)(this.Rows[index]));
                }
            }
            
            public event View_OF_LoginLogRowChangeEventHandler View_OF_LoginLogRowChanging;
            
            public event View_OF_LoginLogRowChangeEventHandler View_OF_LoginLogRowChanged;
            
            public event View_OF_LoginLogRowChangeEventHandler View_OF_LoginLogRowDeleting;
            
            public event View_OF_LoginLogRowChangeEventHandler View_OF_LoginLogRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView_OF_LoginLogRow(View_OF_LoginLogRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_LoginLogRow AddView_OF_LoginLogRow(string 用户编码, string 用户姓名, System.DateTime 最近登录日期, string 登录IP地址, int 登录次数) {
                View_OF_LoginLogRow rowView_OF_LoginLogRow = ((View_OF_LoginLogRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        用户编码,
                        用户姓名,
                        最近登录日期,
                        登录IP地址,
                        登录次数};
                rowView_OF_LoginLogRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowView_OF_LoginLogRow);
                return rowView_OF_LoginLogRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_LoginLogRow FindBy序号(int 序号) {
                return ((View_OF_LoginLogRow)(this.Rows.Find(new object[] {
                            序号})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View_OF_LoginLogDataTable cln = ((View_OF_LoginLogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View_OF_LoginLogDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column序号 = base.Columns["序号"];
                this.column用户编码 = base.Columns["用户编码"];
                this.column用户姓名 = base.Columns["用户姓名"];
                this.column最近登录日期 = base.Columns["最近登录日期"];
                this.column登录IP地址 = base.Columns["登录IP地址"];
                this.column登录次数 = base.Columns["登录次数"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column序号 = new global::System.Data.DataColumn("序号", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column序号);
                this.column用户编码 = new global::System.Data.DataColumn("用户编码", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column用户编码);
                this.column用户姓名 = new global::System.Data.DataColumn("用户姓名", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column用户姓名);
                this.column最近登录日期 = new global::System.Data.DataColumn("最近登录日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column最近登录日期);
                this.column登录IP地址 = new global::System.Data.DataColumn("登录IP地址", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column登录IP地址);
                this.column登录次数 = new global::System.Data.DataColumn("登录次数", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column登录次数);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.column序号}, true));
                this.column序号.AutoIncrement = true;
                this.column序号.AutoIncrementSeed = -1;
                this.column序号.AutoIncrementStep = -1;
                this.column序号.AllowDBNull = false;
                this.column序号.ReadOnly = true;
                this.column序号.Unique = true;
                this.column用户编码.AllowDBNull = false;
                this.column用户编码.MaxLength = 50;
                this.column用户姓名.AllowDBNull = false;
                this.column用户姓名.MaxLength = 50;
                this.column最近登录日期.AllowDBNull = false;
                this.column登录IP地址.AllowDBNull = false;
                this.column登录IP地址.MaxLength = 50;
                this.column登录次数.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_LoginLogRow NewView_OF_LoginLogRow() {
                return ((View_OF_LoginLogRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View_OF_LoginLogRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View_OF_LoginLogRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View_OF_LoginLogRowChanged != null)) {
                    this.View_OF_LoginLogRowChanged(this, new View_OF_LoginLogRowChangeEvent(((View_OF_LoginLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View_OF_LoginLogRowChanging != null)) {
                    this.View_OF_LoginLogRowChanging(this, new View_OF_LoginLogRowChangeEvent(((View_OF_LoginLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View_OF_LoginLogRowDeleted != null)) {
                    this.View_OF_LoginLogRowDeleted(this, new View_OF_LoginLogRowChangeEvent(((View_OF_LoginLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View_OF_LoginLogRowDeleting != null)) {
                    this.View_OF_LoginLogRowDeleting(this, new View_OF_LoginLogRowChangeEvent(((View_OF_LoginLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView_OF_LoginLogRow(View_OF_LoginLogRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View_OF_LoginLogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View_OF_NewsDataTable : global::System.Data.TypedTableBase<View_OF_NewsRow> {
            
            private global::System.Data.DataColumn column新闻ID;
            
            private global::System.Data.DataColumn column新闻标题;
            
            private global::System.Data.DataColumn column新闻URL;
            
            private global::System.Data.DataColumn column发布时间;
            
            private global::System.Data.DataColumn column新闻类别;
            
            private global::System.Data.DataColumn column新闻类别名称;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_NewsDataTable() {
                this.TableName = "View_OF_News";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_OF_NewsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View_OF_NewsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 新闻IDColumn {
                get {
                    return this.column新闻ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 新闻标题Column {
                get {
                    return this.column新闻标题;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 新闻URLColumn {
                get {
                    return this.column新闻URL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 发布时间Column {
                get {
                    return this.column发布时间;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 新闻类别Column {
                get {
                    return this.column新闻类别;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 新闻类别名称Column {
                get {
                    return this.column新闻类别名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_NewsRow this[int index] {
                get {
                    return ((View_OF_NewsRow)(this.Rows[index]));
                }
            }
            
            public event View_OF_NewsRowChangeEventHandler View_OF_NewsRowChanging;
            
            public event View_OF_NewsRowChangeEventHandler View_OF_NewsRowChanged;
            
            public event View_OF_NewsRowChangeEventHandler View_OF_NewsRowDeleting;
            
            public event View_OF_NewsRowChangeEventHandler View_OF_NewsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView_OF_NewsRow(View_OF_NewsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_NewsRow AddView_OF_NewsRow(int 新闻ID, string 新闻标题, string 新闻URL, System.DateTime 发布时间, int 新闻类别, string 新闻类别名称) {
                View_OF_NewsRow rowView_OF_NewsRow = ((View_OF_NewsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        新闻ID,
                        新闻标题,
                        新闻URL,
                        发布时间,
                        新闻类别,
                        新闻类别名称};
                rowView_OF_NewsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowView_OF_NewsRow);
                return rowView_OF_NewsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_NewsRow FindBy新闻ID(int 新闻ID) {
                return ((View_OF_NewsRow)(this.Rows.Find(new object[] {
                            新闻ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View_OF_NewsDataTable cln = ((View_OF_NewsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View_OF_NewsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column新闻ID = base.Columns["新闻ID"];
                this.column新闻标题 = base.Columns["新闻标题"];
                this.column新闻URL = base.Columns["新闻URL"];
                this.column发布时间 = base.Columns["发布时间"];
                this.column新闻类别 = base.Columns["新闻类别"];
                this.column新闻类别名称 = base.Columns["新闻类别名称"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column新闻ID = new global::System.Data.DataColumn("新闻ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column新闻ID);
                this.column新闻标题 = new global::System.Data.DataColumn("新闻标题", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column新闻标题);
                this.column新闻URL = new global::System.Data.DataColumn("新闻URL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column新闻URL);
                this.column发布时间 = new global::System.Data.DataColumn("发布时间", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column发布时间);
                this.column新闻类别 = new global::System.Data.DataColumn("新闻类别", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column新闻类别);
                this.column新闻类别名称 = new global::System.Data.DataColumn("新闻类别名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column新闻类别名称);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.column新闻ID}, true));
                this.column新闻ID.AllowDBNull = false;
                this.column新闻ID.Unique = true;
                this.column新闻标题.AllowDBNull = false;
                this.column新闻标题.MaxLength = 150;
                this.column新闻URL.AllowDBNull = false;
                this.column新闻URL.MaxLength = 500;
                this.column发布时间.AllowDBNull = false;
                this.column新闻类别.AllowDBNull = false;
                this.column新闻类别名称.AllowDBNull = false;
                this.column新闻类别名称.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_NewsRow NewView_OF_NewsRow() {
                return ((View_OF_NewsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View_OF_NewsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View_OF_NewsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View_OF_NewsRowChanged != null)) {
                    this.View_OF_NewsRowChanged(this, new View_OF_NewsRowChangeEvent(((View_OF_NewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View_OF_NewsRowChanging != null)) {
                    this.View_OF_NewsRowChanging(this, new View_OF_NewsRowChangeEvent(((View_OF_NewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View_OF_NewsRowDeleted != null)) {
                    this.View_OF_NewsRowDeleted(this, new View_OF_NewsRowChangeEvent(((View_OF_NewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View_OF_NewsRowDeleting != null)) {
                    this.View_OF_NewsRowDeleting(this, new View_OF_NewsRowChangeEvent(((View_OF_NewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView_OF_NewsRow(View_OF_NewsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View_OF_NewsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View_OF_OrderForm_ArrivalInfoDataTable : global::System.Data.TypedTableBase<View_OF_OrderForm_ArrivalInfoRow> {
            
            private global::System.Data.DataColumn column订单物品列表ID;
            
            private global::System.Data.DataColumn column入库单号;
            
            private global::System.Data.DataColumn column批次号;
            
            private global::System.Data.DataColumn column实际到货日期;
            
            private global::System.Data.DataColumn column实际到货数;
            
            private global::System.Data.DataColumn column合格数;
            
            private global::System.Data.DataColumn column让步数;
            
            private global::System.Data.DataColumn column检验破坏数;
            
            private global::System.Data.DataColumn column退货数;
            
            private global::System.Data.DataColumn column质量信息;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_OrderForm_ArrivalInfoDataTable() {
                this.TableName = "View_OF_OrderForm_ArrivalInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_OF_OrderForm_ArrivalInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View_OF_OrderForm_ArrivalInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 订单物品列表IDColumn {
                get {
                    return this.column订单物品列表ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 入库单号Column {
                get {
                    return this.column入库单号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 批次号Column {
                get {
                    return this.column批次号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 实际到货日期Column {
                get {
                    return this.column实际到货日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 实际到货数Column {
                get {
                    return this.column实际到货数;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 合格数Column {
                get {
                    return this.column合格数;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 让步数Column {
                get {
                    return this.column让步数;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 检验破坏数Column {
                get {
                    return this.column检验破坏数;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 退货数Column {
                get {
                    return this.column退货数;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 质量信息Column {
                get {
                    return this.column质量信息;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_OrderForm_ArrivalInfoRow this[int index] {
                get {
                    return ((View_OF_OrderForm_ArrivalInfoRow)(this.Rows[index]));
                }
            }
            
            public event View_OF_OrderForm_ArrivalInfoRowChangeEventHandler View_OF_OrderForm_ArrivalInfoRowChanging;
            
            public event View_OF_OrderForm_ArrivalInfoRowChangeEventHandler View_OF_OrderForm_ArrivalInfoRowChanged;
            
            public event View_OF_OrderForm_ArrivalInfoRowChangeEventHandler View_OF_OrderForm_ArrivalInfoRowDeleting;
            
            public event View_OF_OrderForm_ArrivalInfoRowChangeEventHandler View_OF_OrderForm_ArrivalInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView_OF_OrderForm_ArrivalInfoRow(View_OF_OrderForm_ArrivalInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_OrderForm_ArrivalInfoRow AddView_OF_OrderForm_ArrivalInfoRow(int 订单物品列表ID, string 入库单号, string 批次号, System.DateTime 实际到货日期, decimal 实际到货数, decimal 合格数, decimal 让步数, decimal 检验破坏数, decimal 退货数, string 质量信息) {
                View_OF_OrderForm_ArrivalInfoRow rowView_OF_OrderForm_ArrivalInfoRow = ((View_OF_OrderForm_ArrivalInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        订单物品列表ID,
                        入库单号,
                        批次号,
                        实际到货日期,
                        实际到货数,
                        合格数,
                        让步数,
                        检验破坏数,
                        退货数,
                        质量信息};
                rowView_OF_OrderForm_ArrivalInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowView_OF_OrderForm_ArrivalInfoRow);
                return rowView_OF_OrderForm_ArrivalInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View_OF_OrderForm_ArrivalInfoDataTable cln = ((View_OF_OrderForm_ArrivalInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View_OF_OrderForm_ArrivalInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column订单物品列表ID = base.Columns["订单物品列表ID"];
                this.column入库单号 = base.Columns["入库单号"];
                this.column批次号 = base.Columns["批次号"];
                this.column实际到货日期 = base.Columns["实际到货日期"];
                this.column实际到货数 = base.Columns["实际到货数"];
                this.column合格数 = base.Columns["合格数"];
                this.column让步数 = base.Columns["让步数"];
                this.column检验破坏数 = base.Columns["检验破坏数"];
                this.column退货数 = base.Columns["退货数"];
                this.column质量信息 = base.Columns["质量信息"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column订单物品列表ID = new global::System.Data.DataColumn("订单物品列表ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column订单物品列表ID);
                this.column入库单号 = new global::System.Data.DataColumn("入库单号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column入库单号);
                this.column批次号 = new global::System.Data.DataColumn("批次号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column批次号);
                this.column实际到货日期 = new global::System.Data.DataColumn("实际到货日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column实际到货日期);
                this.column实际到货数 = new global::System.Data.DataColumn("实际到货数", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column实际到货数);
                this.column合格数 = new global::System.Data.DataColumn("合格数", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column合格数);
                this.column让步数 = new global::System.Data.DataColumn("让步数", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column让步数);
                this.column检验破坏数 = new global::System.Data.DataColumn("检验破坏数", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column检验破坏数);
                this.column退货数 = new global::System.Data.DataColumn("退货数", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column退货数);
                this.column质量信息 = new global::System.Data.DataColumn("质量信息", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column质量信息);
                this.column订单物品列表ID.AllowDBNull = false;
                this.column入库单号.AllowDBNull = false;
                this.column入库单号.MaxLength = 50;
                this.column批次号.AllowDBNull = false;
                this.column批次号.MaxLength = 50;
                this.column实际到货日期.AllowDBNull = false;
                this.column实际到货数.AllowDBNull = false;
                this.column合格数.AllowDBNull = false;
                this.column让步数.AllowDBNull = false;
                this.column检验破坏数.AllowDBNull = false;
                this.column退货数.AllowDBNull = false;
                this.column质量信息.AllowDBNull = false;
                this.column质量信息.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_OrderForm_ArrivalInfoRow NewView_OF_OrderForm_ArrivalInfoRow() {
                return ((View_OF_OrderForm_ArrivalInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View_OF_OrderForm_ArrivalInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View_OF_OrderForm_ArrivalInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View_OF_OrderForm_ArrivalInfoRowChanged != null)) {
                    this.View_OF_OrderForm_ArrivalInfoRowChanged(this, new View_OF_OrderForm_ArrivalInfoRowChangeEvent(((View_OF_OrderForm_ArrivalInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View_OF_OrderForm_ArrivalInfoRowChanging != null)) {
                    this.View_OF_OrderForm_ArrivalInfoRowChanging(this, new View_OF_OrderForm_ArrivalInfoRowChangeEvent(((View_OF_OrderForm_ArrivalInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View_OF_OrderForm_ArrivalInfoRowDeleted != null)) {
                    this.View_OF_OrderForm_ArrivalInfoRowDeleted(this, new View_OF_OrderForm_ArrivalInfoRowChangeEvent(((View_OF_OrderForm_ArrivalInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View_OF_OrderForm_ArrivalInfoRowDeleting != null)) {
                    this.View_OF_OrderForm_ArrivalInfoRowDeleting(this, new View_OF_OrderForm_ArrivalInfoRowChangeEvent(((View_OF_OrderForm_ArrivalInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView_OF_OrderForm_ArrivalInfoRow(View_OF_OrderForm_ArrivalInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View_OF_OrderForm_ArrivalInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View_OF_OrderForm_IntegratedArrivalInfoDataTable : global::System.Data.TypedTableBase<View_OF_OrderForm_IntegratedArrivalInfoRow> {
            
            private global::System.Data.DataColumn column订单号;
            
            private global::System.Data.DataColumn column图号型号;
            
            private global::System.Data.DataColumn column物品名称;
            
            private global::System.Data.DataColumn column规格;
            
            private global::System.Data.DataColumn column要求到货日期;
            
            private global::System.Data.DataColumn column订货数量;
            
            private global::System.Data.DataColumn column入库单号;
            
            private global::System.Data.DataColumn column批次号;
            
            private global::System.Data.DataColumn column实际到货日期;
            
            private global::System.Data.DataColumn column实际到货数;
            
            private global::System.Data.DataColumn column合格数;
            
            private global::System.Data.DataColumn column让步数;
            
            private global::System.Data.DataColumn column检验破坏数;
            
            private global::System.Data.DataColumn column退货数;
            
            private global::System.Data.DataColumn column质量信息;
            
            private global::System.Data.DataColumn column供货单位;
            
            private global::System.Data.DataColumn column采购员;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_OrderForm_IntegratedArrivalInfoDataTable() {
                this.TableName = "View_OF_OrderForm_IntegratedArrivalInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_OF_OrderForm_IntegratedArrivalInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View_OF_OrderForm_IntegratedArrivalInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 订单号Column {
                get {
                    return this.column订单号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 图号型号Column {
                get {
                    return this.column图号型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 物品名称Column {
                get {
                    return this.column物品名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 规格Column {
                get {
                    return this.column规格;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 要求到货日期Column {
                get {
                    return this.column要求到货日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 订货数量Column {
                get {
                    return this.column订货数量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 入库单号Column {
                get {
                    return this.column入库单号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 批次号Column {
                get {
                    return this.column批次号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 实际到货日期Column {
                get {
                    return this.column实际到货日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 实际到货数Column {
                get {
                    return this.column实际到货数;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 合格数Column {
                get {
                    return this.column合格数;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 让步数Column {
                get {
                    return this.column让步数;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 检验破坏数Column {
                get {
                    return this.column检验破坏数;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 退货数Column {
                get {
                    return this.column退货数;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 质量信息Column {
                get {
                    return this.column质量信息;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 供货单位Column {
                get {
                    return this.column供货单位;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 采购员Column {
                get {
                    return this.column采购员;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_OrderForm_IntegratedArrivalInfoRow this[int index] {
                get {
                    return ((View_OF_OrderForm_IntegratedArrivalInfoRow)(this.Rows[index]));
                }
            }
            
            public event View_OF_OrderForm_IntegratedArrivalInfoRowChangeEventHandler View_OF_OrderForm_IntegratedArrivalInfoRowChanging;
            
            public event View_OF_OrderForm_IntegratedArrivalInfoRowChangeEventHandler View_OF_OrderForm_IntegratedArrivalInfoRowChanged;
            
            public event View_OF_OrderForm_IntegratedArrivalInfoRowChangeEventHandler View_OF_OrderForm_IntegratedArrivalInfoRowDeleting;
            
            public event View_OF_OrderForm_IntegratedArrivalInfoRowChangeEventHandler View_OF_OrderForm_IntegratedArrivalInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView_OF_OrderForm_IntegratedArrivalInfoRow(View_OF_OrderForm_IntegratedArrivalInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_OrderForm_IntegratedArrivalInfoRow AddView_OF_OrderForm_IntegratedArrivalInfoRow(
                        string 订单号, 
                        string 图号型号, 
                        string 物品名称, 
                        string 规格, 
                        System.DateTime 要求到货日期, 
                        decimal 订货数量, 
                        string 入库单号, 
                        string 批次号, 
                        System.DateTime 实际到货日期, 
                        decimal 实际到货数, 
                        decimal 合格数, 
                        decimal 让步数, 
                        decimal 检验破坏数, 
                        decimal 退货数, 
                        string 质量信息, 
                        string 供货单位, 
                        string 采购员) {
                View_OF_OrderForm_IntegratedArrivalInfoRow rowView_OF_OrderForm_IntegratedArrivalInfoRow = ((View_OF_OrderForm_IntegratedArrivalInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        订单号,
                        图号型号,
                        物品名称,
                        规格,
                        要求到货日期,
                        订货数量,
                        入库单号,
                        批次号,
                        实际到货日期,
                        实际到货数,
                        合格数,
                        让步数,
                        检验破坏数,
                        退货数,
                        质量信息,
                        供货单位,
                        采购员};
                rowView_OF_OrderForm_IntegratedArrivalInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowView_OF_OrderForm_IntegratedArrivalInfoRow);
                return rowView_OF_OrderForm_IntegratedArrivalInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View_OF_OrderForm_IntegratedArrivalInfoDataTable cln = ((View_OF_OrderForm_IntegratedArrivalInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View_OF_OrderForm_IntegratedArrivalInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column订单号 = base.Columns["订单号"];
                this.column图号型号 = base.Columns["图号型号"];
                this.column物品名称 = base.Columns["物品名称"];
                this.column规格 = base.Columns["规格"];
                this.column要求到货日期 = base.Columns["要求到货日期"];
                this.column订货数量 = base.Columns["订货数量"];
                this.column入库单号 = base.Columns["入库单号"];
                this.column批次号 = base.Columns["批次号"];
                this.column实际到货日期 = base.Columns["实际到货日期"];
                this.column实际到货数 = base.Columns["实际到货数"];
                this.column合格数 = base.Columns["合格数"];
                this.column让步数 = base.Columns["让步数"];
                this.column检验破坏数 = base.Columns["检验破坏数"];
                this.column退货数 = base.Columns["退货数"];
                this.column质量信息 = base.Columns["质量信息"];
                this.column供货单位 = base.Columns["供货单位"];
                this.column采购员 = base.Columns["采购员"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column订单号 = new global::System.Data.DataColumn("订单号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column订单号);
                this.column图号型号 = new global::System.Data.DataColumn("图号型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column图号型号);
                this.column物品名称 = new global::System.Data.DataColumn("物品名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column物品名称);
                this.column规格 = new global::System.Data.DataColumn("规格", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column规格);
                this.column要求到货日期 = new global::System.Data.DataColumn("要求到货日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column要求到货日期);
                this.column订货数量 = new global::System.Data.DataColumn("订货数量", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column订货数量);
                this.column入库单号 = new global::System.Data.DataColumn("入库单号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column入库单号);
                this.column批次号 = new global::System.Data.DataColumn("批次号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column批次号);
                this.column实际到货日期 = new global::System.Data.DataColumn("实际到货日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column实际到货日期);
                this.column实际到货数 = new global::System.Data.DataColumn("实际到货数", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column实际到货数);
                this.column合格数 = new global::System.Data.DataColumn("合格数", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column合格数);
                this.column让步数 = new global::System.Data.DataColumn("让步数", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column让步数);
                this.column检验破坏数 = new global::System.Data.DataColumn("检验破坏数", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column检验破坏数);
                this.column退货数 = new global::System.Data.DataColumn("退货数", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column退货数);
                this.column质量信息 = new global::System.Data.DataColumn("质量信息", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column质量信息);
                this.column供货单位 = new global::System.Data.DataColumn("供货单位", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column供货单位);
                this.column采购员 = new global::System.Data.DataColumn("采购员", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column采购员);
                this.column订单号.AllowDBNull = false;
                this.column订单号.MaxLength = 50;
                this.column图号型号.AllowDBNull = false;
                this.column图号型号.MaxLength = 50;
                this.column物品名称.AllowDBNull = false;
                this.column物品名称.MaxLength = 50;
                this.column规格.AllowDBNull = false;
                this.column规格.MaxLength = 50;
                this.column要求到货日期.AllowDBNull = false;
                this.column订货数量.AllowDBNull = false;
                this.column入库单号.AllowDBNull = false;
                this.column入库单号.MaxLength = 50;
                this.column批次号.AllowDBNull = false;
                this.column批次号.MaxLength = 50;
                this.column实际到货日期.AllowDBNull = false;
                this.column实际到货数.AllowDBNull = false;
                this.column合格数.AllowDBNull = false;
                this.column让步数.AllowDBNull = false;
                this.column检验破坏数.AllowDBNull = false;
                this.column退货数.AllowDBNull = false;
                this.column质量信息.AllowDBNull = false;
                this.column质量信息.MaxLength = 2147483647;
                this.column供货单位.MaxLength = 50;
                this.column采购员.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_OrderForm_IntegratedArrivalInfoRow NewView_OF_OrderForm_IntegratedArrivalInfoRow() {
                return ((View_OF_OrderForm_IntegratedArrivalInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View_OF_OrderForm_IntegratedArrivalInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View_OF_OrderForm_IntegratedArrivalInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View_OF_OrderForm_IntegratedArrivalInfoRowChanged != null)) {
                    this.View_OF_OrderForm_IntegratedArrivalInfoRowChanged(this, new View_OF_OrderForm_IntegratedArrivalInfoRowChangeEvent(((View_OF_OrderForm_IntegratedArrivalInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View_OF_OrderForm_IntegratedArrivalInfoRowChanging != null)) {
                    this.View_OF_OrderForm_IntegratedArrivalInfoRowChanging(this, new View_OF_OrderForm_IntegratedArrivalInfoRowChangeEvent(((View_OF_OrderForm_IntegratedArrivalInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View_OF_OrderForm_IntegratedArrivalInfoRowDeleted != null)) {
                    this.View_OF_OrderForm_IntegratedArrivalInfoRowDeleted(this, new View_OF_OrderForm_IntegratedArrivalInfoRowChangeEvent(((View_OF_OrderForm_IntegratedArrivalInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View_OF_OrderForm_IntegratedArrivalInfoRowDeleting != null)) {
                    this.View_OF_OrderForm_IntegratedArrivalInfoRowDeleting(this, new View_OF_OrderForm_IntegratedArrivalInfoRowChangeEvent(((View_OF_OrderForm_IntegratedArrivalInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView_OF_OrderForm_IntegratedArrivalInfoRow(View_OF_OrderForm_IntegratedArrivalInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View_OF_OrderForm_IntegratedArrivalInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View_OF_OrderFormInfoDataTable : global::System.Data.TypedTableBase<View_OF_OrderFormInfoRow> {
            
            private global::System.Data.DataColumn column订单号;
            
            private global::System.Data.DataColumn column供应商;
            
            private global::System.Data.DataColumn column确认订单;
            
            private global::System.Data.DataColumn column供应商处理状态;
            
            private global::System.Data.DataColumn column物品列表ID;
            
            private global::System.Data.DataColumn column图号型号;
            
            private global::System.Data.DataColumn column物品名称;
            
            private global::System.Data.DataColumn column规格;
            
            private global::System.Data.DataColumn column订货数量;
            
            private global::System.Data.DataColumn column要求到货日期;
            
            private global::System.Data.DataColumn column入库数;
            
            private global::System.Data.DataColumn column让步数;
            
            private global::System.Data.DataColumn column退货数;
            
            private global::System.Data.DataColumn column检验破坏数;
            
            private global::System.Data.DataColumn column订货人编号;
            
            private global::System.Data.DataColumn column订货人;
            
            private global::System.Data.DataColumn column创建日期;
            
            private global::System.Data.DataColumn column供应商联系人;
            
            private global::System.Data.DataColumn column供应商联系方式;
            
            private global::System.Data.DataColumn column备注;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_OrderFormInfoDataTable() {
                this.TableName = "View_OF_OrderFormInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_OF_OrderFormInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View_OF_OrderFormInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 订单号Column {
                get {
                    return this.column订单号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 供应商Column {
                get {
                    return this.column供应商;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 确认订单Column {
                get {
                    return this.column确认订单;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 供应商处理状态Column {
                get {
                    return this.column供应商处理状态;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 物品列表IDColumn {
                get {
                    return this.column物品列表ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 图号型号Column {
                get {
                    return this.column图号型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 物品名称Column {
                get {
                    return this.column物品名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 规格Column {
                get {
                    return this.column规格;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 订货数量Column {
                get {
                    return this.column订货数量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 要求到货日期Column {
                get {
                    return this.column要求到货日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 入库数Column {
                get {
                    return this.column入库数;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 让步数Column {
                get {
                    return this.column让步数;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 退货数Column {
                get {
                    return this.column退货数;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 检验破坏数Column {
                get {
                    return this.column检验破坏数;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 订货人编号Column {
                get {
                    return this.column订货人编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 订货人Column {
                get {
                    return this.column订货人;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 创建日期Column {
                get {
                    return this.column创建日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 供应商联系人Column {
                get {
                    return this.column供应商联系人;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 供应商联系方式Column {
                get {
                    return this.column供应商联系方式;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 备注Column {
                get {
                    return this.column备注;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_OrderFormInfoRow this[int index] {
                get {
                    return ((View_OF_OrderFormInfoRow)(this.Rows[index]));
                }
            }
            
            public event View_OF_OrderFormInfoRowChangeEventHandler View_OF_OrderFormInfoRowChanging;
            
            public event View_OF_OrderFormInfoRowChangeEventHandler View_OF_OrderFormInfoRowChanged;
            
            public event View_OF_OrderFormInfoRowChangeEventHandler View_OF_OrderFormInfoRowDeleting;
            
            public event View_OF_OrderFormInfoRowChangeEventHandler View_OF_OrderFormInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView_OF_OrderFormInfoRow(View_OF_OrderFormInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_OrderFormInfoRow AddView_OF_OrderFormInfoRow(
                        string 订单号, 
                        string 供应商, 
                        bool 确认订单, 
                        string 供应商处理状态, 
                        int 物品列表ID, 
                        string 图号型号, 
                        string 物品名称, 
                        string 规格, 
                        decimal 订货数量, 
                        System.DateTime 要求到货日期, 
                        decimal 入库数, 
                        decimal 让步数, 
                        decimal 退货数, 
                        decimal 检验破坏数, 
                        string 订货人编号, 
                        string 订货人, 
                        System.DateTime 创建日期, 
                        string 供应商联系人, 
                        string 供应商联系方式, 
                        string 备注) {
                View_OF_OrderFormInfoRow rowView_OF_OrderFormInfoRow = ((View_OF_OrderFormInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        订单号,
                        供应商,
                        确认订单,
                        供应商处理状态,
                        物品列表ID,
                        图号型号,
                        物品名称,
                        规格,
                        订货数量,
                        要求到货日期,
                        入库数,
                        让步数,
                        退货数,
                        检验破坏数,
                        订货人编号,
                        订货人,
                        创建日期,
                        供应商联系人,
                        供应商联系方式,
                        备注};
                rowView_OF_OrderFormInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowView_OF_OrderFormInfoRow);
                return rowView_OF_OrderFormInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_OrderFormInfoRow FindBy订单号物品列表ID(string 订单号, int 物品列表ID) {
                return ((View_OF_OrderFormInfoRow)(this.Rows.Find(new object[] {
                            订单号,
                            物品列表ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View_OF_OrderFormInfoDataTable cln = ((View_OF_OrderFormInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View_OF_OrderFormInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column订单号 = base.Columns["订单号"];
                this.column供应商 = base.Columns["供应商"];
                this.column确认订单 = base.Columns["确认订单"];
                this.column供应商处理状态 = base.Columns["供应商处理状态"];
                this.column物品列表ID = base.Columns["物品列表ID"];
                this.column图号型号 = base.Columns["图号型号"];
                this.column物品名称 = base.Columns["物品名称"];
                this.column规格 = base.Columns["规格"];
                this.column订货数量 = base.Columns["订货数量"];
                this.column要求到货日期 = base.Columns["要求到货日期"];
                this.column入库数 = base.Columns["入库数"];
                this.column让步数 = base.Columns["让步数"];
                this.column退货数 = base.Columns["退货数"];
                this.column检验破坏数 = base.Columns["检验破坏数"];
                this.column订货人编号 = base.Columns["订货人编号"];
                this.column订货人 = base.Columns["订货人"];
                this.column创建日期 = base.Columns["创建日期"];
                this.column供应商联系人 = base.Columns["供应商联系人"];
                this.column供应商联系方式 = base.Columns["供应商联系方式"];
                this.column备注 = base.Columns["备注"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column订单号 = new global::System.Data.DataColumn("订单号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column订单号);
                this.column供应商 = new global::System.Data.DataColumn("供应商", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column供应商);
                this.column确认订单 = new global::System.Data.DataColumn("确认订单", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column确认订单);
                this.column供应商处理状态 = new global::System.Data.DataColumn("供应商处理状态", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column供应商处理状态);
                this.column物品列表ID = new global::System.Data.DataColumn("物品列表ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column物品列表ID);
                this.column图号型号 = new global::System.Data.DataColumn("图号型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column图号型号);
                this.column物品名称 = new global::System.Data.DataColumn("物品名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column物品名称);
                this.column规格 = new global::System.Data.DataColumn("规格", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column规格);
                this.column订货数量 = new global::System.Data.DataColumn("订货数量", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column订货数量);
                this.column要求到货日期 = new global::System.Data.DataColumn("要求到货日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column要求到货日期);
                this.column入库数 = new global::System.Data.DataColumn("入库数", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column入库数);
                this.column让步数 = new global::System.Data.DataColumn("让步数", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column让步数);
                this.column退货数 = new global::System.Data.DataColumn("退货数", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column退货数);
                this.column检验破坏数 = new global::System.Data.DataColumn("检验破坏数", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column检验破坏数);
                this.column订货人编号 = new global::System.Data.DataColumn("订货人编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column订货人编号);
                this.column订货人 = new global::System.Data.DataColumn("订货人", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column订货人);
                this.column创建日期 = new global::System.Data.DataColumn("创建日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column创建日期);
                this.column供应商联系人 = new global::System.Data.DataColumn("供应商联系人", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column供应商联系人);
                this.column供应商联系方式 = new global::System.Data.DataColumn("供应商联系方式", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column供应商联系方式);
                this.column备注 = new global::System.Data.DataColumn("备注", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column备注);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.column订单号,
                                this.column物品列表ID}, true));
                this.column订单号.AllowDBNull = false;
                this.column订单号.MaxLength = 50;
                this.column供应商.MaxLength = 50;
                this.column确认订单.AllowDBNull = false;
                this.column供应商处理状态.AllowDBNull = false;
                this.column供应商处理状态.MaxLength = 50;
                this.column物品列表ID.AllowDBNull = false;
                this.column图号型号.AllowDBNull = false;
                this.column图号型号.MaxLength = 50;
                this.column物品名称.AllowDBNull = false;
                this.column物品名称.MaxLength = 50;
                this.column规格.AllowDBNull = false;
                this.column规格.MaxLength = 50;
                this.column订货数量.AllowDBNull = false;
                this.column要求到货日期.AllowDBNull = false;
                this.column入库数.ReadOnly = true;
                this.column让步数.ReadOnly = true;
                this.column退货数.ReadOnly = true;
                this.column检验破坏数.ReadOnly = true;
                this.column订货人编号.MaxLength = 50;
                this.column订货人.MaxLength = 50;
                this.column供应商联系人.MaxLength = 50;
                this.column供应商联系方式.MaxLength = 50;
                this.column备注.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_OrderFormInfoRow NewView_OF_OrderFormInfoRow() {
                return ((View_OF_OrderFormInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View_OF_OrderFormInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View_OF_OrderFormInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View_OF_OrderFormInfoRowChanged != null)) {
                    this.View_OF_OrderFormInfoRowChanged(this, new View_OF_OrderFormInfoRowChangeEvent(((View_OF_OrderFormInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View_OF_OrderFormInfoRowChanging != null)) {
                    this.View_OF_OrderFormInfoRowChanging(this, new View_OF_OrderFormInfoRowChangeEvent(((View_OF_OrderFormInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View_OF_OrderFormInfoRowDeleted != null)) {
                    this.View_OF_OrderFormInfoRowDeleted(this, new View_OF_OrderFormInfoRowChangeEvent(((View_OF_OrderFormInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View_OF_OrderFormInfoRowDeleting != null)) {
                    this.View_OF_OrderFormInfoRowDeleting(this, new View_OF_OrderFormInfoRowChangeEvent(((View_OF_OrderFormInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView_OF_OrderFormInfoRow(View_OF_OrderFormInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View_OF_OrderFormInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View_S_AfterServiceDataTable : global::System.Data.TypedTableBase<View_S_AfterServiceRow> {
            
            private global::System.Data.DataColumn column序号;
            
            private global::System.Data.DataColumn column单据号;
            
            private global::System.Data.DataColumn column单据状态;
            
            private global::System.Data.DataColumn column信息来源;
            
            private global::System.Data.DataColumn column函电类别;
            
            private global::System.Data.DataColumn column内容类别;
            
            private global::System.Data.DataColumn column接函电人;
            
            private global::System.Data.DataColumn column接函电时间;
            
            private global::System.Data.DataColumn column服务站名称;
            
            private global::System.Data.DataColumn column联系电话;
            
            private global::System.Data.DataColumn column用户姓名;
            
            private global::System.Data.DataColumn column用户电话;
            
            private global::System.Data.DataColumn column用户住址;
            
            private global::System.Data.DataColumn column车型;
            
            private global::System.Data.DataColumn column变速箱型号;
            
            private global::System.Data.DataColumn column变速箱编号;
            
            private global::System.Data.DataColumn column车架号;
            
            private global::System.Data.DataColumn column故障地点;
            
            private global::System.Data.DataColumn column购车时间;
            
            private global::System.Data.DataColumn column行驶里程;
            
            private global::System.Data.DataColumn column使用性质;
            
            private global::System.Data.DataColumn column用户态度;
            
            private global::System.Data.DataColumn column故障简叙;
            
            private global::System.Data.DataColumn column客服中心处理意见;
            
            private global::System.Data.DataColumn column处理方式;
            
            private global::System.Data.DataColumn column接单处理人;
            
            private global::System.Data.DataColumn column接单时间;
            
            private global::System.Data.DataColumn column诊断及测试情况;
            
            private global::System.Data.DataColumn column处理方案;
            
            private global::System.Data.DataColumn column处理结果;
            
            private global::System.Data.DataColumn column审核人;
            
            private global::System.Data.DataColumn column审核回访时间;
            
            private global::System.Data.DataColumn column维修质量;
            
            private global::System.Data.DataColumn column服务态度;
            
            private global::System.Data.DataColumn column是否收费;
            
            private global::System.Data.DataColumn column金额;
            
            private global::System.Data.DataColumn column故障处理效果确认;
            
            private global::System.Data.DataColumn column回访人;
            
            private global::System.Data.DataColumn column回访时间;
            
            private global::System.Data.DataColumn column反馈单号;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_S_AfterServiceDataTable() {
                this.TableName = "View_S_AfterService";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_S_AfterServiceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View_S_AfterServiceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 序号Column {
                get {
                    return this.column序号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 单据号Column {
                get {
                    return this.column单据号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 单据状态Column {
                get {
                    return this.column单据状态;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 信息来源Column {
                get {
                    return this.column信息来源;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 函电类别Column {
                get {
                    return this.column函电类别;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 内容类别Column {
                get {
                    return this.column内容类别;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 接函电人Column {
                get {
                    return this.column接函电人;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 接函电时间Column {
                get {
                    return this.column接函电时间;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 服务站名称Column {
                get {
                    return this.column服务站名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 联系电话Column {
                get {
                    return this.column联系电话;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 用户姓名Column {
                get {
                    return this.column用户姓名;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 用户电话Column {
                get {
                    return this.column用户电话;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 用户住址Column {
                get {
                    return this.column用户住址;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 车型Column {
                get {
                    return this.column车型;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 变速箱型号Column {
                get {
                    return this.column变速箱型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 变速箱编号Column {
                get {
                    return this.column变速箱编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 车架号Column {
                get {
                    return this.column车架号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 故障地点Column {
                get {
                    return this.column故障地点;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 购车时间Column {
                get {
                    return this.column购车时间;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 行驶里程Column {
                get {
                    return this.column行驶里程;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 使用性质Column {
                get {
                    return this.column使用性质;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 用户态度Column {
                get {
                    return this.column用户态度;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 故障简叙Column {
                get {
                    return this.column故障简叙;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 客服中心处理意见Column {
                get {
                    return this.column客服中心处理意见;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 处理方式Column {
                get {
                    return this.column处理方式;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 接单处理人Column {
                get {
                    return this.column接单处理人;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 接单时间Column {
                get {
                    return this.column接单时间;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 诊断及测试情况Column {
                get {
                    return this.column诊断及测试情况;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 处理方案Column {
                get {
                    return this.column处理方案;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 处理结果Column {
                get {
                    return this.column处理结果;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 审核人Column {
                get {
                    return this.column审核人;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 审核回访时间Column {
                get {
                    return this.column审核回访时间;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 维修质量Column {
                get {
                    return this.column维修质量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 服务态度Column {
                get {
                    return this.column服务态度;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 是否收费Column {
                get {
                    return this.column是否收费;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 金额Column {
                get {
                    return this.column金额;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 故障处理效果确认Column {
                get {
                    return this.column故障处理效果确认;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 回访人Column {
                get {
                    return this.column回访人;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 回访时间Column {
                get {
                    return this.column回访时间;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 反馈单号Column {
                get {
                    return this.column反馈单号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_S_AfterServiceRow this[int index] {
                get {
                    return ((View_S_AfterServiceRow)(this.Rows[index]));
                }
            }
            
            public event View_S_AfterServiceRowChangeEventHandler View_S_AfterServiceRowChanging;
            
            public event View_S_AfterServiceRowChangeEventHandler View_S_AfterServiceRowChanged;
            
            public event View_S_AfterServiceRowChangeEventHandler View_S_AfterServiceRowDeleting;
            
            public event View_S_AfterServiceRowChangeEventHandler View_S_AfterServiceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView_S_AfterServiceRow(View_S_AfterServiceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_S_AfterServiceRow AddView_S_AfterServiceRow(
                        string 单据号, 
                        string 单据状态, 
                        string 信息来源, 
                        string 函电类别, 
                        string 内容类别, 
                        string 接函电人, 
                        System.DateTime 接函电时间, 
                        string 服务站名称, 
                        string 联系电话, 
                        string 用户姓名, 
                        string 用户电话, 
                        string 用户住址, 
                        string 车型, 
                        string 变速箱型号, 
                        string 变速箱编号, 
                        string 车架号, 
                        string 故障地点, 
                        string 购车时间, 
                        string 行驶里程, 
                        string 使用性质, 
                        string 用户态度, 
                        string 故障简叙, 
                        string 客服中心处理意见, 
                        string 处理方式, 
                        string 接单处理人, 
                        System.DateTime 接单时间, 
                        string 诊断及测试情况, 
                        string 处理方案, 
                        string 处理结果, 
                        string 审核人, 
                        System.DateTime 审核回访时间, 
                        string 维修质量, 
                        string 服务态度, 
                        string 是否收费, 
                        decimal 金额, 
                        string 故障处理效果确认, 
                        string 回访人, 
                        System.DateTime 回访时间, 
                        string 反馈单号) {
                View_S_AfterServiceRow rowView_S_AfterServiceRow = ((View_S_AfterServiceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        单据号,
                        单据状态,
                        信息来源,
                        函电类别,
                        内容类别,
                        接函电人,
                        接函电时间,
                        服务站名称,
                        联系电话,
                        用户姓名,
                        用户电话,
                        用户住址,
                        车型,
                        变速箱型号,
                        变速箱编号,
                        车架号,
                        故障地点,
                        购车时间,
                        行驶里程,
                        使用性质,
                        用户态度,
                        故障简叙,
                        客服中心处理意见,
                        处理方式,
                        接单处理人,
                        接单时间,
                        诊断及测试情况,
                        处理方案,
                        处理结果,
                        审核人,
                        审核回访时间,
                        维修质量,
                        服务态度,
                        是否收费,
                        金额,
                        故障处理效果确认,
                        回访人,
                        回访时间,
                        反馈单号};
                rowView_S_AfterServiceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowView_S_AfterServiceRow);
                return rowView_S_AfterServiceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_S_AfterServiceRow FindBy序号(int 序号) {
                return ((View_S_AfterServiceRow)(this.Rows.Find(new object[] {
                            序号})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View_S_AfterServiceDataTable cln = ((View_S_AfterServiceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View_S_AfterServiceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column序号 = base.Columns["序号"];
                this.column单据号 = base.Columns["单据号"];
                this.column单据状态 = base.Columns["单据状态"];
                this.column信息来源 = base.Columns["信息来源"];
                this.column函电类别 = base.Columns["函电类别"];
                this.column内容类别 = base.Columns["内容类别"];
                this.column接函电人 = base.Columns["接函电人"];
                this.column接函电时间 = base.Columns["接函电时间"];
                this.column服务站名称 = base.Columns["服务站名称"];
                this.column联系电话 = base.Columns["联系电话"];
                this.column用户姓名 = base.Columns["用户姓名"];
                this.column用户电话 = base.Columns["用户电话"];
                this.column用户住址 = base.Columns["用户住址"];
                this.column车型 = base.Columns["车型"];
                this.column变速箱型号 = base.Columns["变速箱型号"];
                this.column变速箱编号 = base.Columns["变速箱编号"];
                this.column车架号 = base.Columns["车架号"];
                this.column故障地点 = base.Columns["故障地点"];
                this.column购车时间 = base.Columns["购车时间"];
                this.column行驶里程 = base.Columns["行驶里程"];
                this.column使用性质 = base.Columns["使用性质"];
                this.column用户态度 = base.Columns["用户态度"];
                this.column故障简叙 = base.Columns["故障简叙"];
                this.column客服中心处理意见 = base.Columns["客服中心处理意见"];
                this.column处理方式 = base.Columns["处理方式"];
                this.column接单处理人 = base.Columns["接单处理人"];
                this.column接单时间 = base.Columns["接单时间"];
                this.column诊断及测试情况 = base.Columns["诊断及测试情况"];
                this.column处理方案 = base.Columns["处理方案"];
                this.column处理结果 = base.Columns["处理结果"];
                this.column审核人 = base.Columns["审核人"];
                this.column审核回访时间 = base.Columns["审核回访时间"];
                this.column维修质量 = base.Columns["维修质量"];
                this.column服务态度 = base.Columns["服务态度"];
                this.column是否收费 = base.Columns["是否收费"];
                this.column金额 = base.Columns["金额"];
                this.column故障处理效果确认 = base.Columns["故障处理效果确认"];
                this.column回访人 = base.Columns["回访人"];
                this.column回访时间 = base.Columns["回访时间"];
                this.column反馈单号 = base.Columns["反馈单号"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column序号 = new global::System.Data.DataColumn("序号", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column序号);
                this.column单据号 = new global::System.Data.DataColumn("单据号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column单据号);
                this.column单据状态 = new global::System.Data.DataColumn("单据状态", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column单据状态);
                this.column信息来源 = new global::System.Data.DataColumn("信息来源", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column信息来源);
                this.column函电类别 = new global::System.Data.DataColumn("函电类别", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column函电类别);
                this.column内容类别 = new global::System.Data.DataColumn("内容类别", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column内容类别);
                this.column接函电人 = new global::System.Data.DataColumn("接函电人", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column接函电人);
                this.column接函电时间 = new global::System.Data.DataColumn("接函电时间", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column接函电时间);
                this.column服务站名称 = new global::System.Data.DataColumn("服务站名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column服务站名称);
                this.column联系电话 = new global::System.Data.DataColumn("联系电话", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column联系电话);
                this.column用户姓名 = new global::System.Data.DataColumn("用户姓名", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column用户姓名);
                this.column用户电话 = new global::System.Data.DataColumn("用户电话", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column用户电话);
                this.column用户住址 = new global::System.Data.DataColumn("用户住址", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column用户住址);
                this.column车型 = new global::System.Data.DataColumn("车型", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column车型);
                this.column变速箱型号 = new global::System.Data.DataColumn("变速箱型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column变速箱型号);
                this.column变速箱编号 = new global::System.Data.DataColumn("变速箱编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column变速箱编号);
                this.column车架号 = new global::System.Data.DataColumn("车架号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column车架号);
                this.column故障地点 = new global::System.Data.DataColumn("故障地点", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column故障地点);
                this.column购车时间 = new global::System.Data.DataColumn("购车时间", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column购车时间);
                this.column行驶里程 = new global::System.Data.DataColumn("行驶里程", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column行驶里程);
                this.column使用性质 = new global::System.Data.DataColumn("使用性质", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column使用性质);
                this.column用户态度 = new global::System.Data.DataColumn("用户态度", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column用户态度);
                this.column故障简叙 = new global::System.Data.DataColumn("故障简叙", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column故障简叙);
                this.column客服中心处理意见 = new global::System.Data.DataColumn("客服中心处理意见", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column客服中心处理意见);
                this.column处理方式 = new global::System.Data.DataColumn("处理方式", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column处理方式);
                this.column接单处理人 = new global::System.Data.DataColumn("接单处理人", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column接单处理人);
                this.column接单时间 = new global::System.Data.DataColumn("接单时间", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column接单时间);
                this.column诊断及测试情况 = new global::System.Data.DataColumn("诊断及测试情况", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column诊断及测试情况);
                this.column处理方案 = new global::System.Data.DataColumn("处理方案", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column处理方案);
                this.column处理结果 = new global::System.Data.DataColumn("处理结果", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column处理结果);
                this.column审核人 = new global::System.Data.DataColumn("审核人", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column审核人);
                this.column审核回访时间 = new global::System.Data.DataColumn("审核回访时间", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column审核回访时间);
                this.column维修质量 = new global::System.Data.DataColumn("维修质量", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column维修质量);
                this.column服务态度 = new global::System.Data.DataColumn("服务态度", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column服务态度);
                this.column是否收费 = new global::System.Data.DataColumn("是否收费", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column是否收费);
                this.column金额 = new global::System.Data.DataColumn("金额", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column金额);
                this.column故障处理效果确认 = new global::System.Data.DataColumn("故障处理效果确认", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column故障处理效果确认);
                this.column回访人 = new global::System.Data.DataColumn("回访人", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column回访人);
                this.column回访时间 = new global::System.Data.DataColumn("回访时间", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column回访时间);
                this.column反馈单号 = new global::System.Data.DataColumn("反馈单号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column反馈单号);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.column序号}, true));
                this.column序号.AutoIncrement = true;
                this.column序号.AutoIncrementSeed = -1;
                this.column序号.AutoIncrementStep = -1;
                this.column序号.AllowDBNull = false;
                this.column序号.ReadOnly = true;
                this.column序号.Unique = true;
                this.column单据号.AllowDBNull = false;
                this.column单据号.MaxLength = 50;
                this.column单据状态.AllowDBNull = false;
                this.column单据状态.MaxLength = 50;
                this.column信息来源.AllowDBNull = false;
                this.column信息来源.MaxLength = 50;
                this.column函电类别.AllowDBNull = false;
                this.column函电类别.MaxLength = 50;
                this.column内容类别.AllowDBNull = false;
                this.column内容类别.MaxLength = 50;
                this.column接函电人.MaxLength = 50;
                this.column服务站名称.MaxLength = 50;
                this.column联系电话.MaxLength = 50;
                this.column用户姓名.MaxLength = 50;
                this.column用户电话.MaxLength = 50;
                this.column用户住址.MaxLength = 50;
                this.column车型.MaxLength = 50;
                this.column变速箱型号.MaxLength = 50;
                this.column变速箱编号.MaxLength = 50;
                this.column车架号.MaxLength = 50;
                this.column故障地点.MaxLength = 50;
                this.column购车时间.MaxLength = 50;
                this.column行驶里程.MaxLength = 50;
                this.column使用性质.MaxLength = 50;
                this.column用户态度.MaxLength = 50;
                this.column故障简叙.MaxLength = 1000;
                this.column客服中心处理意见.MaxLength = 200;
                this.column处理方式.MaxLength = 50;
                this.column接单处理人.MaxLength = 50;
                this.column诊断及测试情况.MaxLength = 1000;
                this.column处理方案.MaxLength = 1000;
                this.column处理结果.MaxLength = 1000;
                this.column审核人.MaxLength = 50;
                this.column维修质量.MaxLength = 50;
                this.column服务态度.MaxLength = 50;
                this.column是否收费.MaxLength = 2;
                this.column故障处理效果确认.MaxLength = 200;
                this.column回访人.MaxLength = 50;
                this.column反馈单号.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_S_AfterServiceRow NewView_S_AfterServiceRow() {
                return ((View_S_AfterServiceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View_S_AfterServiceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View_S_AfterServiceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View_S_AfterServiceRowChanged != null)) {
                    this.View_S_AfterServiceRowChanged(this, new View_S_AfterServiceRowChangeEvent(((View_S_AfterServiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View_S_AfterServiceRowChanging != null)) {
                    this.View_S_AfterServiceRowChanging(this, new View_S_AfterServiceRowChangeEvent(((View_S_AfterServiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View_S_AfterServiceRowDeleted != null)) {
                    this.View_S_AfterServiceRowDeleted(this, new View_S_AfterServiceRowChangeEvent(((View_S_AfterServiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View_S_AfterServiceRowDeleting != null)) {
                    this.View_S_AfterServiceRowDeleting(this, new View_S_AfterServiceRowChangeEvent(((View_S_AfterServiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView_S_AfterServiceRow(View_S_AfterServiceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View_S_AfterServiceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View_S_MessageSourceDataTable : global::System.Data.TypedTableBase<View_S_MessageSourceRow> {
            
            private global::System.Data.DataColumn column来源编号;
            
            private global::System.Data.DataColumn column来源;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_S_MessageSourceDataTable() {
                this.TableName = "View_S_MessageSource";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_S_MessageSourceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View_S_MessageSourceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 来源编号Column {
                get {
                    return this.column来源编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 来源Column {
                get {
                    return this.column来源;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_S_MessageSourceRow this[int index] {
                get {
                    return ((View_S_MessageSourceRow)(this.Rows[index]));
                }
            }
            
            public event View_S_MessageSourceRowChangeEventHandler View_S_MessageSourceRowChanging;
            
            public event View_S_MessageSourceRowChangeEventHandler View_S_MessageSourceRowChanged;
            
            public event View_S_MessageSourceRowChangeEventHandler View_S_MessageSourceRowDeleting;
            
            public event View_S_MessageSourceRowChangeEventHandler View_S_MessageSourceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView_S_MessageSourceRow(View_S_MessageSourceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_S_MessageSourceRow AddView_S_MessageSourceRow(string 来源编号, string 来源) {
                View_S_MessageSourceRow rowView_S_MessageSourceRow = ((View_S_MessageSourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        来源编号,
                        来源};
                rowView_S_MessageSourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowView_S_MessageSourceRow);
                return rowView_S_MessageSourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View_S_MessageSourceDataTable cln = ((View_S_MessageSourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View_S_MessageSourceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column来源编号 = base.Columns["来源编号"];
                this.column来源 = base.Columns["来源"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column来源编号 = new global::System.Data.DataColumn("来源编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column来源编号);
                this.column来源 = new global::System.Data.DataColumn("来源", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column来源);
                this.column来源编号.AllowDBNull = false;
                this.column来源编号.MaxLength = 50;
                this.column来源.AllowDBNull = false;
                this.column来源.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_S_MessageSourceRow NewView_S_MessageSourceRow() {
                return ((View_S_MessageSourceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View_S_MessageSourceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View_S_MessageSourceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View_S_MessageSourceRowChanged != null)) {
                    this.View_S_MessageSourceRowChanged(this, new View_S_MessageSourceRowChangeEvent(((View_S_MessageSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View_S_MessageSourceRowChanging != null)) {
                    this.View_S_MessageSourceRowChanging(this, new View_S_MessageSourceRowChangeEvent(((View_S_MessageSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View_S_MessageSourceRowDeleted != null)) {
                    this.View_S_MessageSourceRowDeleted(this, new View_S_MessageSourceRowChangeEvent(((View_S_MessageSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View_S_MessageSourceRowDeleting != null)) {
                    this.View_S_MessageSourceRowDeleting(this, new View_S_MessageSourceRowChangeEvent(((View_S_MessageSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView_S_MessageSourceRow(View_S_MessageSourceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View_S_MessageSourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View_S_ServiceFeedBackDataTable : global::System.Data.TypedTableBase<View_S_ServiceFeedBackRow> {
            
            private global::System.Data.DataColumn column反馈单号;
            
            private global::System.Data.DataColumn column单据状态;
            
            private global::System.Data.DataColumn column关联号;
            
            private global::System.Data.DataColumn column信息来源;
            
            private global::System.Data.DataColumn column服务站名;
            
            private global::System.Data.DataColumn column车型;
            
            private global::System.Data.DataColumn columnCVT型号;
            
            private global::System.Data.DataColumn columnCVT编号;
            
            private global::System.Data.DataColumn column车架号;
            
            private global::System.Data.DataColumn column客户姓名;
            
            private global::System.Data.DataColumn column反馈人;
            
            private global::System.Data.DataColumn column反馈日期;
            
            private global::System.Data.DataColumn column责任部门;
            
            private global::System.Data.DataColumn column责任人;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_S_ServiceFeedBackDataTable() {
                this.TableName = "View_S_ServiceFeedBack";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_S_ServiceFeedBackDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View_S_ServiceFeedBackDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 反馈单号Column {
                get {
                    return this.column反馈单号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 单据状态Column {
                get {
                    return this.column单据状态;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 关联号Column {
                get {
                    return this.column关联号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 信息来源Column {
                get {
                    return this.column信息来源;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 服务站名Column {
                get {
                    return this.column服务站名;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 车型Column {
                get {
                    return this.column车型;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CVT型号Column {
                get {
                    return this.columnCVT型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CVT编号Column {
                get {
                    return this.columnCVT编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 车架号Column {
                get {
                    return this.column车架号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 客户姓名Column {
                get {
                    return this.column客户姓名;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 反馈人Column {
                get {
                    return this.column反馈人;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 反馈日期Column {
                get {
                    return this.column反馈日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 责任部门Column {
                get {
                    return this.column责任部门;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 责任人Column {
                get {
                    return this.column责任人;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_S_ServiceFeedBackRow this[int index] {
                get {
                    return ((View_S_ServiceFeedBackRow)(this.Rows[index]));
                }
            }
            
            public event View_S_ServiceFeedBackRowChangeEventHandler View_S_ServiceFeedBackRowChanging;
            
            public event View_S_ServiceFeedBackRowChangeEventHandler View_S_ServiceFeedBackRowChanged;
            
            public event View_S_ServiceFeedBackRowChangeEventHandler View_S_ServiceFeedBackRowDeleting;
            
            public event View_S_ServiceFeedBackRowChangeEventHandler View_S_ServiceFeedBackRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView_S_ServiceFeedBackRow(View_S_ServiceFeedBackRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_S_ServiceFeedBackRow AddView_S_ServiceFeedBackRow(string 反馈单号, string 单据状态, string 关联号, string 信息来源, string 服务站名, string 车型, string CVT型号, string CVT编号, string 车架号, string 客户姓名, string 反馈人, System.DateTime 反馈日期, string 责任部门, string 责任人) {
                View_S_ServiceFeedBackRow rowView_S_ServiceFeedBackRow = ((View_S_ServiceFeedBackRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        反馈单号,
                        单据状态,
                        关联号,
                        信息来源,
                        服务站名,
                        车型,
                        CVT型号,
                        CVT编号,
                        车架号,
                        客户姓名,
                        反馈人,
                        反馈日期,
                        责任部门,
                        责任人};
                rowView_S_ServiceFeedBackRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowView_S_ServiceFeedBackRow);
                return rowView_S_ServiceFeedBackRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View_S_ServiceFeedBackDataTable cln = ((View_S_ServiceFeedBackDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View_S_ServiceFeedBackDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column反馈单号 = base.Columns["反馈单号"];
                this.column单据状态 = base.Columns["单据状态"];
                this.column关联号 = base.Columns["关联号"];
                this.column信息来源 = base.Columns["信息来源"];
                this.column服务站名 = base.Columns["服务站名"];
                this.column车型 = base.Columns["车型"];
                this.columnCVT型号 = base.Columns["CVT型号"];
                this.columnCVT编号 = base.Columns["CVT编号"];
                this.column车架号 = base.Columns["车架号"];
                this.column客户姓名 = base.Columns["客户姓名"];
                this.column反馈人 = base.Columns["反馈人"];
                this.column反馈日期 = base.Columns["反馈日期"];
                this.column责任部门 = base.Columns["责任部门"];
                this.column责任人 = base.Columns["责任人"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column反馈单号 = new global::System.Data.DataColumn("反馈单号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column反馈单号);
                this.column单据状态 = new global::System.Data.DataColumn("单据状态", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column单据状态);
                this.column关联号 = new global::System.Data.DataColumn("关联号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column关联号);
                this.column信息来源 = new global::System.Data.DataColumn("信息来源", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column信息来源);
                this.column服务站名 = new global::System.Data.DataColumn("服务站名", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column服务站名);
                this.column车型 = new global::System.Data.DataColumn("车型", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column车型);
                this.columnCVT型号 = new global::System.Data.DataColumn("CVT型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCVT型号);
                this.columnCVT编号 = new global::System.Data.DataColumn("CVT编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCVT编号);
                this.column车架号 = new global::System.Data.DataColumn("车架号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column车架号);
                this.column客户姓名 = new global::System.Data.DataColumn("客户姓名", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column客户姓名);
                this.column反馈人 = new global::System.Data.DataColumn("反馈人", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column反馈人);
                this.column反馈日期 = new global::System.Data.DataColumn("反馈日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column反馈日期);
                this.column责任部门 = new global::System.Data.DataColumn("责任部门", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column责任部门);
                this.column责任人 = new global::System.Data.DataColumn("责任人", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column责任人);
                this.column反馈单号.AllowDBNull = false;
                this.column反馈单号.MaxLength = 50;
                this.column单据状态.AllowDBNull = false;
                this.column单据状态.MaxLength = 50;
                this.column关联号.MaxLength = 50;
                this.column信息来源.AllowDBNull = false;
                this.column信息来源.MaxLength = 50;
                this.column服务站名.AllowDBNull = false;
                this.column服务站名.MaxLength = 50;
                this.column车型.AllowDBNull = false;
                this.column车型.MaxLength = 50;
                this.columnCVT型号.AllowDBNull = false;
                this.columnCVT型号.MaxLength = 50;
                this.columnCVT编号.AllowDBNull = false;
                this.columnCVT编号.MaxLength = 50;
                this.column车架号.MaxLength = 50;
                this.column客户姓名.MaxLength = 50;
                this.column反馈人.MaxLength = 50;
                this.column责任部门.MaxLength = 50;
                this.column责任人.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_S_ServiceFeedBackRow NewView_S_ServiceFeedBackRow() {
                return ((View_S_ServiceFeedBackRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View_S_ServiceFeedBackRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View_S_ServiceFeedBackRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View_S_ServiceFeedBackRowChanged != null)) {
                    this.View_S_ServiceFeedBackRowChanged(this, new View_S_ServiceFeedBackRowChangeEvent(((View_S_ServiceFeedBackRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View_S_ServiceFeedBackRowChanging != null)) {
                    this.View_S_ServiceFeedBackRowChanging(this, new View_S_ServiceFeedBackRowChangeEvent(((View_S_ServiceFeedBackRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View_S_ServiceFeedBackRowDeleted != null)) {
                    this.View_S_ServiceFeedBackRowDeleted(this, new View_S_ServiceFeedBackRowChangeEvent(((View_S_ServiceFeedBackRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View_S_ServiceFeedBackRowDeleting != null)) {
                    this.View_S_ServiceFeedBackRowDeleting(this, new View_S_ServiceFeedBackRowChangeEvent(((View_S_ServiceFeedBackRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView_S_ServiceFeedBackRow(View_S_ServiceFeedBackRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View_S_ServiceFeedBackDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View_TCU_UP_DownloadLogDataTable : global::System.Data.TypedTableBase<View_TCU_UP_DownloadLogRow> {
            
            private global::System.Data.DataColumn column序号;
            
            private global::System.Data.DataColumn column用户名;
            
            private global::System.Data.DataColumn column公司名称;
            
            private global::System.Data.DataColumn column联系方式;
            
            private global::System.Data.DataColumn column联系地址;
            
            private global::System.Data.DataColumn column备注;
            
            private global::System.Data.DataColumn column数据包类型名称;
            
            private global::System.Data.DataColumn column数据包版本;
            
            private global::System.Data.DataColumn column下载日期;
            
            private global::System.Data.DataColumn columnIP地址;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_DownloadLogDataTable() {
                this.TableName = "View_TCU_UP_DownloadLog";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_TCU_UP_DownloadLogDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View_TCU_UP_DownloadLogDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 序号Column {
                get {
                    return this.column序号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 用户名Column {
                get {
                    return this.column用户名;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 公司名称Column {
                get {
                    return this.column公司名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 联系方式Column {
                get {
                    return this.column联系方式;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 联系地址Column {
                get {
                    return this.column联系地址;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 备注Column {
                get {
                    return this.column备注;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 数据包类型名称Column {
                get {
                    return this.column数据包类型名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 数据包版本Column {
                get {
                    return this.column数据包版本;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 下载日期Column {
                get {
                    return this.column下载日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IP地址Column {
                get {
                    return this.columnIP地址;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_DownloadLogRow this[int index] {
                get {
                    return ((View_TCU_UP_DownloadLogRow)(this.Rows[index]));
                }
            }
            
            public event View_TCU_UP_DownloadLogRowChangeEventHandler View_TCU_UP_DownloadLogRowChanging;
            
            public event View_TCU_UP_DownloadLogRowChangeEventHandler View_TCU_UP_DownloadLogRowChanged;
            
            public event View_TCU_UP_DownloadLogRowChangeEventHandler View_TCU_UP_DownloadLogRowDeleting;
            
            public event View_TCU_UP_DownloadLogRowChangeEventHandler View_TCU_UP_DownloadLogRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView_TCU_UP_DownloadLogRow(View_TCU_UP_DownloadLogRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_DownloadLogRow AddView_TCU_UP_DownloadLogRow(int 序号, string 用户名, string 公司名称, string 联系方式, string 联系地址, string 备注, string 数据包类型名称, double 数据包版本, string 下载日期, string IP地址) {
                View_TCU_UP_DownloadLogRow rowView_TCU_UP_DownloadLogRow = ((View_TCU_UP_DownloadLogRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        序号,
                        用户名,
                        公司名称,
                        联系方式,
                        联系地址,
                        备注,
                        数据包类型名称,
                        数据包版本,
                        下载日期,
                        IP地址};
                rowView_TCU_UP_DownloadLogRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowView_TCU_UP_DownloadLogRow);
                return rowView_TCU_UP_DownloadLogRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_DownloadLogRow FindBy序号(int 序号) {
                return ((View_TCU_UP_DownloadLogRow)(this.Rows.Find(new object[] {
                            序号})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View_TCU_UP_DownloadLogDataTable cln = ((View_TCU_UP_DownloadLogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View_TCU_UP_DownloadLogDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column序号 = base.Columns["序号"];
                this.column用户名 = base.Columns["用户名"];
                this.column公司名称 = base.Columns["公司名称"];
                this.column联系方式 = base.Columns["联系方式"];
                this.column联系地址 = base.Columns["联系地址"];
                this.column备注 = base.Columns["备注"];
                this.column数据包类型名称 = base.Columns["数据包类型名称"];
                this.column数据包版本 = base.Columns["数据包版本"];
                this.column下载日期 = base.Columns["下载日期"];
                this.columnIP地址 = base.Columns["IP地址"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column序号 = new global::System.Data.DataColumn("序号", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column序号);
                this.column用户名 = new global::System.Data.DataColumn("用户名", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column用户名);
                this.column公司名称 = new global::System.Data.DataColumn("公司名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column公司名称);
                this.column联系方式 = new global::System.Data.DataColumn("联系方式", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column联系方式);
                this.column联系地址 = new global::System.Data.DataColumn("联系地址", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column联系地址);
                this.column备注 = new global::System.Data.DataColumn("备注", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column备注);
                this.column数据包类型名称 = new global::System.Data.DataColumn("数据包类型名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column数据包类型名称);
                this.column数据包版本 = new global::System.Data.DataColumn("数据包版本", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column数据包版本);
                this.column下载日期 = new global::System.Data.DataColumn("下载日期", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column下载日期);
                this.columnIP地址 = new global::System.Data.DataColumn("IP地址", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIP地址);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.column序号}, true));
                this.column序号.AllowDBNull = false;
                this.column序号.Unique = true;
                this.column用户名.AllowDBNull = false;
                this.column用户名.MaxLength = 500;
                this.column公司名称.AllowDBNull = false;
                this.column公司名称.MaxLength = 500;
                this.column联系方式.AllowDBNull = false;
                this.column联系方式.MaxLength = 500;
                this.column联系地址.AllowDBNull = false;
                this.column联系地址.MaxLength = 500;
                this.column备注.AllowDBNull = false;
                this.column备注.MaxLength = 2147483647;
                this.column数据包类型名称.AllowDBNull = false;
                this.column数据包类型名称.MaxLength = 100;
                this.column数据包版本.AllowDBNull = false;
                this.column下载日期.AllowDBNull = false;
                this.column下载日期.MaxLength = 50;
                this.columnIP地址.AllowDBNull = false;
                this.columnIP地址.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_DownloadLogRow NewView_TCU_UP_DownloadLogRow() {
                return ((View_TCU_UP_DownloadLogRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View_TCU_UP_DownloadLogRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View_TCU_UP_DownloadLogRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View_TCU_UP_DownloadLogRowChanged != null)) {
                    this.View_TCU_UP_DownloadLogRowChanged(this, new View_TCU_UP_DownloadLogRowChangeEvent(((View_TCU_UP_DownloadLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View_TCU_UP_DownloadLogRowChanging != null)) {
                    this.View_TCU_UP_DownloadLogRowChanging(this, new View_TCU_UP_DownloadLogRowChangeEvent(((View_TCU_UP_DownloadLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View_TCU_UP_DownloadLogRowDeleted != null)) {
                    this.View_TCU_UP_DownloadLogRowDeleted(this, new View_TCU_UP_DownloadLogRowChangeEvent(((View_TCU_UP_DownloadLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View_TCU_UP_DownloadLogRowDeleting != null)) {
                    this.View_TCU_UP_DownloadLogRowDeleting(this, new View_TCU_UP_DownloadLogRowChangeEvent(((View_TCU_UP_DownloadLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView_TCU_UP_DownloadLogRow(View_TCU_UP_DownloadLogRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View_TCU_UP_DownloadLogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View_TCU_UP_FILEDataTable : global::System.Data.TypedTableBase<View_TCU_UP_FILERow> {
            
            private global::System.Data.DataColumn column序号;
            
            private global::System.Data.DataColumn column数据包类型编号;
            
            private global::System.Data.DataColumn column数据包类型名称;
            
            private global::System.Data.DataColumn column程序版本;
            
            private global::System.Data.DataColumn column版本说明;
            
            private global::System.Data.DataColumn column文件名称;
            
            private global::System.Data.DataColumn column文件内容;
            
            private global::System.Data.DataColumn column文件大小;
            
            private global::System.Data.DataColumn column文件大小说明;
            
            private global::System.Data.DataColumn column上传日期;
            
            private global::System.Data.DataColumn column备注;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_FILEDataTable() {
                this.TableName = "View_TCU_UP_FILE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_TCU_UP_FILEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View_TCU_UP_FILEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 序号Column {
                get {
                    return this.column序号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 数据包类型编号Column {
                get {
                    return this.column数据包类型编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 数据包类型名称Column {
                get {
                    return this.column数据包类型名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 程序版本Column {
                get {
                    return this.column程序版本;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 版本说明Column {
                get {
                    return this.column版本说明;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 文件名称Column {
                get {
                    return this.column文件名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 文件内容Column {
                get {
                    return this.column文件内容;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 文件大小Column {
                get {
                    return this.column文件大小;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 文件大小说明Column {
                get {
                    return this.column文件大小说明;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 上传日期Column {
                get {
                    return this.column上传日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 备注Column {
                get {
                    return this.column备注;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_FILERow this[int index] {
                get {
                    return ((View_TCU_UP_FILERow)(this.Rows[index]));
                }
            }
            
            public event View_TCU_UP_FILERowChangeEventHandler View_TCU_UP_FILERowChanging;
            
            public event View_TCU_UP_FILERowChangeEventHandler View_TCU_UP_FILERowChanged;
            
            public event View_TCU_UP_FILERowChangeEventHandler View_TCU_UP_FILERowDeleting;
            
            public event View_TCU_UP_FILERowChangeEventHandler View_TCU_UP_FILERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView_TCU_UP_FILERow(View_TCU_UP_FILERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_FILERow AddView_TCU_UP_FILERow(int 序号, int 数据包类型编号, string 数据包类型名称, double 程序版本, string 版本说明, string 文件名称, byte[] 文件内容, int 文件大小, string 文件大小说明, System.DateTime 上传日期, string 备注) {
                View_TCU_UP_FILERow rowView_TCU_UP_FILERow = ((View_TCU_UP_FILERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        序号,
                        数据包类型编号,
                        数据包类型名称,
                        程序版本,
                        版本说明,
                        文件名称,
                        文件内容,
                        文件大小,
                        文件大小说明,
                        上传日期,
                        备注};
                rowView_TCU_UP_FILERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowView_TCU_UP_FILERow);
                return rowView_TCU_UP_FILERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_FILERow FindBy序号数据包类型编号(int 序号, int 数据包类型编号) {
                return ((View_TCU_UP_FILERow)(this.Rows.Find(new object[] {
                            序号,
                            数据包类型编号})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View_TCU_UP_FILEDataTable cln = ((View_TCU_UP_FILEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View_TCU_UP_FILEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column序号 = base.Columns["序号"];
                this.column数据包类型编号 = base.Columns["数据包类型编号"];
                this.column数据包类型名称 = base.Columns["数据包类型名称"];
                this.column程序版本 = base.Columns["程序版本"];
                this.column版本说明 = base.Columns["版本说明"];
                this.column文件名称 = base.Columns["文件名称"];
                this.column文件内容 = base.Columns["文件内容"];
                this.column文件大小 = base.Columns["文件大小"];
                this.column文件大小说明 = base.Columns["文件大小说明"];
                this.column上传日期 = base.Columns["上传日期"];
                this.column备注 = base.Columns["备注"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column序号 = new global::System.Data.DataColumn("序号", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column序号);
                this.column数据包类型编号 = new global::System.Data.DataColumn("数据包类型编号", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column数据包类型编号);
                this.column数据包类型名称 = new global::System.Data.DataColumn("数据包类型名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column数据包类型名称);
                this.column程序版本 = new global::System.Data.DataColumn("程序版本", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column程序版本);
                this.column版本说明 = new global::System.Data.DataColumn("版本说明", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column版本说明);
                this.column文件名称 = new global::System.Data.DataColumn("文件名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column文件名称);
                this.column文件内容 = new global::System.Data.DataColumn("文件内容", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column文件内容);
                this.column文件大小 = new global::System.Data.DataColumn("文件大小", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column文件大小);
                this.column文件大小说明 = new global::System.Data.DataColumn("文件大小说明", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column文件大小说明);
                this.column上传日期 = new global::System.Data.DataColumn("上传日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column上传日期);
                this.column备注 = new global::System.Data.DataColumn("备注", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column备注);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.column序号,
                                this.column数据包类型编号}, true));
                this.column序号.AllowDBNull = false;
                this.column数据包类型编号.AllowDBNull = false;
                this.column数据包类型名称.AllowDBNull = false;
                this.column数据包类型名称.MaxLength = 100;
                this.column程序版本.AllowDBNull = false;
                this.column版本说明.AllowDBNull = false;
                this.column版本说明.MaxLength = 500;
                this.column文件名称.AllowDBNull = false;
                this.column文件名称.MaxLength = 500;
                this.column文件内容.AllowDBNull = false;
                this.column文件大小.AllowDBNull = false;
                this.column文件大小说明.AllowDBNull = false;
                this.column文件大小说明.MaxLength = 50;
                this.column上传日期.AllowDBNull = false;
                this.column备注.AllowDBNull = false;
                this.column备注.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_FILERow NewView_TCU_UP_FILERow() {
                return ((View_TCU_UP_FILERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View_TCU_UP_FILERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View_TCU_UP_FILERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View_TCU_UP_FILERowChanged != null)) {
                    this.View_TCU_UP_FILERowChanged(this, new View_TCU_UP_FILERowChangeEvent(((View_TCU_UP_FILERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View_TCU_UP_FILERowChanging != null)) {
                    this.View_TCU_UP_FILERowChanging(this, new View_TCU_UP_FILERowChangeEvent(((View_TCU_UP_FILERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View_TCU_UP_FILERowDeleted != null)) {
                    this.View_TCU_UP_FILERowDeleted(this, new View_TCU_UP_FILERowChangeEvent(((View_TCU_UP_FILERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View_TCU_UP_FILERowDeleting != null)) {
                    this.View_TCU_UP_FILERowDeleting(this, new View_TCU_UP_FILERowChangeEvent(((View_TCU_UP_FILERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView_TCU_UP_FILERow(View_TCU_UP_FILERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View_TCU_UP_FILEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View_TCU_UP_PROGRAM_UPDATE_LOGDataTable : global::System.Data.TypedTableBase<View_TCU_UP_PROGRAM_UPDATE_LOGRow> {
            
            private global::System.Data.DataColumn column序号;
            
            private global::System.Data.DataColumn column车型;
            
            private global::System.Data.DataColumn column程序版本;
            
            private global::System.Data.DataColumn column更新日期;
            
            private global::System.Data.DataColumn column更新说明;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_PROGRAM_UPDATE_LOGDataTable() {
                this.TableName = "View_TCU_UP_PROGRAM_UPDATE_LOG";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_TCU_UP_PROGRAM_UPDATE_LOGDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View_TCU_UP_PROGRAM_UPDATE_LOGDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 序号Column {
                get {
                    return this.column序号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 车型Column {
                get {
                    return this.column车型;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 程序版本Column {
                get {
                    return this.column程序版本;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 更新日期Column {
                get {
                    return this.column更新日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 更新说明Column {
                get {
                    return this.column更新说明;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_PROGRAM_UPDATE_LOGRow this[int index] {
                get {
                    return ((View_TCU_UP_PROGRAM_UPDATE_LOGRow)(this.Rows[index]));
                }
            }
            
            public event View_TCU_UP_PROGRAM_UPDATE_LOGRowChangeEventHandler View_TCU_UP_PROGRAM_UPDATE_LOGRowChanging;
            
            public event View_TCU_UP_PROGRAM_UPDATE_LOGRowChangeEventHandler View_TCU_UP_PROGRAM_UPDATE_LOGRowChanged;
            
            public event View_TCU_UP_PROGRAM_UPDATE_LOGRowChangeEventHandler View_TCU_UP_PROGRAM_UPDATE_LOGRowDeleting;
            
            public event View_TCU_UP_PROGRAM_UPDATE_LOGRowChangeEventHandler View_TCU_UP_PROGRAM_UPDATE_LOGRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView_TCU_UP_PROGRAM_UPDATE_LOGRow(View_TCU_UP_PROGRAM_UPDATE_LOGRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_PROGRAM_UPDATE_LOGRow AddView_TCU_UP_PROGRAM_UPDATE_LOGRow(string 车型, double 程序版本, System.DateTime 更新日期, string 更新说明) {
                View_TCU_UP_PROGRAM_UPDATE_LOGRow rowView_TCU_UP_PROGRAM_UPDATE_LOGRow = ((View_TCU_UP_PROGRAM_UPDATE_LOGRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        车型,
                        程序版本,
                        更新日期,
                        更新说明};
                rowView_TCU_UP_PROGRAM_UPDATE_LOGRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowView_TCU_UP_PROGRAM_UPDATE_LOGRow);
                return rowView_TCU_UP_PROGRAM_UPDATE_LOGRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_PROGRAM_UPDATE_LOGRow FindBy序号(int 序号) {
                return ((View_TCU_UP_PROGRAM_UPDATE_LOGRow)(this.Rows.Find(new object[] {
                            序号})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View_TCU_UP_PROGRAM_UPDATE_LOGDataTable cln = ((View_TCU_UP_PROGRAM_UPDATE_LOGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View_TCU_UP_PROGRAM_UPDATE_LOGDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column序号 = base.Columns["序号"];
                this.column车型 = base.Columns["车型"];
                this.column程序版本 = base.Columns["程序版本"];
                this.column更新日期 = base.Columns["更新日期"];
                this.column更新说明 = base.Columns["更新说明"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column序号 = new global::System.Data.DataColumn("序号", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column序号);
                this.column车型 = new global::System.Data.DataColumn("车型", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column车型);
                this.column程序版本 = new global::System.Data.DataColumn("程序版本", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column程序版本);
                this.column更新日期 = new global::System.Data.DataColumn("更新日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column更新日期);
                this.column更新说明 = new global::System.Data.DataColumn("更新说明", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column更新说明);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.column序号}, true));
                this.column序号.AutoIncrement = true;
                this.column序号.AutoIncrementSeed = -1;
                this.column序号.AutoIncrementStep = -1;
                this.column序号.AllowDBNull = false;
                this.column序号.ReadOnly = true;
                this.column序号.Unique = true;
                this.column车型.AllowDBNull = false;
                this.column车型.MaxLength = 50;
                this.column程序版本.AllowDBNull = false;
                this.column更新日期.AllowDBNull = false;
                this.column更新说明.AllowDBNull = false;
                this.column更新说明.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_PROGRAM_UPDATE_LOGRow NewView_TCU_UP_PROGRAM_UPDATE_LOGRow() {
                return ((View_TCU_UP_PROGRAM_UPDATE_LOGRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View_TCU_UP_PROGRAM_UPDATE_LOGRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View_TCU_UP_PROGRAM_UPDATE_LOGRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View_TCU_UP_PROGRAM_UPDATE_LOGRowChanged != null)) {
                    this.View_TCU_UP_PROGRAM_UPDATE_LOGRowChanged(this, new View_TCU_UP_PROGRAM_UPDATE_LOGRowChangeEvent(((View_TCU_UP_PROGRAM_UPDATE_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View_TCU_UP_PROGRAM_UPDATE_LOGRowChanging != null)) {
                    this.View_TCU_UP_PROGRAM_UPDATE_LOGRowChanging(this, new View_TCU_UP_PROGRAM_UPDATE_LOGRowChangeEvent(((View_TCU_UP_PROGRAM_UPDATE_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View_TCU_UP_PROGRAM_UPDATE_LOGRowDeleted != null)) {
                    this.View_TCU_UP_PROGRAM_UPDATE_LOGRowDeleted(this, new View_TCU_UP_PROGRAM_UPDATE_LOGRowChangeEvent(((View_TCU_UP_PROGRAM_UPDATE_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View_TCU_UP_PROGRAM_UPDATE_LOGRowDeleting != null)) {
                    this.View_TCU_UP_PROGRAM_UPDATE_LOGRowDeleting(this, new View_TCU_UP_PROGRAM_UPDATE_LOGRowChangeEvent(((View_TCU_UP_PROGRAM_UPDATE_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView_TCU_UP_PROGRAM_UPDATE_LOGRow(View_TCU_UP_PROGRAM_UPDATE_LOGRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View_TCU_UP_PROGRAM_UPDATE_LOGDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View_TCU_UP_ProgramTypeDataTable : global::System.Data.TypedTableBase<View_TCU_UP_ProgramTypeRow> {
            
            private global::System.Data.DataColumn column数据包类型编号;
            
            private global::System.Data.DataColumn column数据包类型名称;
            
            private global::System.Data.DataColumn column备注;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_ProgramTypeDataTable() {
                this.TableName = "View_TCU_UP_ProgramType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_TCU_UP_ProgramTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View_TCU_UP_ProgramTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 数据包类型编号Column {
                get {
                    return this.column数据包类型编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 数据包类型名称Column {
                get {
                    return this.column数据包类型名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 备注Column {
                get {
                    return this.column备注;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_ProgramTypeRow this[int index] {
                get {
                    return ((View_TCU_UP_ProgramTypeRow)(this.Rows[index]));
                }
            }
            
            public event View_TCU_UP_ProgramTypeRowChangeEventHandler View_TCU_UP_ProgramTypeRowChanging;
            
            public event View_TCU_UP_ProgramTypeRowChangeEventHandler View_TCU_UP_ProgramTypeRowChanged;
            
            public event View_TCU_UP_ProgramTypeRowChangeEventHandler View_TCU_UP_ProgramTypeRowDeleting;
            
            public event View_TCU_UP_ProgramTypeRowChangeEventHandler View_TCU_UP_ProgramTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView_TCU_UP_ProgramTypeRow(View_TCU_UP_ProgramTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_ProgramTypeRow AddView_TCU_UP_ProgramTypeRow(int 数据包类型编号, string 数据包类型名称, string 备注) {
                View_TCU_UP_ProgramTypeRow rowView_TCU_UP_ProgramTypeRow = ((View_TCU_UP_ProgramTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        数据包类型编号,
                        数据包类型名称,
                        备注};
                rowView_TCU_UP_ProgramTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowView_TCU_UP_ProgramTypeRow);
                return rowView_TCU_UP_ProgramTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_ProgramTypeRow FindBy数据包类型编号(int 数据包类型编号) {
                return ((View_TCU_UP_ProgramTypeRow)(this.Rows.Find(new object[] {
                            数据包类型编号})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View_TCU_UP_ProgramTypeDataTable cln = ((View_TCU_UP_ProgramTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View_TCU_UP_ProgramTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column数据包类型编号 = base.Columns["数据包类型编号"];
                this.column数据包类型名称 = base.Columns["数据包类型名称"];
                this.column备注 = base.Columns["备注"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column数据包类型编号 = new global::System.Data.DataColumn("数据包类型编号", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column数据包类型编号);
                this.column数据包类型名称 = new global::System.Data.DataColumn("数据包类型名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column数据包类型名称);
                this.column备注 = new global::System.Data.DataColumn("备注", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column备注);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.column数据包类型编号}, true));
                this.column数据包类型编号.AllowDBNull = false;
                this.column数据包类型编号.Unique = true;
                this.column数据包类型名称.AllowDBNull = false;
                this.column数据包类型名称.MaxLength = 100;
                this.column备注.AllowDBNull = false;
                this.column备注.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_ProgramTypeRow NewView_TCU_UP_ProgramTypeRow() {
                return ((View_TCU_UP_ProgramTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View_TCU_UP_ProgramTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View_TCU_UP_ProgramTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View_TCU_UP_ProgramTypeRowChanged != null)) {
                    this.View_TCU_UP_ProgramTypeRowChanged(this, new View_TCU_UP_ProgramTypeRowChangeEvent(((View_TCU_UP_ProgramTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View_TCU_UP_ProgramTypeRowChanging != null)) {
                    this.View_TCU_UP_ProgramTypeRowChanging(this, new View_TCU_UP_ProgramTypeRowChangeEvent(((View_TCU_UP_ProgramTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View_TCU_UP_ProgramTypeRowDeleted != null)) {
                    this.View_TCU_UP_ProgramTypeRowDeleted(this, new View_TCU_UP_ProgramTypeRowChangeEvent(((View_TCU_UP_ProgramTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View_TCU_UP_ProgramTypeRowDeleting != null)) {
                    this.View_TCU_UP_ProgramTypeRowDeleting(this, new View_TCU_UP_ProgramTypeRowChangeEvent(((View_TCU_UP_ProgramTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView_TCU_UP_ProgramTypeRow(View_TCU_UP_ProgramTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View_TCU_UP_ProgramTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View_TCU_UP_UserInfoDataTable : global::System.Data.TypedTableBase<View_TCU_UP_UserInfoRow> {
            
            private global::System.Data.DataColumn columnMachineCode;
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnIsEnable;
            
            private global::System.Data.DataColumn columnCheckType;
            
            private global::System.Data.DataColumn columnAllowCount;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnAllowProgramType;
            
            private global::System.Data.DataColumn columnProgramTypeName;
            
            private global::System.Data.DataColumn columnCompany;
            
            private global::System.Data.DataColumn columnContact;
            
            private global::System.Data.DataColumn columnContactAddress;
            
            private global::System.Data.DataColumn columnRemark;
            
            private global::System.Data.DataColumn columnUpdateDate;
            
            private global::System.Data.DataColumn columnUpdateLog;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_UserInfoDataTable() {
                this.TableName = "View_TCU_UP_UserInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_TCU_UP_UserInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View_TCU_UP_UserInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MachineCodeColumn {
                get {
                    return this.columnMachineCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsEnableColumn {
                get {
                    return this.columnIsEnable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckTypeColumn {
                get {
                    return this.columnCheckType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllowCountColumn {
                get {
                    return this.columnAllowCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllowProgramTypeColumn {
                get {
                    return this.columnAllowProgramType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramTypeNameColumn {
                get {
                    return this.columnProgramTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyColumn {
                get {
                    return this.columnCompany;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContactColumn {
                get {
                    return this.columnContact;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContactAddressColumn {
                get {
                    return this.columnContactAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateDateColumn {
                get {
                    return this.columnUpdateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateLogColumn {
                get {
                    return this.columnUpdateLog;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_UserInfoRow this[int index] {
                get {
                    return ((View_TCU_UP_UserInfoRow)(this.Rows[index]));
                }
            }
            
            public event View_TCU_UP_UserInfoRowChangeEventHandler View_TCU_UP_UserInfoRowChanging;
            
            public event View_TCU_UP_UserInfoRowChangeEventHandler View_TCU_UP_UserInfoRowChanged;
            
            public event View_TCU_UP_UserInfoRowChangeEventHandler View_TCU_UP_UserInfoRowDeleting;
            
            public event View_TCU_UP_UserInfoRowChangeEventHandler View_TCU_UP_UserInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView_TCU_UP_UserInfoRow(View_TCU_UP_UserInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_UserInfoRow AddView_TCU_UP_UserInfoRow(string MachineCode, string UserName, bool IsEnable, int CheckType, int AllowCount, System.DateTime EndDate, int AllowProgramType, string ProgramTypeName, string Company, string Contact, string ContactAddress, string Remark, System.DateTime UpdateDate, string UpdateLog) {
                View_TCU_UP_UserInfoRow rowView_TCU_UP_UserInfoRow = ((View_TCU_UP_UserInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MachineCode,
                        UserName,
                        IsEnable,
                        CheckType,
                        AllowCount,
                        EndDate,
                        AllowProgramType,
                        ProgramTypeName,
                        Company,
                        Contact,
                        ContactAddress,
                        Remark,
                        UpdateDate,
                        UpdateLog};
                rowView_TCU_UP_UserInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowView_TCU_UP_UserInfoRow);
                return rowView_TCU_UP_UserInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_UserInfoRow FindByMachineCode(string MachineCode) {
                return ((View_TCU_UP_UserInfoRow)(this.Rows.Find(new object[] {
                            MachineCode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View_TCU_UP_UserInfoDataTable cln = ((View_TCU_UP_UserInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View_TCU_UP_UserInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMachineCode = base.Columns["MachineCode"];
                this.columnUserName = base.Columns["UserName"];
                this.columnIsEnable = base.Columns["IsEnable"];
                this.columnCheckType = base.Columns["CheckType"];
                this.columnAllowCount = base.Columns["AllowCount"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnAllowProgramType = base.Columns["AllowProgramType"];
                this.columnProgramTypeName = base.Columns["ProgramTypeName"];
                this.columnCompany = base.Columns["Company"];
                this.columnContact = base.Columns["Contact"];
                this.columnContactAddress = base.Columns["ContactAddress"];
                this.columnRemark = base.Columns["Remark"];
                this.columnUpdateDate = base.Columns["UpdateDate"];
                this.columnUpdateLog = base.Columns["UpdateLog"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMachineCode = new global::System.Data.DataColumn("MachineCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMachineCode);
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnIsEnable = new global::System.Data.DataColumn("IsEnable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsEnable);
                this.columnCheckType = new global::System.Data.DataColumn("CheckType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckType);
                this.columnAllowCount = new global::System.Data.DataColumn("AllowCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllowCount);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnAllowProgramType = new global::System.Data.DataColumn("AllowProgramType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllowProgramType);
                this.columnProgramTypeName = new global::System.Data.DataColumn("ProgramTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramTypeName);
                this.columnCompany = new global::System.Data.DataColumn("Company", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompany);
                this.columnContact = new global::System.Data.DataColumn("Contact", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContact);
                this.columnContactAddress = new global::System.Data.DataColumn("ContactAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContactAddress);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columnUpdateDate = new global::System.Data.DataColumn("UpdateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateDate);
                this.columnUpdateLog = new global::System.Data.DataColumn("UpdateLog", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateLog);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMachineCode}, true));
                this.columnMachineCode.AllowDBNull = false;
                this.columnMachineCode.Unique = true;
                this.columnMachineCode.MaxLength = 500;
                this.columnUserName.AllowDBNull = false;
                this.columnUserName.MaxLength = 500;
                this.columnIsEnable.AllowDBNull = false;
                this.columnCheckType.AllowDBNull = false;
                this.columnAllowCount.AllowDBNull = false;
                this.columnEndDate.AllowDBNull = false;
                this.columnAllowProgramType.AllowDBNull = false;
                this.columnProgramTypeName.AllowDBNull = false;
                this.columnProgramTypeName.MaxLength = 100;
                this.columnCompany.AllowDBNull = false;
                this.columnCompany.MaxLength = 500;
                this.columnContact.AllowDBNull = false;
                this.columnContact.MaxLength = 500;
                this.columnContactAddress.AllowDBNull = false;
                this.columnContactAddress.MaxLength = 500;
                this.columnRemark.AllowDBNull = false;
                this.columnRemark.MaxLength = 2147483647;
                this.columnUpdateDate.AllowDBNull = false;
                this.columnUpdateLog.AllowDBNull = false;
                this.columnUpdateLog.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_UserInfoRow NewView_TCU_UP_UserInfoRow() {
                return ((View_TCU_UP_UserInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View_TCU_UP_UserInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View_TCU_UP_UserInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View_TCU_UP_UserInfoRowChanged != null)) {
                    this.View_TCU_UP_UserInfoRowChanged(this, new View_TCU_UP_UserInfoRowChangeEvent(((View_TCU_UP_UserInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View_TCU_UP_UserInfoRowChanging != null)) {
                    this.View_TCU_UP_UserInfoRowChanging(this, new View_TCU_UP_UserInfoRowChangeEvent(((View_TCU_UP_UserInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View_TCU_UP_UserInfoRowDeleted != null)) {
                    this.View_TCU_UP_UserInfoRowDeleted(this, new View_TCU_UP_UserInfoRowChangeEvent(((View_TCU_UP_UserInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View_TCU_UP_UserInfoRowDeleting != null)) {
                    this.View_TCU_UP_UserInfoRowDeleting(this, new View_TCU_UP_UserInfoRowChangeEvent(((View_TCU_UP_UserInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView_TCU_UP_UserInfoRow(View_TCU_UP_UserInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View_TCU_UP_UserInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View_TCU_UP_VehicleModelDataTable : global::System.Data.TypedTableBase<View_TCU_UP_VehicleModelRow> {
            
            private global::System.Data.DataColumn column车型;
            
            private global::System.Data.DataColumn column备注;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_VehicleModelDataTable() {
                this.TableName = "View_TCU_UP_VehicleModel";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_TCU_UP_VehicleModelDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View_TCU_UP_VehicleModelDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 车型Column {
                get {
                    return this.column车型;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 备注Column {
                get {
                    return this.column备注;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_VehicleModelRow this[int index] {
                get {
                    return ((View_TCU_UP_VehicleModelRow)(this.Rows[index]));
                }
            }
            
            public event View_TCU_UP_VehicleModelRowChangeEventHandler View_TCU_UP_VehicleModelRowChanging;
            
            public event View_TCU_UP_VehicleModelRowChangeEventHandler View_TCU_UP_VehicleModelRowChanged;
            
            public event View_TCU_UP_VehicleModelRowChangeEventHandler View_TCU_UP_VehicleModelRowDeleting;
            
            public event View_TCU_UP_VehicleModelRowChangeEventHandler View_TCU_UP_VehicleModelRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView_TCU_UP_VehicleModelRow(View_TCU_UP_VehicleModelRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_VehicleModelRow AddView_TCU_UP_VehicleModelRow(string 车型, string 备注) {
                View_TCU_UP_VehicleModelRow rowView_TCU_UP_VehicleModelRow = ((View_TCU_UP_VehicleModelRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        车型,
                        备注};
                rowView_TCU_UP_VehicleModelRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowView_TCU_UP_VehicleModelRow);
                return rowView_TCU_UP_VehicleModelRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_VehicleModelRow FindBy车型(string 车型) {
                return ((View_TCU_UP_VehicleModelRow)(this.Rows.Find(new object[] {
                            车型})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View_TCU_UP_VehicleModelDataTable cln = ((View_TCU_UP_VehicleModelDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View_TCU_UP_VehicleModelDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column车型 = base.Columns["车型"];
                this.column备注 = base.Columns["备注"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column车型 = new global::System.Data.DataColumn("车型", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column车型);
                this.column备注 = new global::System.Data.DataColumn("备注", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column备注);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.column车型}, true));
                this.column车型.AllowDBNull = false;
                this.column车型.Unique = true;
                this.column车型.MaxLength = 50;
                this.column备注.AllowDBNull = false;
                this.column备注.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_VehicleModelRow NewView_TCU_UP_VehicleModelRow() {
                return ((View_TCU_UP_VehicleModelRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View_TCU_UP_VehicleModelRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View_TCU_UP_VehicleModelRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View_TCU_UP_VehicleModelRowChanged != null)) {
                    this.View_TCU_UP_VehicleModelRowChanged(this, new View_TCU_UP_VehicleModelRowChangeEvent(((View_TCU_UP_VehicleModelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View_TCU_UP_VehicleModelRowChanging != null)) {
                    this.View_TCU_UP_VehicleModelRowChanging(this, new View_TCU_UP_VehicleModelRowChangeEvent(((View_TCU_UP_VehicleModelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View_TCU_UP_VehicleModelRowDeleted != null)) {
                    this.View_TCU_UP_VehicleModelRowDeleted(this, new View_TCU_UP_VehicleModelRowChangeEvent(((View_TCU_UP_VehicleModelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View_TCU_UP_VehicleModelRowDeleting != null)) {
                    this.View_TCU_UP_VehicleModelRowDeleting(this, new View_TCU_UP_VehicleModelRowChangeEvent(((View_TCU_UP_VehicleModelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView_TCU_UP_VehicleModelRow(View_TCU_UP_VehicleModelRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View_TCU_UP_VehicleModelDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View_TCU_UP_WRITE_LOGDataTable : global::System.Data.TypedTableBase<View_TCU_UP_WRITE_LOGRow> {
            
            private global::System.Data.DataColumn column序号;
            
            private global::System.Data.DataColumn columnTCU编号;
            
            private global::System.Data.DataColumn column车型;
            
            private global::System.Data.DataColumn column烧写版本;
            
            private global::System.Data.DataColumn column烧写次数;
            
            private global::System.Data.DataColumn column烧写日期;
            
            private global::System.Data.DataColumn column烧写备注;
            
            private global::System.Data.DataColumn column用户名;
            
            private global::System.Data.DataColumn column数据包类别;
            
            private global::System.Data.DataColumn column公司名称;
            
            private global::System.Data.DataColumn column联系方式;
            
            private global::System.Data.DataColumn column联系地址;
            
            private global::System.Data.DataColumn column用户备注;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_WRITE_LOGDataTable() {
                this.TableName = "View_TCU_UP_WRITE_LOG";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_TCU_UP_WRITE_LOGDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View_TCU_UP_WRITE_LOGDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 序号Column {
                get {
                    return this.column序号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TCU编号Column {
                get {
                    return this.columnTCU编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 车型Column {
                get {
                    return this.column车型;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 烧写版本Column {
                get {
                    return this.column烧写版本;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 烧写次数Column {
                get {
                    return this.column烧写次数;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 烧写日期Column {
                get {
                    return this.column烧写日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 烧写备注Column {
                get {
                    return this.column烧写备注;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 用户名Column {
                get {
                    return this.column用户名;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 数据包类别Column {
                get {
                    return this.column数据包类别;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 公司名称Column {
                get {
                    return this.column公司名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 联系方式Column {
                get {
                    return this.column联系方式;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 联系地址Column {
                get {
                    return this.column联系地址;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 用户备注Column {
                get {
                    return this.column用户备注;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_WRITE_LOGRow this[int index] {
                get {
                    return ((View_TCU_UP_WRITE_LOGRow)(this.Rows[index]));
                }
            }
            
            public event View_TCU_UP_WRITE_LOGRowChangeEventHandler View_TCU_UP_WRITE_LOGRowChanging;
            
            public event View_TCU_UP_WRITE_LOGRowChangeEventHandler View_TCU_UP_WRITE_LOGRowChanged;
            
            public event View_TCU_UP_WRITE_LOGRowChangeEventHandler View_TCU_UP_WRITE_LOGRowDeleting;
            
            public event View_TCU_UP_WRITE_LOGRowChangeEventHandler View_TCU_UP_WRITE_LOGRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView_TCU_UP_WRITE_LOGRow(View_TCU_UP_WRITE_LOGRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_WRITE_LOGRow AddView_TCU_UP_WRITE_LOGRow(int 序号, string TCU编号, string 车型, string 烧写版本, int 烧写次数, string 烧写日期, string 烧写备注, string 用户名, string 数据包类别, string 公司名称, string 联系方式, string 联系地址, string 用户备注) {
                View_TCU_UP_WRITE_LOGRow rowView_TCU_UP_WRITE_LOGRow = ((View_TCU_UP_WRITE_LOGRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        序号,
                        TCU编号,
                        车型,
                        烧写版本,
                        烧写次数,
                        烧写日期,
                        烧写备注,
                        用户名,
                        数据包类别,
                        公司名称,
                        联系方式,
                        联系地址,
                        用户备注};
                rowView_TCU_UP_WRITE_LOGRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowView_TCU_UP_WRITE_LOGRow);
                return rowView_TCU_UP_WRITE_LOGRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_WRITE_LOGRow FindBy序号(int 序号) {
                return ((View_TCU_UP_WRITE_LOGRow)(this.Rows.Find(new object[] {
                            序号})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View_TCU_UP_WRITE_LOGDataTable cln = ((View_TCU_UP_WRITE_LOGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View_TCU_UP_WRITE_LOGDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column序号 = base.Columns["序号"];
                this.columnTCU编号 = base.Columns["TCU编号"];
                this.column车型 = base.Columns["车型"];
                this.column烧写版本 = base.Columns["烧写版本"];
                this.column烧写次数 = base.Columns["烧写次数"];
                this.column烧写日期 = base.Columns["烧写日期"];
                this.column烧写备注 = base.Columns["烧写备注"];
                this.column用户名 = base.Columns["用户名"];
                this.column数据包类别 = base.Columns["数据包类别"];
                this.column公司名称 = base.Columns["公司名称"];
                this.column联系方式 = base.Columns["联系方式"];
                this.column联系地址 = base.Columns["联系地址"];
                this.column用户备注 = base.Columns["用户备注"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column序号 = new global::System.Data.DataColumn("序号", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column序号);
                this.columnTCU编号 = new global::System.Data.DataColumn("TCU编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTCU编号);
                this.column车型 = new global::System.Data.DataColumn("车型", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column车型);
                this.column烧写版本 = new global::System.Data.DataColumn("烧写版本", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column烧写版本);
                this.column烧写次数 = new global::System.Data.DataColumn("烧写次数", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column烧写次数);
                this.column烧写日期 = new global::System.Data.DataColumn("烧写日期", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column烧写日期);
                this.column烧写备注 = new global::System.Data.DataColumn("烧写备注", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column烧写备注);
                this.column用户名 = new global::System.Data.DataColumn("用户名", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column用户名);
                this.column数据包类别 = new global::System.Data.DataColumn("数据包类别", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column数据包类别);
                this.column公司名称 = new global::System.Data.DataColumn("公司名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column公司名称);
                this.column联系方式 = new global::System.Data.DataColumn("联系方式", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column联系方式);
                this.column联系地址 = new global::System.Data.DataColumn("联系地址", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column联系地址);
                this.column用户备注 = new global::System.Data.DataColumn("用户备注", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column用户备注);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.column序号}, true));
                this.column序号.AllowDBNull = false;
                this.column序号.Unique = true;
                this.columnTCU编号.AllowDBNull = false;
                this.columnTCU编号.MaxLength = 50;
                this.column车型.AllowDBNull = false;
                this.column车型.MaxLength = 50;
                this.column烧写版本.AllowDBNull = false;
                this.column烧写版本.MaxLength = 50;
                this.column烧写次数.AllowDBNull = false;
                this.column烧写日期.AllowDBNull = false;
                this.column烧写日期.MaxLength = 50;
                this.column烧写备注.AllowDBNull = false;
                this.column烧写备注.MaxLength = 2147483647;
                this.column用户名.AllowDBNull = false;
                this.column用户名.MaxLength = 500;
                this.column数据包类别.AllowDBNull = false;
                this.column数据包类别.MaxLength = 100;
                this.column公司名称.AllowDBNull = false;
                this.column公司名称.MaxLength = 500;
                this.column联系方式.AllowDBNull = false;
                this.column联系方式.MaxLength = 500;
                this.column联系地址.AllowDBNull = false;
                this.column联系地址.MaxLength = 500;
                this.column用户备注.AllowDBNull = false;
                this.column用户备注.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_WRITE_LOGRow NewView_TCU_UP_WRITE_LOGRow() {
                return ((View_TCU_UP_WRITE_LOGRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View_TCU_UP_WRITE_LOGRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View_TCU_UP_WRITE_LOGRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View_TCU_UP_WRITE_LOGRowChanged != null)) {
                    this.View_TCU_UP_WRITE_LOGRowChanged(this, new View_TCU_UP_WRITE_LOGRowChangeEvent(((View_TCU_UP_WRITE_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View_TCU_UP_WRITE_LOGRowChanging != null)) {
                    this.View_TCU_UP_WRITE_LOGRowChanging(this, new View_TCU_UP_WRITE_LOGRowChangeEvent(((View_TCU_UP_WRITE_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View_TCU_UP_WRITE_LOGRowDeleted != null)) {
                    this.View_TCU_UP_WRITE_LOGRowDeleted(this, new View_TCU_UP_WRITE_LOGRowChangeEvent(((View_TCU_UP_WRITE_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View_TCU_UP_WRITE_LOGRowDeleting != null)) {
                    this.View_TCU_UP_WRITE_LOGRowDeleting(this, new View_TCU_UP_WRITE_LOGRowChangeEvent(((View_TCU_UP_WRITE_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView_TCU_UP_WRITE_LOGRow(View_TCU_UP_WRITE_LOGRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View_TCU_UP_WRITE_LOGDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetNewsDataTable : global::System.Data.TypedTableBase<GetNewsRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnTitle;
            
            private global::System.Data.DataColumn columnNewsUrl;
            
            private global::System.Data.DataColumn columnNewsDate;
            
            private global::System.Data.DataColumn columnNewsType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetNewsDataTable() {
                this.TableName = "GetNews";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetNewsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetNewsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsUrlColumn {
                get {
                    return this.columnNewsUrl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsDateColumn {
                get {
                    return this.columnNewsDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewsTypeColumn {
                get {
                    return this.columnNewsType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetNewsRow this[int index] {
                get {
                    return ((GetNewsRow)(this.Rows[index]));
                }
            }
            
            public event GetNewsRowChangeEventHandler GetNewsRowChanging;
            
            public event GetNewsRowChangeEventHandler GetNewsRowChanged;
            
            public event GetNewsRowChangeEventHandler GetNewsRowDeleting;
            
            public event GetNewsRowChangeEventHandler GetNewsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetNewsRow(GetNewsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetNewsRow AddGetNewsRow(string Title, string NewsUrl, System.DateTime NewsDate, int NewsType) {
                GetNewsRow rowGetNewsRow = ((GetNewsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Title,
                        NewsUrl,
                        NewsDate,
                        NewsType};
                rowGetNewsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetNewsRow);
                return rowGetNewsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetNewsRow FindByID(int ID) {
                return ((GetNewsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetNewsDataTable cln = ((GetNewsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetNewsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTitle = base.Columns["Title"];
                this.columnNewsUrl = base.Columns["NewsUrl"];
                this.columnNewsDate = base.Columns["NewsDate"];
                this.columnNewsType = base.Columns["NewsType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTitle = new global::System.Data.DataColumn("Title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnNewsUrl = new global::System.Data.DataColumn("NewsUrl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsUrl);
                this.columnNewsDate = new global::System.Data.DataColumn("NewsDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsDate);
                this.columnNewsType = new global::System.Data.DataColumn("NewsType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewsType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnTitle.AllowDBNull = false;
                this.columnTitle.MaxLength = 150;
                this.columnNewsUrl.AllowDBNull = false;
                this.columnNewsUrl.MaxLength = 500;
                this.columnNewsDate.AllowDBNull = false;
                this.columnNewsType.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetNewsRow NewGetNewsRow() {
                return ((GetNewsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetNewsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetNewsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetNewsRowChanged != null)) {
                    this.GetNewsRowChanged(this, new GetNewsRowChangeEvent(((GetNewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetNewsRowChanging != null)) {
                    this.GetNewsRowChanging(this, new GetNewsRowChangeEvent(((GetNewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetNewsRowDeleted != null)) {
                    this.GetNewsRowDeleted(this, new GetNewsRowChangeEvent(((GetNewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetNewsRowDeleting != null)) {
                    this.GetNewsRowDeleting(this, new GetNewsRowChangeEvent(((GetNewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetNewsRow(GetNewsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetNewsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetServerTimeDataTable : global::System.Data.TypedTableBase<GetServerTimeRow> {
            
            private global::System.Data.DataColumn columnColumn1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetServerTimeDataTable() {
                this.TableName = "GetServerTime";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetServerTimeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetServerTimeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Column1Column {
                get {
                    return this.columnColumn1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetServerTimeRow this[int index] {
                get {
                    return ((GetServerTimeRow)(this.Rows[index]));
                }
            }
            
            public event GetServerTimeRowChangeEventHandler GetServerTimeRowChanging;
            
            public event GetServerTimeRowChangeEventHandler GetServerTimeRowChanged;
            
            public event GetServerTimeRowChangeEventHandler GetServerTimeRowDeleting;
            
            public event GetServerTimeRowChangeEventHandler GetServerTimeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetServerTimeRow(GetServerTimeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetServerTimeRow AddGetServerTimeRow(System.DateTime Column1) {
                GetServerTimeRow rowGetServerTimeRow = ((GetServerTimeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Column1};
                rowGetServerTimeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetServerTimeRow);
                return rowGetServerTimeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetServerTimeDataTable cln = ((GetServerTimeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetServerTimeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnColumn1 = base.Columns["Column1"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnColumn1 = new global::System.Data.DataColumn("Column1", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumn1);
                this.columnColumn1.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetServerTimeRow NewGetServerTimeRow() {
                return ((GetServerTimeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetServerTimeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetServerTimeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetServerTimeRowChanged != null)) {
                    this.GetServerTimeRowChanged(this, new GetServerTimeRowChangeEvent(((GetServerTimeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetServerTimeRowChanging != null)) {
                    this.GetServerTimeRowChanging(this, new GetServerTimeRowChangeEvent(((GetServerTimeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetServerTimeRowDeleted != null)) {
                    this.GetServerTimeRowDeleted(this, new GetServerTimeRowChangeEvent(((GetServerTimeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetServerTimeRowDeleting != null)) {
                    this.GetServerTimeRowDeleting(this, new GetServerTimeRowChangeEvent(((GetServerTimeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetServerTimeRow(GetServerTimeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetServerTimeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TCU_UP_GetFileDataTable : global::System.Data.TypedTableBase<TCU_UP_GetFileRow> {
            
            private global::System.Data.DataColumn columnFileContent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_GetFileDataTable() {
                this.TableName = "TCU_UP_GetFile";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCU_UP_GetFileDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TCU_UP_GetFileDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileContentColumn {
                get {
                    return this.columnFileContent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_GetFileRow this[int index] {
                get {
                    return ((TCU_UP_GetFileRow)(this.Rows[index]));
                }
            }
            
            public event TCU_UP_GetFileRowChangeEventHandler TCU_UP_GetFileRowChanging;
            
            public event TCU_UP_GetFileRowChangeEventHandler TCU_UP_GetFileRowChanged;
            
            public event TCU_UP_GetFileRowChangeEventHandler TCU_UP_GetFileRowDeleting;
            
            public event TCU_UP_GetFileRowChangeEventHandler TCU_UP_GetFileRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTCU_UP_GetFileRow(TCU_UP_GetFileRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_GetFileRow AddTCU_UP_GetFileRow(byte[] FileContent) {
                TCU_UP_GetFileRow rowTCU_UP_GetFileRow = ((TCU_UP_GetFileRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FileContent};
                rowTCU_UP_GetFileRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTCU_UP_GetFileRow);
                return rowTCU_UP_GetFileRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TCU_UP_GetFileDataTable cln = ((TCU_UP_GetFileDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TCU_UP_GetFileDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFileContent = base.Columns["FileContent"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFileContent = new global::System.Data.DataColumn("FileContent", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileContent);
                this.columnFileContent.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_GetFileRow NewTCU_UP_GetFileRow() {
                return ((TCU_UP_GetFileRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TCU_UP_GetFileRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TCU_UP_GetFileRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TCU_UP_GetFileRowChanged != null)) {
                    this.TCU_UP_GetFileRowChanged(this, new TCU_UP_GetFileRowChangeEvent(((TCU_UP_GetFileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TCU_UP_GetFileRowChanging != null)) {
                    this.TCU_UP_GetFileRowChanging(this, new TCU_UP_GetFileRowChangeEvent(((TCU_UP_GetFileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TCU_UP_GetFileRowDeleted != null)) {
                    this.TCU_UP_GetFileRowDeleted(this, new TCU_UP_GetFileRowChangeEvent(((TCU_UP_GetFileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TCU_UP_GetFileRowDeleting != null)) {
                    this.TCU_UP_GetFileRowDeleting(this, new TCU_UP_GetFileRowChangeEvent(((TCU_UP_GetFileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTCU_UP_GetFileRow(TCU_UP_GetFileRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TCU_UP_GetFileDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TCU_UP_GetFileNoteInfoDataTable : global::System.Data.TypedTableBase<TCU_UP_GetFileNoteInfoRow> {
            
            private global::System.Data.DataColumn columnProgramType;
            
            private global::System.Data.DataColumn columnProgramVersion;
            
            private global::System.Data.DataColumn columnVersionDetail;
            
            private global::System.Data.DataColumn columnFileLength;
            
            private global::System.Data.DataColumn columnFileLengthDetail;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnRemark;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_GetFileNoteInfoDataTable() {
                this.TableName = "TCU_UP_GetFileNoteInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCU_UP_GetFileNoteInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TCU_UP_GetFileNoteInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramTypeColumn {
                get {
                    return this.columnProgramType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramVersionColumn {
                get {
                    return this.columnProgramVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VersionDetailColumn {
                get {
                    return this.columnVersionDetail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileLengthColumn {
                get {
                    return this.columnFileLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileLengthDetailColumn {
                get {
                    return this.columnFileLengthDetail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_GetFileNoteInfoRow this[int index] {
                get {
                    return ((TCU_UP_GetFileNoteInfoRow)(this.Rows[index]));
                }
            }
            
            public event TCU_UP_GetFileNoteInfoRowChangeEventHandler TCU_UP_GetFileNoteInfoRowChanging;
            
            public event TCU_UP_GetFileNoteInfoRowChangeEventHandler TCU_UP_GetFileNoteInfoRowChanged;
            
            public event TCU_UP_GetFileNoteInfoRowChangeEventHandler TCU_UP_GetFileNoteInfoRowDeleting;
            
            public event TCU_UP_GetFileNoteInfoRowChangeEventHandler TCU_UP_GetFileNoteInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTCU_UP_GetFileNoteInfoRow(TCU_UP_GetFileNoteInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_GetFileNoteInfoRow AddTCU_UP_GetFileNoteInfoRow(int ProgramType, double ProgramVersion, string VersionDetail, int FileLength, string FileLengthDetail, System.DateTime Date, string Remark) {
                TCU_UP_GetFileNoteInfoRow rowTCU_UP_GetFileNoteInfoRow = ((TCU_UP_GetFileNoteInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProgramType,
                        ProgramVersion,
                        VersionDetail,
                        FileLength,
                        FileLengthDetail,
                        Date,
                        Remark};
                rowTCU_UP_GetFileNoteInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTCU_UP_GetFileNoteInfoRow);
                return rowTCU_UP_GetFileNoteInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TCU_UP_GetFileNoteInfoDataTable cln = ((TCU_UP_GetFileNoteInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TCU_UP_GetFileNoteInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProgramType = base.Columns["ProgramType"];
                this.columnProgramVersion = base.Columns["ProgramVersion"];
                this.columnVersionDetail = base.Columns["VersionDetail"];
                this.columnFileLength = base.Columns["FileLength"];
                this.columnFileLengthDetail = base.Columns["FileLengthDetail"];
                this.columnDate = base.Columns["Date"];
                this.columnRemark = base.Columns["Remark"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProgramType = new global::System.Data.DataColumn("ProgramType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramType);
                this.columnProgramVersion = new global::System.Data.DataColumn("ProgramVersion", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramVersion);
                this.columnVersionDetail = new global::System.Data.DataColumn("VersionDetail", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersionDetail);
                this.columnFileLength = new global::System.Data.DataColumn("FileLength", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileLength);
                this.columnFileLengthDetail = new global::System.Data.DataColumn("FileLengthDetail", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileLengthDetail);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columnProgramType.AllowDBNull = false;
                this.columnProgramVersion.AllowDBNull = false;
                this.columnVersionDetail.AllowDBNull = false;
                this.columnVersionDetail.MaxLength = 500;
                this.columnFileLength.AllowDBNull = false;
                this.columnFileLengthDetail.AllowDBNull = false;
                this.columnFileLengthDetail.MaxLength = 50;
                this.columnDate.AllowDBNull = false;
                this.columnRemark.AllowDBNull = false;
                this.columnRemark.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_GetFileNoteInfoRow NewTCU_UP_GetFileNoteInfoRow() {
                return ((TCU_UP_GetFileNoteInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TCU_UP_GetFileNoteInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TCU_UP_GetFileNoteInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TCU_UP_GetFileNoteInfoRowChanged != null)) {
                    this.TCU_UP_GetFileNoteInfoRowChanged(this, new TCU_UP_GetFileNoteInfoRowChangeEvent(((TCU_UP_GetFileNoteInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TCU_UP_GetFileNoteInfoRowChanging != null)) {
                    this.TCU_UP_GetFileNoteInfoRowChanging(this, new TCU_UP_GetFileNoteInfoRowChangeEvent(((TCU_UP_GetFileNoteInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TCU_UP_GetFileNoteInfoRowDeleted != null)) {
                    this.TCU_UP_GetFileNoteInfoRowDeleted(this, new TCU_UP_GetFileNoteInfoRowChangeEvent(((TCU_UP_GetFileNoteInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TCU_UP_GetFileNoteInfoRowDeleting != null)) {
                    this.TCU_UP_GetFileNoteInfoRowDeleting(this, new TCU_UP_GetFileNoteInfoRowChangeEvent(((TCU_UP_GetFileNoteInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTCU_UP_GetFileNoteInfoRow(TCU_UP_GetFileNoteInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TCU_UP_GetFileNoteInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TCU_UP_GetUserInfoDataTable : global::System.Data.TypedTableBase<TCU_UP_GetUserInfoRow> {
            
            private global::System.Data.DataColumn columnMachineCode;
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnCompany;
            
            private global::System.Data.DataColumn columnContact;
            
            private global::System.Data.DataColumn columnContactAddress;
            
            private global::System.Data.DataColumn columnIsEnable;
            
            private global::System.Data.DataColumn columnCheckType;
            
            private global::System.Data.DataColumn columnAllowCount;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnAllowProgramType;
            
            private global::System.Data.DataColumn columnRemark;
            
            private global::System.Data.DataColumn columnUpdateDate;
            
            private global::System.Data.DataColumn columnUpdateLog;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_GetUserInfoDataTable() {
                this.TableName = "TCU_UP_GetUserInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCU_UP_GetUserInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TCU_UP_GetUserInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MachineCodeColumn {
                get {
                    return this.columnMachineCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyColumn {
                get {
                    return this.columnCompany;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContactColumn {
                get {
                    return this.columnContact;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContactAddressColumn {
                get {
                    return this.columnContactAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsEnableColumn {
                get {
                    return this.columnIsEnable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckTypeColumn {
                get {
                    return this.columnCheckType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllowCountColumn {
                get {
                    return this.columnAllowCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllowProgramTypeColumn {
                get {
                    return this.columnAllowProgramType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateDateColumn {
                get {
                    return this.columnUpdateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateLogColumn {
                get {
                    return this.columnUpdateLog;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_GetUserInfoRow this[int index] {
                get {
                    return ((TCU_UP_GetUserInfoRow)(this.Rows[index]));
                }
            }
            
            public event TCU_UP_GetUserInfoRowChangeEventHandler TCU_UP_GetUserInfoRowChanging;
            
            public event TCU_UP_GetUserInfoRowChangeEventHandler TCU_UP_GetUserInfoRowChanged;
            
            public event TCU_UP_GetUserInfoRowChangeEventHandler TCU_UP_GetUserInfoRowDeleting;
            
            public event TCU_UP_GetUserInfoRowChangeEventHandler TCU_UP_GetUserInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTCU_UP_GetUserInfoRow(TCU_UP_GetUserInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_GetUserInfoRow AddTCU_UP_GetUserInfoRow(string MachineCode, string UserName, string Company, string Contact, string ContactAddress, bool IsEnable, int CheckType, int AllowCount, System.DateTime EndDate, int AllowProgramType, string Remark, System.DateTime UpdateDate, string UpdateLog) {
                TCU_UP_GetUserInfoRow rowTCU_UP_GetUserInfoRow = ((TCU_UP_GetUserInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MachineCode,
                        UserName,
                        Company,
                        Contact,
                        ContactAddress,
                        IsEnable,
                        CheckType,
                        AllowCount,
                        EndDate,
                        AllowProgramType,
                        Remark,
                        UpdateDate,
                        UpdateLog};
                rowTCU_UP_GetUserInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTCU_UP_GetUserInfoRow);
                return rowTCU_UP_GetUserInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_GetUserInfoRow FindByMachineCode(string MachineCode) {
                return ((TCU_UP_GetUserInfoRow)(this.Rows.Find(new object[] {
                            MachineCode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TCU_UP_GetUserInfoDataTable cln = ((TCU_UP_GetUserInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TCU_UP_GetUserInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMachineCode = base.Columns["MachineCode"];
                this.columnUserName = base.Columns["UserName"];
                this.columnCompany = base.Columns["Company"];
                this.columnContact = base.Columns["Contact"];
                this.columnContactAddress = base.Columns["ContactAddress"];
                this.columnIsEnable = base.Columns["IsEnable"];
                this.columnCheckType = base.Columns["CheckType"];
                this.columnAllowCount = base.Columns["AllowCount"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnAllowProgramType = base.Columns["AllowProgramType"];
                this.columnRemark = base.Columns["Remark"];
                this.columnUpdateDate = base.Columns["UpdateDate"];
                this.columnUpdateLog = base.Columns["UpdateLog"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMachineCode = new global::System.Data.DataColumn("MachineCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMachineCode);
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnCompany = new global::System.Data.DataColumn("Company", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompany);
                this.columnContact = new global::System.Data.DataColumn("Contact", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContact);
                this.columnContactAddress = new global::System.Data.DataColumn("ContactAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContactAddress);
                this.columnIsEnable = new global::System.Data.DataColumn("IsEnable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsEnable);
                this.columnCheckType = new global::System.Data.DataColumn("CheckType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckType);
                this.columnAllowCount = new global::System.Data.DataColumn("AllowCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllowCount);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnAllowProgramType = new global::System.Data.DataColumn("AllowProgramType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllowProgramType);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columnUpdateDate = new global::System.Data.DataColumn("UpdateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateDate);
                this.columnUpdateLog = new global::System.Data.DataColumn("UpdateLog", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateLog);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMachineCode}, true));
                this.columnMachineCode.AllowDBNull = false;
                this.columnMachineCode.Unique = true;
                this.columnMachineCode.MaxLength = 500;
                this.columnUserName.AllowDBNull = false;
                this.columnUserName.MaxLength = 500;
                this.columnCompany.AllowDBNull = false;
                this.columnCompany.MaxLength = 500;
                this.columnContact.AllowDBNull = false;
                this.columnContact.MaxLength = 500;
                this.columnContactAddress.AllowDBNull = false;
                this.columnContactAddress.MaxLength = 500;
                this.columnIsEnable.AllowDBNull = false;
                this.columnCheckType.AllowDBNull = false;
                this.columnAllowCount.AllowDBNull = false;
                this.columnEndDate.AllowDBNull = false;
                this.columnAllowProgramType.AllowDBNull = false;
                this.columnRemark.AllowDBNull = false;
                this.columnRemark.MaxLength = 2147483647;
                this.columnUpdateDate.AllowDBNull = false;
                this.columnUpdateLog.AllowDBNull = false;
                this.columnUpdateLog.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_GetUserInfoRow NewTCU_UP_GetUserInfoRow() {
                return ((TCU_UP_GetUserInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TCU_UP_GetUserInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TCU_UP_GetUserInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TCU_UP_GetUserInfoRowChanged != null)) {
                    this.TCU_UP_GetUserInfoRowChanged(this, new TCU_UP_GetUserInfoRowChangeEvent(((TCU_UP_GetUserInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TCU_UP_GetUserInfoRowChanging != null)) {
                    this.TCU_UP_GetUserInfoRowChanging(this, new TCU_UP_GetUserInfoRowChangeEvent(((TCU_UP_GetUserInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TCU_UP_GetUserInfoRowDeleted != null)) {
                    this.TCU_UP_GetUserInfoRowDeleted(this, new TCU_UP_GetUserInfoRowChangeEvent(((TCU_UP_GetUserInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TCU_UP_GetUserInfoRowDeleting != null)) {
                    this.TCU_UP_GetUserInfoRowDeleting(this, new TCU_UP_GetUserInfoRowChangeEvent(((TCU_UP_GetUserInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTCU_UP_GetUserInfoRow(TCU_UP_GetUserInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RundarWebServerDataSet ds = new RundarWebServerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TCU_UP_GetUserInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CCAR_QuestionTrackBillRow : global::System.Data.DataRow {
            
            private CCAR_QuestionTrackBillDataTable tableCCAR_QuestionTrackBill;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CCAR_QuestionTrackBillRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCCAR_QuestionTrackBill = ((CCAR_QuestionTrackBillDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableCCAR_QuestionTrackBill.IDColumn]));
                }
                set {
                    this[this.tableCCAR_QuestionTrackBill.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JLRDChargeMan {
                get {
                    return ((string)(this[this.tableCCAR_QuestionTrackBill.JLRDChargeManColumn]));
                }
                set {
                    this[this.tableCCAR_QuestionTrackBill.JLRDChargeManColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableCCAR_QuestionTrackBill.CreateTimeColumn]));
                }
                set {
                    this[this.tableCCAR_QuestionTrackBill.CreateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Provider {
                get {
                    return ((string)(this[this.tableCCAR_QuestionTrackBill.ProviderColumn]));
                }
                set {
                    this[this.tableCCAR_QuestionTrackBill.ProviderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QuestionTitle {
                get {
                    return ((string)(this[this.tableCCAR_QuestionTrackBill.QuestionTitleColumn]));
                }
                set {
                    this[this.tableCCAR_QuestionTrackBill.QuestionTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    return ((string)(this[this.tableCCAR_QuestionTrackBill.StatusColumn]));
                }
                set {
                    this[this.tableCCAR_QuestionTrackBill.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tableCCAR_QuestionTrackBill.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CCAR_QuestionTrackBill”中列“Remark”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCCAR_QuestionTrackBill.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tableCCAR_QuestionTrackBill.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tableCCAR_QuestionTrackBill.RemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CCAR_QuestionTrackListRow[] GetCCAR_QuestionTrackListRows() {
                if ((this.Table.ChildRelations["FK_CCAR_QuestionTrackList_CCAR_QuestionTrackBill"] == null)) {
                    return new CCAR_QuestionTrackListRow[0];
                }
                else {
                    return ((CCAR_QuestionTrackListRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CCAR_QuestionTrackList_CCAR_QuestionTrackBill"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CCAR_QuestionTrackListRow : global::System.Data.DataRow {
            
            private CCAR_QuestionTrackListDataTable tableCCAR_QuestionTrackList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CCAR_QuestionTrackListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCCAR_QuestionTrackList = ((CCAR_QuestionTrackListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableCCAR_QuestionTrackList.IDColumn]));
                }
                set {
                    this[this.tableCCAR_QuestionTrackList.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FatherID {
                get {
                    return ((int)(this[this.tableCCAR_QuestionTrackList.FatherIDColumn]));
                }
                set {
                    this[this.tableCCAR_QuestionTrackList.FatherIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProviderMan {
                get {
                    try {
                        return ((string)(this[this.tableCCAR_QuestionTrackList.ProviderManColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CCAR_QuestionTrackList”中列“ProviderMan”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCCAR_QuestionTrackList.ProviderManColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccessoryName {
                get {
                    return ((string)(this[this.tableCCAR_QuestionTrackList.AccessoryNameColumn]));
                }
                set {
                    this[this.tableCCAR_QuestionTrackList.AccessoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccessoryCode {
                get {
                    return ((string)(this[this.tableCCAR_QuestionTrackList.AccessoryCodeColumn]));
                }
                set {
                    this[this.tableCCAR_QuestionTrackList.AccessoryCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Spec {
                get {
                    try {
                        return ((string)(this[this.tableCCAR_QuestionTrackList.SpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CCAR_QuestionTrackList”中列“Spec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCCAR_QuestionTrackList.SpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Question {
                get {
                    return ((string)(this[this.tableCCAR_QuestionTrackList.QuestionColumn]));
                }
                set {
                    this[this.tableCCAR_QuestionTrackList.QuestionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Solution {
                get {
                    try {
                        return ((string)(this[this.tableCCAR_QuestionTrackList.SolutionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CCAR_QuestionTrackList”中列“Solution”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCCAR_QuestionTrackList.SolutionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartTime {
                get {
                    return ((global::System.DateTime)(this[this.tableCCAR_QuestionTrackList.StartTimeColumn]));
                }
                set {
                    this[this.tableCCAR_QuestionTrackList.StartTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime GYSAcceptTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCCAR_QuestionTrackList.GYSAcceptTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CCAR_QuestionTrackList”中列“GYSAcceptTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCCAR_QuestionTrackList.GYSAcceptTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sequence {
                get {
                    try {
                        return ((string)(this[this.tableCCAR_QuestionTrackList.SequenceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CCAR_QuestionTrackList”中列“Sequence”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCCAR_QuestionTrackList.SequenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCCAR_QuestionTrackList.EndTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CCAR_QuestionTrackList”中列“EndTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCCAR_QuestionTrackList.EndTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastCheckTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCCAR_QuestionTrackList.LastCheckTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CCAR_QuestionTrackList”中列“LastCheckTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCCAR_QuestionTrackList.LastCheckTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remart {
                get {
                    try {
                        return ((string)(this[this.tableCCAR_QuestionTrackList.RemartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CCAR_QuestionTrackList”中列“Remart”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCCAR_QuestionTrackList.RemartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CCAR_QuestionTrackBillRow CCAR_QuestionTrackBillRow {
                get {
                    return ((CCAR_QuestionTrackBillRow)(this.GetParentRow(this.Table.ParentRelations["FK_CCAR_QuestionTrackList_CCAR_QuestionTrackBill"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CCAR_QuestionTrackList_CCAR_QuestionTrackBill"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProviderManNull() {
                return this.IsNull(this.tableCCAR_QuestionTrackList.ProviderManColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProviderManNull() {
                this[this.tableCCAR_QuestionTrackList.ProviderManColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpecNull() {
                return this.IsNull(this.tableCCAR_QuestionTrackList.SpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpecNull() {
                this[this.tableCCAR_QuestionTrackList.SpecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSolutionNull() {
                return this.IsNull(this.tableCCAR_QuestionTrackList.SolutionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSolutionNull() {
                this[this.tableCCAR_QuestionTrackList.SolutionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGYSAcceptTimeNull() {
                return this.IsNull(this.tableCCAR_QuestionTrackList.GYSAcceptTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGYSAcceptTimeNull() {
                this[this.tableCCAR_QuestionTrackList.GYSAcceptTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSequenceNull() {
                return this.IsNull(this.tableCCAR_QuestionTrackList.SequenceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSequenceNull() {
                this[this.tableCCAR_QuestionTrackList.SequenceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndTimeNull() {
                return this.IsNull(this.tableCCAR_QuestionTrackList.EndTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndTimeNull() {
                this[this.tableCCAR_QuestionTrackList.EndTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastCheckTimeNull() {
                return this.IsNull(this.tableCCAR_QuestionTrackList.LastCheckTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastCheckTimeNull() {
                this[this.tableCCAR_QuestionTrackList.LastCheckTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemartNull() {
                return this.IsNull(this.tableCCAR_QuestionTrackList.RemartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemartNull() {
                this[this.tableCCAR_QuestionTrackList.RemartColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OF_AnswerRow : global::System.Data.DataRow {
            
            private OF_AnswerDataTable tableOF_Answer;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_AnswerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOF_Answer = ((OF_AnswerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableOF_Answer.IDColumn]));
                }
                set {
                    this[this.tableOF_Answer.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string answerName {
                get {
                    return ((string)(this[this.tableOF_Answer.answerNameColumn]));
                }
                set {
                    this[this.tableOF_Answer.answerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string title {
                get {
                    return ((string)(this[this.tableOF_Answer.titleColumn]));
                }
                set {
                    this[this.tableOF_Answer.titleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string answerContent {
                get {
                    try {
                        return ((string)(this[this.tableOF_Answer.answerContentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_Answer”中列“answerContent”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_Answer.answerContentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime answerTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOF_Answer.answerTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_Answer”中列“answerTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_Answer.answerTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsanswerContentNull() {
                return this.IsNull(this.tableOF_Answer.answerContentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetanswerContentNull() {
                this[this.tableOF_Answer.answerContentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsanswerTimeNull() {
                return this.IsNull(this.tableOF_Answer.answerTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetanswerTimeNull() {
                this[this.tableOF_Answer.answerTimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OF_BillID_StatusRow : global::System.Data.DataRow {
            
            private OF_BillID_StatusDataTable tableOF_BillID_Status;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_BillID_StatusRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOF_BillID_Status = ((OF_BillID_StatusDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableOF_BillID_Status.IDColumn]));
                }
                set {
                    this[this.tableOF_BillID_Status.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Bill_ID {
                get {
                    return ((string)(this[this.tableOF_BillID_Status.Bill_IDColumn]));
                }
                set {
                    this[this.tableOF_BillID_Status.Bill_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UseStatus {
                get {
                    return ((bool)(this[this.tableOF_BillID_Status.UseStatusColumn]));
                }
                set {
                    this[this.tableOF_BillID_Status.UseStatusColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OF_BugCodeRow : global::System.Data.DataRow {
            
            private OF_BugCodeDataTable tableOF_BugCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_BugCodeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOF_BugCode = ((OF_BugCodeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableOF_BugCode.IDColumn]));
                }
                set {
                    this[this.tableOF_BugCode.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BugName {
                get {
                    return ((string)(this[this.tableOF_BugCode.BugNameColumn]));
                }
                set {
                    this[this.tableOF_BugCode.BugNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tableOF_BugCode.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_BugCode”中列“Remark”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_BugCode.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tableOF_BugCode.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tableOF_BugCode.RemarkColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OF_BugMessageInfoRow : global::System.Data.DataRow {
            
            private OF_BugMessageInfoDataTable tableOF_BugMessageInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_BugMessageInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOF_BugMessageInfo = ((OF_BugMessageInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableOF_BugMessageInfo.IDColumn]));
                }
                set {
                    this[this.tableOF_BugMessageInfo.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceID {
                get {
                    try {
                        return ((string)(this[this.tableOF_BugMessageInfo.ServiceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_BugMessageInfo”中列“ServiceID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_BugMessageInfo.ServiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BugCode {
                get {
                    try {
                        return ((string)(this[this.tableOF_BugMessageInfo.BugCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_BugMessageInfo”中列“BugCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_BugMessageInfo.BugCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CarMainBug {
                get {
                    try {
                        return ((string)(this[this.tableOF_BugMessageInfo.CarMainBugColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_BugMessageInfo”中列“CarMainBug”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_BugMessageInfo.CarMainBugColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CarSecendBug {
                get {
                    try {
                        return ((string)(this[this.tableOF_BugMessageInfo.CarSecendBugColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_BugMessageInfo”中列“CarSecendBug”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_BugMessageInfo.CarSecendBugColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Frequency {
                get {
                    try {
                        return ((string)(this[this.tableOF_BugMessageInfo.FrequencyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_BugMessageInfo”中列“Frequency”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_BugMessageInfo.FrequencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Condition {
                get {
                    try {
                        return ((string)(this[this.tableOF_BugMessageInfo.ConditionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_BugMessageInfo”中列“Condition”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_BugMessageInfo.ConditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BugDeclare {
                get {
                    try {
                        return ((string)(this[this.tableOF_BugMessageInfo.BugDeclareColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_BugMessageInfo”中列“BugDeclare”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_BugMessageInfo.BugDeclareColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CVTOilDetection {
                get {
                    try {
                        return ((string)(this[this.tableOF_BugMessageInfo.CVTOilDetectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_BugMessageInfo”中列“CVTOilDetection”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_BugMessageInfo.CVTOilDetectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PressureSensor {
                get {
                    try {
                        return ((string)(this[this.tableOF_BugMessageInfo.PressureSensorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_BugMessageInfo”中列“PressureSensor”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_BugMessageInfo.PressureSensorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActiveSensor {
                get {
                    try {
                        return ((string)(this[this.tableOF_BugMessageInfo.ActiveSensorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_BugMessageInfo”中列“ActiveSensor”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_BugMessageInfo.ActiveSensorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PassivitySensor {
                get {
                    try {
                        return ((string)(this[this.tableOF_BugMessageInfo.PassivitySensorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_BugMessageInfo”中列“PassivitySensor”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_BugMessageInfo.PassivitySensorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShiftKnob {
                get {
                    try {
                        return ((string)(this[this.tableOF_BugMessageInfo.ShiftKnobColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_BugMessageInfo”中列“ShiftKnob”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_BugMessageInfo.ShiftKnobColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OverLinkStatus {
                get {
                    try {
                        return ((string)(this[this.tableOF_BugMessageInfo.OverLinkStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_BugMessageInfo”中列“OverLinkStatus”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_BugMessageInfo.OverLinkStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OilSump {
                get {
                    try {
                        return ((string)(this[this.tableOF_BugMessageInfo.OilSumpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_BugMessageInfo”中列“OilSump”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_BugMessageInfo.OilSumpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PKey {
                get {
                    try {
                        return ((string)(this[this.tableOF_BugMessageInfo.PKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_BugMessageInfo”中列“PKey”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_BugMessageInfo.PKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RKey {
                get {
                    try {
                        return ((string)(this[this.tableOF_BugMessageInfo.RKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_BugMessageInfo”中列“RKey”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_BugMessageInfo.RKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NKey {
                get {
                    try {
                        return ((string)(this[this.tableOF_BugMessageInfo.NKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_BugMessageInfo”中列“NKey”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_BugMessageInfo.NKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DKey {
                get {
                    try {
                        return ((string)(this[this.tableOF_BugMessageInfo.DKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_BugMessageInfo”中列“DKey”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_BugMessageInfo.DKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SKey {
                get {
                    try {
                        return ((string)(this[this.tableOF_BugMessageInfo.SKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_BugMessageInfo”中列“SKey”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_BugMessageInfo.SKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tableOF_BugMessageInfo.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_BugMessageInfo”中列“Remark”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_BugMessageInfo.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceIDNull() {
                return this.IsNull(this.tableOF_BugMessageInfo.ServiceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceIDNull() {
                this[this.tableOF_BugMessageInfo.ServiceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBugCodeNull() {
                return this.IsNull(this.tableOF_BugMessageInfo.BugCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBugCodeNull() {
                this[this.tableOF_BugMessageInfo.BugCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCarMainBugNull() {
                return this.IsNull(this.tableOF_BugMessageInfo.CarMainBugColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCarMainBugNull() {
                this[this.tableOF_BugMessageInfo.CarMainBugColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCarSecendBugNull() {
                return this.IsNull(this.tableOF_BugMessageInfo.CarSecendBugColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCarSecendBugNull() {
                this[this.tableOF_BugMessageInfo.CarSecendBugColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrequencyNull() {
                return this.IsNull(this.tableOF_BugMessageInfo.FrequencyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrequencyNull() {
                this[this.tableOF_BugMessageInfo.FrequencyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConditionNull() {
                return this.IsNull(this.tableOF_BugMessageInfo.ConditionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConditionNull() {
                this[this.tableOF_BugMessageInfo.ConditionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBugDeclareNull() {
                return this.IsNull(this.tableOF_BugMessageInfo.BugDeclareColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBugDeclareNull() {
                this[this.tableOF_BugMessageInfo.BugDeclareColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCVTOilDetectionNull() {
                return this.IsNull(this.tableOF_BugMessageInfo.CVTOilDetectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCVTOilDetectionNull() {
                this[this.tableOF_BugMessageInfo.CVTOilDetectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPressureSensorNull() {
                return this.IsNull(this.tableOF_BugMessageInfo.PressureSensorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPressureSensorNull() {
                this[this.tableOF_BugMessageInfo.PressureSensorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActiveSensorNull() {
                return this.IsNull(this.tableOF_BugMessageInfo.ActiveSensorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActiveSensorNull() {
                this[this.tableOF_BugMessageInfo.ActiveSensorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPassivitySensorNull() {
                return this.IsNull(this.tableOF_BugMessageInfo.PassivitySensorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPassivitySensorNull() {
                this[this.tableOF_BugMessageInfo.PassivitySensorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShiftKnobNull() {
                return this.IsNull(this.tableOF_BugMessageInfo.ShiftKnobColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShiftKnobNull() {
                this[this.tableOF_BugMessageInfo.ShiftKnobColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverLinkStatusNull() {
                return this.IsNull(this.tableOF_BugMessageInfo.OverLinkStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverLinkStatusNull() {
                this[this.tableOF_BugMessageInfo.OverLinkStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOilSumpNull() {
                return this.IsNull(this.tableOF_BugMessageInfo.OilSumpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOilSumpNull() {
                this[this.tableOF_BugMessageInfo.OilSumpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPKeyNull() {
                return this.IsNull(this.tableOF_BugMessageInfo.PKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPKeyNull() {
                this[this.tableOF_BugMessageInfo.PKeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRKeyNull() {
                return this.IsNull(this.tableOF_BugMessageInfo.RKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRKeyNull() {
                this[this.tableOF_BugMessageInfo.RKeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNKeyNull() {
                return this.IsNull(this.tableOF_BugMessageInfo.NKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNKeyNull() {
                this[this.tableOF_BugMessageInfo.NKeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDKeyNull() {
                return this.IsNull(this.tableOF_BugMessageInfo.DKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDKeyNull() {
                this[this.tableOF_BugMessageInfo.DKeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSKeyNull() {
                return this.IsNull(this.tableOF_BugMessageInfo.SKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSKeyNull() {
                this[this.tableOF_BugMessageInfo.SKeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tableOF_BugMessageInfo.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tableOF_BugMessageInfo.RemarkColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OF_CarBugStatusRow : global::System.Data.DataRow {
            
            private OF_CarBugStatusDataTable tableOF_CarBugStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_CarBugStatusRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOF_CarBugStatus = ((OF_CarBugStatusDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableOF_CarBugStatus.IDColumn]));
                }
                set {
                    this[this.tableOF_CarBugStatus.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BugCode {
                get {
                    return ((string)(this[this.tableOF_CarBugStatus.BugCodeColumn]));
                }
                set {
                    this[this.tableOF_CarBugStatus.BugCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BugName {
                get {
                    return ((string)(this[this.tableOF_CarBugStatus.BugNameColumn]));
                }
                set {
                    this[this.tableOF_CarBugStatus.BugNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tableOF_CarBugStatus.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_CarBugStatus”中列“Remark”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_CarBugStatus.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tableOF_CarBugStatus.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tableOF_CarBugStatus.RemarkColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OF_DownRecordRow : global::System.Data.DataRow {
            
            private OF_DownRecordDataTable tableOF_DownRecord;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_DownRecordRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOF_DownRecord = ((OF_DownRecordDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableOF_DownRecord.IDColumn]));
                }
                set {
                    this[this.tableOF_DownRecord.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FileID {
                get {
                    try {
                        return ((int)(this[this.tableOF_DownRecord.FileIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_DownRecord”中列“FileID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_DownRecord.FileIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DownUser {
                get {
                    return ((string)(this[this.tableOF_DownRecord.DownUserColumn]));
                }
                set {
                    this[this.tableOF_DownRecord.DownUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DownTime {
                get {
                    return ((global::System.DateTime)(this[this.tableOF_DownRecord.DownTimeColumn]));
                }
                set {
                    this[this.tableOF_DownRecord.DownTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DownContxt {
                get {
                    return ((string)(this[this.tableOF_DownRecord.DownContxtColumn]));
                }
                set {
                    this[this.tableOF_DownRecord.DownContxtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileIDNull() {
                return this.IsNull(this.tableOF_DownRecord.FileIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileIDNull() {
                this[this.tableOF_DownRecord.FileIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OF_LoginLogRow : global::System.Data.DataRow {
            
            private OF_LoginLogDataTable tableOF_LoginLog;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_LoginLogRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOF_LoginLog = ((OF_LoginLogDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableOF_LoginLog.IDColumn]));
                }
                set {
                    this[this.tableOF_LoginLog.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserCode {
                get {
                    return ((string)(this[this.tableOF_LoginLog.UserCodeColumn]));
                }
                set {
                    this[this.tableOF_LoginLog.UserCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrueName {
                get {
                    return ((string)(this[this.tableOF_LoginLog.TrueNameColumn]));
                }
                set {
                    this[this.tableOF_LoginLog.TrueNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    return ((global::System.DateTime)(this[this.tableOF_LoginLog.DateColumn]));
                }
                set {
                    this[this.tableOF_LoginLog.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IP {
                get {
                    return ((string)(this[this.tableOF_LoginLog.IPColumn]));
                }
                set {
                    this[this.tableOF_LoginLog.IPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Amount {
                get {
                    return ((int)(this[this.tableOF_LoginLog.AmountColumn]));
                }
                set {
                    this[this.tableOF_LoginLog.AmountColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OF_NewsRow : global::System.Data.DataRow {
            
            private OF_NewsDataTable tableOF_News;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_NewsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOF_News = ((OF_NewsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableOF_News.IDColumn]));
                }
                set {
                    this[this.tableOF_News.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    return ((string)(this[this.tableOF_News.TitleColumn]));
                }
                set {
                    this[this.tableOF_News.TitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewsUrl {
                get {
                    return ((string)(this[this.tableOF_News.NewsUrlColumn]));
                }
                set {
                    this[this.tableOF_News.NewsUrlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NewsDate {
                get {
                    return ((global::System.DateTime)(this[this.tableOF_News.NewsDateColumn]));
                }
                set {
                    this[this.tableOF_News.NewsDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NewsType {
                get {
                    return ((int)(this[this.tableOF_News.NewsTypeColumn]));
                }
                set {
                    this[this.tableOF_News.NewsTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsTypeRow OF_NewsTypeRow {
                get {
                    return ((OF_NewsTypeRow)(this.GetParentRow(this.Table.ParentRelations["FK_OF_News_OF_NewsType"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_OF_News_OF_NewsType"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OF_NewsAudienceRow : global::System.Data.DataRow {
            
            private OF_NewsAudienceDataTable tableOF_NewsAudience;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_NewsAudienceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOF_NewsAudience = ((OF_NewsAudienceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableOF_NewsAudience.IDColumn]));
                }
                set {
                    this[this.tableOF_NewsAudience.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NewsID {
                get {
                    return ((int)(this[this.tableOF_NewsAudience.NewsIDColumn]));
                }
                set {
                    this[this.tableOF_NewsAudience.NewsIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AudienceType {
                get {
                    return ((string)(this[this.tableOF_NewsAudience.AudienceTypeColumn]));
                }
                set {
                    this[this.tableOF_NewsAudience.AudienceTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AudienceName {
                get {
                    return ((string)(this[this.tableOF_NewsAudience.AudienceNameColumn]));
                }
                set {
                    this[this.tableOF_NewsAudience.AudienceNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OF_NewsFileRow : global::System.Data.DataRow {
            
            private OF_NewsFileDataTable tableOF_NewsFile;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_NewsFileRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOF_NewsFile = ((OF_NewsFileDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableOF_NewsFile.IDColumn]));
                }
                set {
                    this[this.tableOF_NewsFile.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sender {
                get {
                    return ((string)(this[this.tableOF_NewsFile.senderColumn]));
                }
                set {
                    this[this.tableOF_NewsFile.senderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string title {
                get {
                    return ((string)(this[this.tableOF_NewsFile.titleColumn]));
                }
                set {
                    this[this.tableOF_NewsFile.titleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string contents {
                get {
                    try {
                        return ((string)(this[this.tableOF_NewsFile.contentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_NewsFile”中列“contents”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_NewsFile.contentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fileNames {
                get {
                    try {
                        return ((string)(this[this.tableOF_NewsFile.fileNamesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_NewsFile”中列“fileNames”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_NewsFile.fileNamesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string filePath {
                get {
                    try {
                        return ((string)(this[this.tableOF_NewsFile.filePathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_NewsFile”中列“filePath”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_NewsFile.filePathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string receiver {
                get {
                    try {
                        return ((string)(this[this.tableOF_NewsFile.receiverColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_NewsFile”中列“receiver”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_NewsFile.receiverColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime releaseTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOF_NewsFile.releaseTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_NewsFile”中列“releaseTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_NewsFile.releaseTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string newsType {
                get {
                    try {
                        return ((string)(this[this.tableOF_NewsFile.newsTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_NewsFile”中列“newsType”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_NewsFile.newsTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscontentsNull() {
                return this.IsNull(this.tableOF_NewsFile.contentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcontentsNull() {
                this[this.tableOF_NewsFile.contentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfileNamesNull() {
                return this.IsNull(this.tableOF_NewsFile.fileNamesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfileNamesNull() {
                this[this.tableOF_NewsFile.fileNamesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfilePathNull() {
                return this.IsNull(this.tableOF_NewsFile.filePathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfilePathNull() {
                this[this.tableOF_NewsFile.filePathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreceiverNull() {
                return this.IsNull(this.tableOF_NewsFile.receiverColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreceiverNull() {
                this[this.tableOF_NewsFile.receiverColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreleaseTimeNull() {
                return this.IsNull(this.tableOF_NewsFile.releaseTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreleaseTimeNull() {
                this[this.tableOF_NewsFile.releaseTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnewsTypeNull() {
                return this.IsNull(this.tableOF_NewsFile.newsTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnewsTypeNull() {
                this[this.tableOF_NewsFile.newsTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OF_NewsTypeRow : global::System.Data.DataRow {
            
            private OF_NewsTypeDataTable tableOF_NewsType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_NewsTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOF_NewsType = ((OF_NewsTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TypeID {
                get {
                    return ((int)(this[this.tableOF_NewsType.TypeIDColumn]));
                }
                set {
                    this[this.tableOF_NewsType.TypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TypeName {
                get {
                    return ((string)(this[this.tableOF_NewsType.TypeNameColumn]));
                }
                set {
                    this[this.tableOF_NewsType.TypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsRow[] GetOF_NewsRows() {
                if ((this.Table.ChildRelations["FK_OF_News_OF_NewsType"] == null)) {
                    return new OF_NewsRow[0];
                }
                else {
                    return ((OF_NewsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_OF_News_OF_NewsType"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OF_OrderForm_ArrivalInfoRow : global::System.Data.DataRow {
            
            private OF_OrderForm_ArrivalInfoDataTable tableOF_OrderForm_ArrivalInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_OrderForm_ArrivalInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOF_OrderForm_ArrivalInfo = ((OF_OrderForm_ArrivalInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableOF_OrderForm_ArrivalInfo.IDColumn]));
                }
                set {
                    this[this.tableOF_OrderForm_ArrivalInfo.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ListID {
                get {
                    return ((int)(this[this.tableOF_OrderForm_ArrivalInfo.ListIDColumn]));
                }
                set {
                    this[this.tableOF_OrderForm_ArrivalInfo.ListIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InBillID {
                get {
                    return ((string)(this[this.tableOF_OrderForm_ArrivalInfo.InBillIDColumn]));
                }
                set {
                    this[this.tableOF_OrderForm_ArrivalInfo.InBillIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BatchNo {
                get {
                    return ((string)(this[this.tableOF_OrderForm_ArrivalInfo.BatchNoColumn]));
                }
                set {
                    this[this.tableOF_OrderForm_ArrivalInfo.BatchNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ActualDate {
                get {
                    return ((global::System.DateTime)(this[this.tableOF_OrderForm_ArrivalInfo.ActualDateColumn]));
                }
                set {
                    this[this.tableOF_OrderForm_ArrivalInfo.ActualDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ActuaQuantity {
                get {
                    return ((decimal)(this[this.tableOF_OrderForm_ArrivalInfo.ActuaQuantityColumn]));
                }
                set {
                    this[this.tableOF_OrderForm_ArrivalInfo.ActuaQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EligibilityQuantity {
                get {
                    return ((decimal)(this[this.tableOF_OrderForm_ArrivalInfo.EligibilityQuantityColumn]));
                }
                set {
                    this[this.tableOF_OrderForm_ArrivalInfo.EligibilityQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ConcessionQuantity {
                get {
                    return ((decimal)(this[this.tableOF_OrderForm_ArrivalInfo.ConcessionQuantityColumn]));
                }
                set {
                    this[this.tableOF_OrderForm_ArrivalInfo.ConcessionQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DestructQuantity {
                get {
                    return ((decimal)(this[this.tableOF_OrderForm_ArrivalInfo.DestructQuantityColumn]));
                }
                set {
                    this[this.tableOF_OrderForm_ArrivalInfo.DestructQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RejectQuantity {
                get {
                    return ((decimal)(this[this.tableOF_OrderForm_ArrivalInfo.RejectQuantityColumn]));
                }
                set {
                    this[this.tableOF_OrderForm_ArrivalInfo.RejectQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QualityInfo {
                get {
                    return ((string)(this[this.tableOF_OrderForm_ArrivalInfo.QualityInfoColumn]));
                }
                set {
                    this[this.tableOF_OrderForm_ArrivalInfo.QualityInfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderFormGoodsRow OF_OrderFormGoodsRow {
                get {
                    return ((OF_OrderFormGoodsRow)(this.GetParentRow(this.Table.ParentRelations["FK_OF_OrderForm_ArrivalInfo_OF_OrderFormGoods"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_OF_OrderForm_ArrivalInfo_OF_OrderFormGoods"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OF_OrderFormGoodsRow : global::System.Data.DataRow {
            
            private OF_OrderFormGoodsDataTable tableOF_OrderFormGoods;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_OrderFormGoodsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOF_OrderFormGoods = ((OF_OrderFormGoodsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableOF_OrderFormGoods.IDColumn]));
                }
                set {
                    this[this.tableOF_OrderFormGoods.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderFormNumber {
                get {
                    return ((string)(this[this.tableOF_OrderFormGoods.OrderFormNumberColumn]));
                }
                set {
                    this[this.tableOF_OrderFormGoods.OrderFormNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsCode {
                get {
                    return ((string)(this[this.tableOF_OrderFormGoods.GoodsCodeColumn]));
                }
                set {
                    this[this.tableOF_OrderFormGoods.GoodsCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsName {
                get {
                    return ((string)(this[this.tableOF_OrderFormGoods.GoodsNameColumn]));
                }
                set {
                    this[this.tableOF_OrderFormGoods.GoodsNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Spec {
                get {
                    return ((string)(this[this.tableOF_OrderFormGoods.SpecColumn]));
                }
                set {
                    this[this.tableOF_OrderFormGoods.SpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ArriveTime {
                get {
                    return ((global::System.DateTime)(this[this.tableOF_OrderFormGoods.ArriveTimeColumn]));
                }
                set {
                    this[this.tableOF_OrderFormGoods.ArriveTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OrderCount {
                get {
                    return ((decimal)(this[this.tableOF_OrderFormGoods.OrderCountColumn]));
                }
                set {
                    this[this.tableOF_OrderFormGoods.OrderCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncept {
                get {
                    return ((bool)(this[this.tableOF_OrderFormGoods.IsInceptColumn]));
                }
                set {
                    this[this.tableOF_OrderFormGoods.IsInceptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    return ((string)(this[this.tableOF_OrderFormGoods.StatusColumn]));
                }
                set {
                    this[this.tableOF_OrderFormGoods.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderFormInfoRow OF_OrderFormInfoRow {
                get {
                    return ((OF_OrderFormInfoRow)(this.GetParentRow(this.Table.ParentRelations["FK_OF_OrderFormGoods_OF_OrderFormInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_OF_OrderFormGoods_OF_OrderFormInfo"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderForm_ArrivalInfoRow[] GetOF_OrderForm_ArrivalInfoRows() {
                if ((this.Table.ChildRelations["FK_OF_OrderForm_ArrivalInfo_OF_OrderFormGoods"] == null)) {
                    return new OF_OrderForm_ArrivalInfoRow[0];
                }
                else {
                    return ((OF_OrderForm_ArrivalInfoRow[])(base.GetChildRows(this.Table.ChildRelations["FK_OF_OrderForm_ArrivalInfo_OF_OrderFormGoods"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OF_OrderFormInfoRow : global::System.Data.DataRow {
            
            private OF_OrderFormInfoDataTable tableOF_OrderFormInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OF_OrderFormInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOF_OrderFormInfo = ((OF_OrderFormInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderFormNumber {
                get {
                    return ((string)(this[this.tableOF_OrderFormInfo.OrderFormNumberColumn]));
                }
                set {
                    this[this.tableOF_OrderFormInfo.OrderFormNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Provider {
                get {
                    try {
                        return ((string)(this[this.tableOF_OrderFormInfo.ProviderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_OrderFormInfo”中列“Provider”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_OrderFormInfo.ProviderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Buyer {
                get {
                    try {
                        return ((string)(this[this.tableOF_OrderFormInfo.BuyerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_OrderFormInfo”中列“Buyer”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_OrderFormInfo.BuyerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProviderLinkMan {
                get {
                    try {
                        return ((string)(this[this.tableOF_OrderFormInfo.ProviderLinkManColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_OrderFormInfo”中列“ProviderLinkMan”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_OrderFormInfo.ProviderLinkManColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProviderLinkMode {
                get {
                    try {
                        return ((string)(this[this.tableOF_OrderFormInfo.ProviderLinkModeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_OrderFormInfo”中列“ProviderLinkMode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_OrderFormInfo.ProviderLinkModeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tableOF_OrderFormInfo.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_OrderFormInfo”中列“Remark”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_OrderFormInfo.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOF_OrderFormInfo.CreateDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“OF_OrderFormInfo”中列“CreateDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableOF_OrderFormInfo.CreateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProviderNull() {
                return this.IsNull(this.tableOF_OrderFormInfo.ProviderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProviderNull() {
                this[this.tableOF_OrderFormInfo.ProviderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyerNull() {
                return this.IsNull(this.tableOF_OrderFormInfo.BuyerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyerNull() {
                this[this.tableOF_OrderFormInfo.BuyerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProviderLinkManNull() {
                return this.IsNull(this.tableOF_OrderFormInfo.ProviderLinkManColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProviderLinkManNull() {
                this[this.tableOF_OrderFormInfo.ProviderLinkManColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProviderLinkModeNull() {
                return this.IsNull(this.tableOF_OrderFormInfo.ProviderLinkModeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProviderLinkModeNull() {
                this[this.tableOF_OrderFormInfo.ProviderLinkModeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tableOF_OrderFormInfo.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tableOF_OrderFormInfo.RemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreateDateNull() {
                return this.IsNull(this.tableOF_OrderFormInfo.CreateDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreateDateNull() {
                this[this.tableOF_OrderFormInfo.CreateDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderFormGoodsRow[] GetOF_OrderFormGoodsRows() {
                if ((this.Table.ChildRelations["FK_OF_OrderFormGoods_OF_OrderFormInfo"] == null)) {
                    return new OF_OrderFormGoodsRow[0];
                }
                else {
                    return ((OF_OrderFormGoodsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_OF_OrderFormGoods_OF_OrderFormInfo"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class S_AfterServiceRow : global::System.Data.DataRow {
            
            private S_AfterServiceDataTable tableS_AfterService;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal S_AfterServiceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableS_AfterService = ((S_AfterServiceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableS_AfterService.IDColumn]));
                }
                set {
                    this[this.tableS_AfterService.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceID {
                get {
                    return ((string)(this[this.tableS_AfterService.ServiceIDColumn]));
                }
                set {
                    this[this.tableS_AfterService.ServiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MessageSource {
                get {
                    return ((string)(this[this.tableS_AfterService.MessageSourceColumn]));
                }
                set {
                    this[this.tableS_AfterService.MessageSourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServerType {
                get {
                    return ((string)(this[this.tableS_AfterService.ServerTypeColumn]));
                }
                set {
                    this[this.tableS_AfterService.ServerTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContentType {
                get {
                    return ((string)(this[this.tableS_AfterService.ContentTypeColumn]));
                }
                set {
                    this[this.tableS_AfterService.ContentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AcceptName {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.AcceptNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“AcceptName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.AcceptNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AcceptTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableS_AfterService.AcceptTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“AcceptTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.AcceptTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SiteName {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.SiteNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“SiteName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.SiteNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkTel {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.LinkTelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“LinkTel”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.LinkTelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.UserNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“UserName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserTel {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.UserTelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“UserTel”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.UserTelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserAddress {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.UserAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“UserAddress”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.UserAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CarModel {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.CarModelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“CarModel”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.CarModelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CVTCode {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.CVTCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“CVTCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.CVTCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CVTID {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.CVTIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“CVTID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.CVTIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChassisNum {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.ChassisNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“ChassisNum”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.ChassisNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BugAddress {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.BugAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“BugAddress”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.BugAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuyCarTime {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.BuyCarTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“BuyCarTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.BuyCarTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RunMileage {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.RunMileageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“RunMileage”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.RunMileageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseProperty {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.UsePropertyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“UseProperty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.UsePropertyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserAttitude {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.UserAttitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“UserAttitude”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.UserAttitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BugDescribe {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.BugDescribeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“BugDescribe”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.BugDescribeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceIdea {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.ServiceIdeaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“ServiceIdea”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.ServiceIdeaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProcessMode {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.ProcessModeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“ProcessMode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.ProcessModeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProcessName {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.ProcessNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“ProcessName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.ProcessNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ProcessTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableS_AfterService.ProcessTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“ProcessTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.ProcessTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiagnoseSituation {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.DiagnoseSituationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“DiagnoseSituation”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.DiagnoseSituationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Solution {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.SolutionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“Solution”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.SolutionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProcessResult {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.ProcessResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“ProcessResult”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.ProcessResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckName {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.CheckNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“CheckName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.CheckNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CheckTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableS_AfterService.CheckTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“CheckTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.CheckTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RepairQuality {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.RepairQualityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“RepairQuality”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.RepairQualityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceAttitude {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.ServiceAttitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“ServiceAttitude”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.ServiceAttitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsCharge {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.IsChargeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“IsCharge”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.IsChargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableS_AfterService.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“Amount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FailureResults {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.FailureResultsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“FailureResults”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.FailureResultsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReturnName {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.ReturnNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“ReturnName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.ReturnNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ReturnTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableS_AfterService.ReturnTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“ReturnTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.ReturnTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FKBillID {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.FKBillIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“FKBillID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.FKBillIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    return ((string)(this[this.tableS_AfterService.StatusColumn]));
                }
                set {
                    this[this.tableS_AfterService.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PY {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.PYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“PY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.PYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WB {
                get {
                    try {
                        return ((string)(this[this.tableS_AfterService.WBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_AfterService”中列“WB”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_AfterService.WBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcceptNameNull() {
                return this.IsNull(this.tableS_AfterService.AcceptNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcceptNameNull() {
                this[this.tableS_AfterService.AcceptNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcceptTimeNull() {
                return this.IsNull(this.tableS_AfterService.AcceptTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcceptTimeNull() {
                this[this.tableS_AfterService.AcceptTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteNameNull() {
                return this.IsNull(this.tableS_AfterService.SiteNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteNameNull() {
                this[this.tableS_AfterService.SiteNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinkTelNull() {
                return this.IsNull(this.tableS_AfterService.LinkTelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinkTelNull() {
                this[this.tableS_AfterService.LinkTelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserNameNull() {
                return this.IsNull(this.tableS_AfterService.UserNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserNameNull() {
                this[this.tableS_AfterService.UserNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserTelNull() {
                return this.IsNull(this.tableS_AfterService.UserTelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserTelNull() {
                this[this.tableS_AfterService.UserTelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserAddressNull() {
                return this.IsNull(this.tableS_AfterService.UserAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserAddressNull() {
                this[this.tableS_AfterService.UserAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCarModelNull() {
                return this.IsNull(this.tableS_AfterService.CarModelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCarModelNull() {
                this[this.tableS_AfterService.CarModelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCVTCodeNull() {
                return this.IsNull(this.tableS_AfterService.CVTCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCVTCodeNull() {
                this[this.tableS_AfterService.CVTCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCVTIDNull() {
                return this.IsNull(this.tableS_AfterService.CVTIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCVTIDNull() {
                this[this.tableS_AfterService.CVTIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChassisNumNull() {
                return this.IsNull(this.tableS_AfterService.ChassisNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChassisNumNull() {
                this[this.tableS_AfterService.ChassisNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBugAddressNull() {
                return this.IsNull(this.tableS_AfterService.BugAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBugAddressNull() {
                this[this.tableS_AfterService.BugAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyCarTimeNull() {
                return this.IsNull(this.tableS_AfterService.BuyCarTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyCarTimeNull() {
                this[this.tableS_AfterService.BuyCarTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunMileageNull() {
                return this.IsNull(this.tableS_AfterService.RunMileageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunMileageNull() {
                this[this.tableS_AfterService.RunMileageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsePropertyNull() {
                return this.IsNull(this.tableS_AfterService.UsePropertyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsePropertyNull() {
                this[this.tableS_AfterService.UsePropertyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserAttitudeNull() {
                return this.IsNull(this.tableS_AfterService.UserAttitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserAttitudeNull() {
                this[this.tableS_AfterService.UserAttitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBugDescribeNull() {
                return this.IsNull(this.tableS_AfterService.BugDescribeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBugDescribeNull() {
                this[this.tableS_AfterService.BugDescribeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceIdeaNull() {
                return this.IsNull(this.tableS_AfterService.ServiceIdeaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceIdeaNull() {
                this[this.tableS_AfterService.ServiceIdeaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcessModeNull() {
                return this.IsNull(this.tableS_AfterService.ProcessModeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcessModeNull() {
                this[this.tableS_AfterService.ProcessModeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcessNameNull() {
                return this.IsNull(this.tableS_AfterService.ProcessNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcessNameNull() {
                this[this.tableS_AfterService.ProcessNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcessTimeNull() {
                return this.IsNull(this.tableS_AfterService.ProcessTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcessTimeNull() {
                this[this.tableS_AfterService.ProcessTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiagnoseSituationNull() {
                return this.IsNull(this.tableS_AfterService.DiagnoseSituationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiagnoseSituationNull() {
                this[this.tableS_AfterService.DiagnoseSituationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSolutionNull() {
                return this.IsNull(this.tableS_AfterService.SolutionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSolutionNull() {
                this[this.tableS_AfterService.SolutionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcessResultNull() {
                return this.IsNull(this.tableS_AfterService.ProcessResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcessResultNull() {
                this[this.tableS_AfterService.ProcessResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckNameNull() {
                return this.IsNull(this.tableS_AfterService.CheckNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckNameNull() {
                this[this.tableS_AfterService.CheckNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckTimeNull() {
                return this.IsNull(this.tableS_AfterService.CheckTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckTimeNull() {
                this[this.tableS_AfterService.CheckTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRepairQualityNull() {
                return this.IsNull(this.tableS_AfterService.RepairQualityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRepairQualityNull() {
                this[this.tableS_AfterService.RepairQualityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceAttitudeNull() {
                return this.IsNull(this.tableS_AfterService.ServiceAttitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceAttitudeNull() {
                this[this.tableS_AfterService.ServiceAttitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsChargeNull() {
                return this.IsNull(this.tableS_AfterService.IsChargeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsChargeNull() {
                this[this.tableS_AfterService.IsChargeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableS_AfterService.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableS_AfterService.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFailureResultsNull() {
                return this.IsNull(this.tableS_AfterService.FailureResultsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFailureResultsNull() {
                this[this.tableS_AfterService.FailureResultsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReturnNameNull() {
                return this.IsNull(this.tableS_AfterService.ReturnNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReturnNameNull() {
                this[this.tableS_AfterService.ReturnNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReturnTimeNull() {
                return this.IsNull(this.tableS_AfterService.ReturnTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReturnTimeNull() {
                this[this.tableS_AfterService.ReturnTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFKBillIDNull() {
                return this.IsNull(this.tableS_AfterService.FKBillIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFKBillIDNull() {
                this[this.tableS_AfterService.FKBillIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPYNull() {
                return this.IsNull(this.tableS_AfterService.PYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPYNull() {
                this[this.tableS_AfterService.PYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWBNull() {
                return this.IsNull(this.tableS_AfterService.WBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWBNull() {
                this[this.tableS_AfterService.WBColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class S_CommtionRow : global::System.Data.DataRow {
            
            private S_CommtionDataTable tableS_Commtion;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal S_CommtionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableS_Commtion = ((S_CommtionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableS_Commtion.IDColumn]));
                }
                set {
                    this[this.tableS_Commtion.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    return ((string)(this[this.tableS_Commtion.TypeColumn]));
                }
                set {
                    this[this.tableS_Commtion.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remarl {
                get {
                    try {
                        return ((string)(this[this.tableS_Commtion.RemarlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_Commtion”中列“Remarl”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_Commtion.RemarlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarlNull() {
                return this.IsNull(this.tableS_Commtion.RemarlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarlNull() {
                this[this.tableS_Commtion.RemarlColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class S_MessageSourceRow : global::System.Data.DataRow {
            
            private S_MessageSourceDataTable tableS_MessageSource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal S_MessageSourceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableS_MessageSource = ((S_MessageSourceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableS_MessageSource.IDColumn]));
                }
                set {
                    this[this.tableS_MessageSource.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MessageCode {
                get {
                    return ((string)(this[this.tableS_MessageSource.MessageCodeColumn]));
                }
                set {
                    this[this.tableS_MessageSource.MessageCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MessageName {
                get {
                    return ((string)(this[this.tableS_MessageSource.MessageNameColumn]));
                }
                set {
                    this[this.tableS_MessageSource.MessageNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tableS_MessageSource.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_MessageSource”中列“Remark”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_MessageSource.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tableS_MessageSource.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tableS_MessageSource.RemarkColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class S_ReplaceAccessoryRow : global::System.Data.DataRow {
            
            private S_ReplaceAccessoryDataTable tableS_ReplaceAccessory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal S_ReplaceAccessoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableS_ReplaceAccessory = ((S_ReplaceAccessoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableS_ReplaceAccessory.IDColumn]));
                }
                set {
                    this[this.tableS_ReplaceAccessory.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceID {
                get {
                    return ((string)(this[this.tableS_ReplaceAccessory.ServiceIDColumn]));
                }
                set {
                    this[this.tableS_ReplaceAccessory.ServiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OldGoodsName {
                get {
                    return ((string)(this[this.tableS_ReplaceAccessory.OldGoodsNameColumn]));
                }
                set {
                    this[this.tableS_ReplaceAccessory.OldGoodsNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OldGoodsCode {
                get {
                    return ((string)(this[this.tableS_ReplaceAccessory.OldGoodsCodeColumn]));
                }
                set {
                    this[this.tableS_ReplaceAccessory.OldGoodsCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OldSpec {
                get {
                    try {
                        return ((string)(this[this.tableS_ReplaceAccessory.OldSpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ReplaceAccessory”中列“OldSpec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ReplaceAccessory.OldSpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OldCvtID {
                get {
                    try {
                        return ((string)(this[this.tableS_ReplaceAccessory.OldCvtIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ReplaceAccessory”中列“OldCvtID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ReplaceAccessory.OldCvtIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BackTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableS_ReplaceAccessory.BackTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ReplaceAccessory”中列“BackTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ReplaceAccessory.BackTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewGoodsName {
                get {
                    try {
                        return ((string)(this[this.tableS_ReplaceAccessory.NewGoodsNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ReplaceAccessory”中列“NewGoodsName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ReplaceAccessory.NewGoodsNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewGoodsCode {
                get {
                    try {
                        return ((string)(this[this.tableS_ReplaceAccessory.NewGoodsCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ReplaceAccessory”中列“NewGoodsCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ReplaceAccessory.NewGoodsCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewSpec {
                get {
                    try {
                        return ((string)(this[this.tableS_ReplaceAccessory.NewSpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ReplaceAccessory”中列“NewSpec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ReplaceAccessory.NewSpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewCvtID {
                get {
                    try {
                        return ((string)(this[this.tableS_ReplaceAccessory.NewCvtIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ReplaceAccessory”中列“NewCvtID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ReplaceAccessory.NewCvtIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    try {
                        return ((int)(this[this.tableS_ReplaceAccessory.CountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ReplaceAccessory”中列“Count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ReplaceAccessory.CountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Unit {
                get {
                    try {
                        return ((string)(this[this.tableS_ReplaceAccessory.UnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ReplaceAccessory”中列“Unit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ReplaceAccessory.UnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tableS_ReplaceAccessory.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ReplaceAccessory”中列“Remark”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ReplaceAccessory.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOldSpecNull() {
                return this.IsNull(this.tableS_ReplaceAccessory.OldSpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOldSpecNull() {
                this[this.tableS_ReplaceAccessory.OldSpecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOldCvtIDNull() {
                return this.IsNull(this.tableS_ReplaceAccessory.OldCvtIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOldCvtIDNull() {
                this[this.tableS_ReplaceAccessory.OldCvtIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackTimeNull() {
                return this.IsNull(this.tableS_ReplaceAccessory.BackTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackTimeNull() {
                this[this.tableS_ReplaceAccessory.BackTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewGoodsNameNull() {
                return this.IsNull(this.tableS_ReplaceAccessory.NewGoodsNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewGoodsNameNull() {
                this[this.tableS_ReplaceAccessory.NewGoodsNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewGoodsCodeNull() {
                return this.IsNull(this.tableS_ReplaceAccessory.NewGoodsCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewGoodsCodeNull() {
                this[this.tableS_ReplaceAccessory.NewGoodsCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewSpecNull() {
                return this.IsNull(this.tableS_ReplaceAccessory.NewSpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewSpecNull() {
                this[this.tableS_ReplaceAccessory.NewSpecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewCvtIDNull() {
                return this.IsNull(this.tableS_ReplaceAccessory.NewCvtIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewCvtIDNull() {
                this[this.tableS_ReplaceAccessory.NewCvtIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountNull() {
                return this.IsNull(this.tableS_ReplaceAccessory.CountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountNull() {
                this[this.tableS_ReplaceAccessory.CountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitNull() {
                return this.IsNull(this.tableS_ReplaceAccessory.UnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitNull() {
                this[this.tableS_ReplaceAccessory.UnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tableS_ReplaceAccessory.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tableS_ReplaceAccessory.RemarkColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class S_ServiceFeedBackRow : global::System.Data.DataRow {
            
            private S_ServiceFeedBackDataTable tableS_ServiceFeedBack;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal S_ServiceFeedBackRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableS_ServiceFeedBack = ((S_ServiceFeedBackDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableS_ServiceFeedBack.IDColumn]));
                }
                set {
                    this[this.tableS_ServiceFeedBack.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FK_Bill_ID {
                get {
                    return ((string)(this[this.tableS_ServiceFeedBack.FK_Bill_IDColumn]));
                }
                set {
                    this[this.tableS_ServiceFeedBack.FK_Bill_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceID {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.ServiceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“ServiceID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.ServiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MessageSource {
                get {
                    return ((string)(this[this.tableS_ServiceFeedBack.MessageSourceColumn]));
                }
                set {
                    this[this.tableS_ServiceFeedBack.MessageSourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SiteName {
                get {
                    return ((string)(this[this.tableS_ServiceFeedBack.SiteNameColumn]));
                }
                set {
                    this[this.tableS_ServiceFeedBack.SiteNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CarModel {
                get {
                    return ((string)(this[this.tableS_ServiceFeedBack.CarModelColumn]));
                }
                set {
                    this[this.tableS_ServiceFeedBack.CarModelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CVTCode {
                get {
                    return ((string)(this[this.tableS_ServiceFeedBack.CVTCodeColumn]));
                }
                set {
                    this[this.tableS_ServiceFeedBack.CVTCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CVTID {
                get {
                    return ((string)(this[this.tableS_ServiceFeedBack.CVTIDColumn]));
                }
                set {
                    this[this.tableS_ServiceFeedBack.CVTIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChassisNum {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.ChassisNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“ChassisNum”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.ChassisNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TCUCode {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.TCUCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“TCUCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.TCUCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewSoftware {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.NewSoftwareColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“NewSoftware”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.NewSoftwareColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BugCode {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.BugCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“BugCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.BugCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CVTCondition {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.CVTConditionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“CVTCondition”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.CVTConditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.UserNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“UserName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Linkman {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.LinkmanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“Linkman”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.LinkmanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkTel {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.LinkTelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“LinkTel”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.LinkTelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BugNumber {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.BugNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“BugNumber”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.BugNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BatchNumber {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.BatchNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“BatchNumber”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.BatchNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime OutFactoryTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableS_ServiceFeedBack.OutFactoryTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“OutFactoryTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.OutFactoryTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BuyCarTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableS_ServiceFeedBack.BuyCarTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“BuyCarTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.BuyCarTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RunMileage {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.RunMileageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“RunMileage”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.RunMileageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProcessName {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.ProcessNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“ProcessName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.ProcessNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ProcessTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableS_ServiceFeedBack.ProcessTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“ProcessTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.ProcessTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProcessMode {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.ProcessModeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“ProcessMode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.ProcessModeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiagnoseSituation {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.DiagnoseSituationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“DiagnoseSituation”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.DiagnoseSituationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Solution {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.SolutionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“Solution”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.SolutionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsBack {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.IsBackColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“IsBack”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.IsBackColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string YXChargeSuggestion {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.YXChargeSuggestionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“YXChargeSuggestion”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.YXChargeSuggestionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZGChargeSuggestion {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.ZGChargeSuggestionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“ZGChargeSuggestion”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.ZGChargeSuggestionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DutyDept {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.DutyDeptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“DutyDept”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.DutyDeptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ReplyTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableS_ServiceFeedBack.ReplyTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“ReplyTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.ReplyTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AppearCount {
                get {
                    try {
                        return ((int)(this[this.tableS_ServiceFeedBack.AppearCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“AppearCount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.AppearCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DutyDeptCharge {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.DutyDeptChargeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“DutyDeptCharge”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.DutyDeptChargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DutyPerson {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.DutyPersonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“DutyPerson”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.DutyPersonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FinishClaim {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.FinishClaimColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“FinishClaim”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.FinishClaimColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StockSuggestion {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.StockSuggestionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“StockSuggestion”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.StockSuggestionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Temporary {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.TemporaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“Temporary”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.TemporaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Analyse {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.AnalyseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“Analyse”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.AnalyseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string foreverImplement {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.foreverImplementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“foreverImplement”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.foreverImplementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsFMEAfile {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.IsFMEAfileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“IsFMEAfile”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.IsFMEAfileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsOpen {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.IsOpenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“IsOpen”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.IsOpenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZGCheckName {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.ZGCheckNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“ZGCheckName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.ZGCheckNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsClose {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.IsCloseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“IsClose”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.IsCloseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Practicable {
                get {
                    try {
                        return ((string)(this[this.tableS_ServiceFeedBack.PracticableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“S_ServiceFeedBack”中列“Practicable”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableS_ServiceFeedBack.PracticableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    return ((string)(this[this.tableS_ServiceFeedBack.StatusColumn]));
                }
                set {
                    this[this.tableS_ServiceFeedBack.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceIDNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.ServiceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceIDNull() {
                this[this.tableS_ServiceFeedBack.ServiceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChassisNumNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.ChassisNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChassisNumNull() {
                this[this.tableS_ServiceFeedBack.ChassisNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTCUCodeNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.TCUCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTCUCodeNull() {
                this[this.tableS_ServiceFeedBack.TCUCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewSoftwareNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.NewSoftwareColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewSoftwareNull() {
                this[this.tableS_ServiceFeedBack.NewSoftwareColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBugCodeNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.BugCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBugCodeNull() {
                this[this.tableS_ServiceFeedBack.BugCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCVTConditionNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.CVTConditionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCVTConditionNull() {
                this[this.tableS_ServiceFeedBack.CVTConditionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserNameNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.UserNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserNameNull() {
                this[this.tableS_ServiceFeedBack.UserNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinkmanNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.LinkmanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinkmanNull() {
                this[this.tableS_ServiceFeedBack.LinkmanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinkTelNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.LinkTelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinkTelNull() {
                this[this.tableS_ServiceFeedBack.LinkTelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBugNumberNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.BugNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBugNumberNull() {
                this[this.tableS_ServiceFeedBack.BugNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBatchNumberNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.BatchNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBatchNumberNull() {
                this[this.tableS_ServiceFeedBack.BatchNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOutFactoryTimeNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.OutFactoryTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOutFactoryTimeNull() {
                this[this.tableS_ServiceFeedBack.OutFactoryTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyCarTimeNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.BuyCarTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyCarTimeNull() {
                this[this.tableS_ServiceFeedBack.BuyCarTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunMileageNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.RunMileageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunMileageNull() {
                this[this.tableS_ServiceFeedBack.RunMileageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcessNameNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.ProcessNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcessNameNull() {
                this[this.tableS_ServiceFeedBack.ProcessNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcessTimeNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.ProcessTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcessTimeNull() {
                this[this.tableS_ServiceFeedBack.ProcessTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcessModeNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.ProcessModeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcessModeNull() {
                this[this.tableS_ServiceFeedBack.ProcessModeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiagnoseSituationNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.DiagnoseSituationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiagnoseSituationNull() {
                this[this.tableS_ServiceFeedBack.DiagnoseSituationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSolutionNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.SolutionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSolutionNull() {
                this[this.tableS_ServiceFeedBack.SolutionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsBackNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.IsBackColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsBackNull() {
                this[this.tableS_ServiceFeedBack.IsBackColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYXChargeSuggestionNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.YXChargeSuggestionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYXChargeSuggestionNull() {
                this[this.tableS_ServiceFeedBack.YXChargeSuggestionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZGChargeSuggestionNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.ZGChargeSuggestionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZGChargeSuggestionNull() {
                this[this.tableS_ServiceFeedBack.ZGChargeSuggestionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDutyDeptNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.DutyDeptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDutyDeptNull() {
                this[this.tableS_ServiceFeedBack.DutyDeptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReplyTimeNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.ReplyTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReplyTimeNull() {
                this[this.tableS_ServiceFeedBack.ReplyTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppearCountNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.AppearCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppearCountNull() {
                this[this.tableS_ServiceFeedBack.AppearCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDutyDeptChargeNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.DutyDeptChargeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDutyDeptChargeNull() {
                this[this.tableS_ServiceFeedBack.DutyDeptChargeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDutyPersonNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.DutyPersonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDutyPersonNull() {
                this[this.tableS_ServiceFeedBack.DutyPersonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinishClaimNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.FinishClaimColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinishClaimNull() {
                this[this.tableS_ServiceFeedBack.FinishClaimColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockSuggestionNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.StockSuggestionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockSuggestionNull() {
                this[this.tableS_ServiceFeedBack.StockSuggestionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTemporaryNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.TemporaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTemporaryNull() {
                this[this.tableS_ServiceFeedBack.TemporaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAnalyseNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.AnalyseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAnalyseNull() {
                this[this.tableS_ServiceFeedBack.AnalyseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsforeverImplementNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.foreverImplementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetforeverImplementNull() {
                this[this.tableS_ServiceFeedBack.foreverImplementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsFMEAfileNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.IsFMEAfileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsFMEAfileNull() {
                this[this.tableS_ServiceFeedBack.IsFMEAfileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOpenNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.IsOpenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOpenNull() {
                this[this.tableS_ServiceFeedBack.IsOpenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZGCheckNameNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.ZGCheckNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZGCheckNameNull() {
                this[this.tableS_ServiceFeedBack.ZGCheckNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCloseNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.IsCloseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCloseNull() {
                this[this.tableS_ServiceFeedBack.IsCloseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPracticableNull() {
                return this.IsNull(this.tableS_ServiceFeedBack.PracticableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPracticableNull() {
                this[this.tableS_ServiceFeedBack.PracticableColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class S_ServiceFileDownRow : global::System.Data.DataRow {
            
            private S_ServiceFileDownDataTable tableS_ServiceFileDown;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal S_ServiceFileDownRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableS_ServiceFileDown = ((S_ServiceFileDownDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableS_ServiceFileDown.IDColumn]));
                }
                set {
                    this[this.tableS_ServiceFileDown.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceID {
                get {
                    return ((string)(this[this.tableS_ServiceFileDown.ServiceIDColumn]));
                }
                set {
                    this[this.tableS_ServiceFileDown.ServiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FileNames {
                get {
                    return ((string)(this[this.tableS_ServiceFileDown.FileNamesColumn]));
                }
                set {
                    this[this.tableS_ServiceFileDown.FileNamesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FileAddress {
                get {
                    return ((string)(this[this.tableS_ServiceFileDown.FileAddressColumn]));
                }
                set {
                    this[this.tableS_ServiceFileDown.FileAddressColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TCU_UP_DownloadLogRow : global::System.Data.DataRow {
            
            private TCU_UP_DownloadLogDataTable tableTCU_UP_DownloadLog;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCU_UP_DownloadLogRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTCU_UP_DownloadLog = ((TCU_UP_DownloadLogDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableTCU_UP_DownloadLog.IDColumn]));
                }
                set {
                    this[this.tableTCU_UP_DownloadLog.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MachineCode {
                get {
                    return ((string)(this[this.tableTCU_UP_DownloadLog.MachineCodeColumn]));
                }
                set {
                    this[this.tableTCU_UP_DownloadLog.MachineCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProgramType {
                get {
                    return ((int)(this[this.tableTCU_UP_DownloadLog.ProgramTypeColumn]));
                }
                set {
                    this[this.tableTCU_UP_DownloadLog.ProgramTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ProgramVersion {
                get {
                    return ((double)(this[this.tableTCU_UP_DownloadLog.ProgramVersionColumn]));
                }
                set {
                    this[this.tableTCU_UP_DownloadLog.ProgramVersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DownloadDate {
                get {
                    return ((string)(this[this.tableTCU_UP_DownloadLog.DownloadDateColumn]));
                }
                set {
                    this[this.tableTCU_UP_DownloadLog.DownloadDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IpAddress {
                get {
                    return ((string)(this[this.tableTCU_UP_DownloadLog.IpAddressColumn]));
                }
                set {
                    this[this.tableTCU_UP_DownloadLog.IpAddressColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TCU_UP_FILERow : global::System.Data.DataRow {
            
            private TCU_UP_FILEDataTable tableTCU_UP_FILE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCU_UP_FILERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTCU_UP_FILE = ((TCU_UP_FILEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableTCU_UP_FILE.IDColumn]));
                }
                set {
                    this[this.tableTCU_UP_FILE.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProgramType {
                get {
                    return ((int)(this[this.tableTCU_UP_FILE.ProgramTypeColumn]));
                }
                set {
                    this[this.tableTCU_UP_FILE.ProgramTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ProgramVersion {
                get {
                    return ((double)(this[this.tableTCU_UP_FILE.ProgramVersionColumn]));
                }
                set {
                    this[this.tableTCU_UP_FILE.ProgramVersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VersionDetail {
                get {
                    return ((string)(this[this.tableTCU_UP_FILE.VersionDetailColumn]));
                }
                set {
                    this[this.tableTCU_UP_FILE.VersionDetailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FileName {
                get {
                    return ((string)(this[this.tableTCU_UP_FILE.FileNameColumn]));
                }
                set {
                    this[this.tableTCU_UP_FILE.FileNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] FileContent {
                get {
                    return ((byte[])(this[this.tableTCU_UP_FILE.FileContentColumn]));
                }
                set {
                    this[this.tableTCU_UP_FILE.FileContentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FileLength {
                get {
                    return ((int)(this[this.tableTCU_UP_FILE.FileLengthColumn]));
                }
                set {
                    this[this.tableTCU_UP_FILE.FileLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FileLengthDetail {
                get {
                    return ((string)(this[this.tableTCU_UP_FILE.FileLengthDetailColumn]));
                }
                set {
                    this[this.tableTCU_UP_FILE.FileLengthDetailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    return ((global::System.DateTime)(this[this.tableTCU_UP_FILE.DateColumn]));
                }
                set {
                    this[this.tableTCU_UP_FILE.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    return ((string)(this[this.tableTCU_UP_FILE.RemarkColumn]));
                }
                set {
                    this[this.tableTCU_UP_FILE.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_ProgramTypeRow TCU_UP_ProgramTypeRow {
                get {
                    return ((TCU_UP_ProgramTypeRow)(this.GetParentRow(this.Table.ParentRelations["FK_TCU_UP_FILE_TCU_UP_ProgramType"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TCU_UP_FILE_TCU_UP_ProgramType"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TCU_UP_LOGRow : global::System.Data.DataRow {
            
            private TCU_UP_LOGDataTable tableTCU_UP_LOG;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCU_UP_LOGRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTCU_UP_LOG = ((TCU_UP_LOGDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableTCU_UP_LOG.IDColumn]));
                }
                set {
                    this[this.tableTCU_UP_LOG.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MachineCode {
                get {
                    return ((string)(this[this.tableTCU_UP_LOG.MachineCodeColumn]));
                }
                set {
                    this[this.tableTCU_UP_LOG.MachineCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TcuNumber {
                get {
                    return ((string)(this[this.tableTCU_UP_LOG.TcuNumberColumn]));
                }
                set {
                    this[this.tableTCU_UP_LOG.TcuNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VehicleModel {
                get {
                    return ((string)(this[this.tableTCU_UP_LOG.VehicleModelColumn]));
                }
                set {
                    this[this.tableTCU_UP_LOG.VehicleModelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Version {
                get {
                    return ((string)(this[this.tableTCU_UP_LOG.VersionColumn]));
                }
                set {
                    this[this.tableTCU_UP_LOG.VersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WriteCount {
                get {
                    return ((int)(this[this.tableTCU_UP_LOG.WriteCountColumn]));
                }
                set {
                    this[this.tableTCU_UP_LOG.WriteCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WriteDate {
                get {
                    return ((string)(this[this.tableTCU_UP_LOG.WriteDateColumn]));
                }
                set {
                    this[this.tableTCU_UP_LOG.WriteDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    return ((string)(this[this.tableTCU_UP_LOG.RemarkColumn]));
                }
                set {
                    this[this.tableTCU_UP_LOG.RemarkColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TCU_UP_Program_Update_LogRow : global::System.Data.DataRow {
            
            private TCU_UP_Program_Update_LogDataTable tableTCU_UP_Program_Update_Log;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCU_UP_Program_Update_LogRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTCU_UP_Program_Update_Log = ((TCU_UP_Program_Update_LogDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableTCU_UP_Program_Update_Log.IDColumn]));
                }
                set {
                    this[this.tableTCU_UP_Program_Update_Log.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VehicleModel {
                get {
                    return ((string)(this[this.tableTCU_UP_Program_Update_Log.VehicleModelColumn]));
                }
                set {
                    this[this.tableTCU_UP_Program_Update_Log.VehicleModelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ProgramVersion {
                get {
                    return ((double)(this[this.tableTCU_UP_Program_Update_Log.ProgramVersionColumn]));
                }
                set {
                    this[this.tableTCU_UP_Program_Update_Log.ProgramVersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdateDetail {
                get {
                    return ((string)(this[this.tableTCU_UP_Program_Update_Log.UpdateDetailColumn]));
                }
                set {
                    this[this.tableTCU_UP_Program_Update_Log.UpdateDetailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdateDate {
                get {
                    return ((global::System.DateTime)(this[this.tableTCU_UP_Program_Update_Log.UpdateDateColumn]));
                }
                set {
                    this[this.tableTCU_UP_Program_Update_Log.UpdateDateColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TCU_UP_ProgramTypeRow : global::System.Data.DataRow {
            
            private TCU_UP_ProgramTypeDataTable tableTCU_UP_ProgramType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCU_UP_ProgramTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTCU_UP_ProgramType = ((TCU_UP_ProgramTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProgramType {
                get {
                    return ((int)(this[this.tableTCU_UP_ProgramType.ProgramTypeColumn]));
                }
                set {
                    this[this.tableTCU_UP_ProgramType.ProgramTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProgramTypeName {
                get {
                    return ((string)(this[this.tableTCU_UP_ProgramType.ProgramTypeNameColumn]));
                }
                set {
                    this[this.tableTCU_UP_ProgramType.ProgramTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    return ((string)(this[this.tableTCU_UP_ProgramType.RemarkColumn]));
                }
                set {
                    this[this.tableTCU_UP_ProgramType.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_FILERow[] GetTCU_UP_FILERows() {
                if ((this.Table.ChildRelations["FK_TCU_UP_FILE_TCU_UP_ProgramType"] == null)) {
                    return new TCU_UP_FILERow[0];
                }
                else {
                    return ((TCU_UP_FILERow[])(base.GetChildRows(this.Table.ChildRelations["FK_TCU_UP_FILE_TCU_UP_ProgramType"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_UserInfoRow[] GetTCU_UP_UserInfoRows() {
                if ((this.Table.ChildRelations["FK_TCU_UP_UserInfo_TCU_UP_ProgramType"] == null)) {
                    return new TCU_UP_UserInfoRow[0];
                }
                else {
                    return ((TCU_UP_UserInfoRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TCU_UP_UserInfo_TCU_UP_ProgramType"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TCU_UP_UserInfoRow : global::System.Data.DataRow {
            
            private TCU_UP_UserInfoDataTable tableTCU_UP_UserInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCU_UP_UserInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTCU_UP_UserInfo = ((TCU_UP_UserInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MachineCode {
                get {
                    return ((string)(this[this.tableTCU_UP_UserInfo.MachineCodeColumn]));
                }
                set {
                    this[this.tableTCU_UP_UserInfo.MachineCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    return ((string)(this[this.tableTCU_UP_UserInfo.UserNameColumn]));
                }
                set {
                    this[this.tableTCU_UP_UserInfo.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Company {
                get {
                    return ((string)(this[this.tableTCU_UP_UserInfo.CompanyColumn]));
                }
                set {
                    this[this.tableTCU_UP_UserInfo.CompanyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Contact {
                get {
                    return ((string)(this[this.tableTCU_UP_UserInfo.ContactColumn]));
                }
                set {
                    this[this.tableTCU_UP_UserInfo.ContactColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContactAddress {
                get {
                    return ((string)(this[this.tableTCU_UP_UserInfo.ContactAddressColumn]));
                }
                set {
                    this[this.tableTCU_UP_UserInfo.ContactAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnable {
                get {
                    return ((bool)(this[this.tableTCU_UP_UserInfo.IsEnableColumn]));
                }
                set {
                    this[this.tableTCU_UP_UserInfo.IsEnableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CheckType {
                get {
                    return ((int)(this[this.tableTCU_UP_UserInfo.CheckTypeColumn]));
                }
                set {
                    this[this.tableTCU_UP_UserInfo.CheckTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AllowCount {
                get {
                    return ((int)(this[this.tableTCU_UP_UserInfo.AllowCountColumn]));
                }
                set {
                    this[this.tableTCU_UP_UserInfo.AllowCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableTCU_UP_UserInfo.EndDateColumn]));
                }
                set {
                    this[this.tableTCU_UP_UserInfo.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AllowProgramType {
                get {
                    return ((int)(this[this.tableTCU_UP_UserInfo.AllowProgramTypeColumn]));
                }
                set {
                    this[this.tableTCU_UP_UserInfo.AllowProgramTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    return ((string)(this[this.tableTCU_UP_UserInfo.RemarkColumn]));
                }
                set {
                    this[this.tableTCU_UP_UserInfo.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdateDate {
                get {
                    return ((global::System.DateTime)(this[this.tableTCU_UP_UserInfo.UpdateDateColumn]));
                }
                set {
                    this[this.tableTCU_UP_UserInfo.UpdateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdateLog {
                get {
                    return ((string)(this[this.tableTCU_UP_UserInfo.UpdateLogColumn]));
                }
                set {
                    this[this.tableTCU_UP_UserInfo.UpdateLogColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_ProgramTypeRow TCU_UP_ProgramTypeRow {
                get {
                    return ((TCU_UP_ProgramTypeRow)(this.GetParentRow(this.Table.ParentRelations["FK_TCU_UP_UserInfo_TCU_UP_ProgramType"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TCU_UP_UserInfo_TCU_UP_ProgramType"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TCU_UP_VehicleModelRow : global::System.Data.DataRow {
            
            private TCU_UP_VehicleModelDataTable tableTCU_UP_VehicleModel;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCU_UP_VehicleModelRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTCU_UP_VehicleModel = ((TCU_UP_VehicleModelDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VehicleModel {
                get {
                    return ((string)(this[this.tableTCU_UP_VehicleModel.VehicleModelColumn]));
                }
                set {
                    this[this.tableTCU_UP_VehicleModel.VehicleModelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    return ((string)(this[this.tableTCU_UP_VehicleModel.RemarkColumn]));
                }
                set {
                    this[this.tableTCU_UP_VehicleModel.RemarkColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View_CCAR_QuestionTrackListRow : global::System.Data.DataRow {
            
            private View_CCAR_QuestionTrackListDataTable tableView_CCAR_QuestionTrackList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_CCAR_QuestionTrackListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView_CCAR_QuestionTrackList = ((View_CCAR_QuestionTrackListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 序号 {
                get {
                    return ((int)(this[this.tableView_CCAR_QuestionTrackList.序号Column]));
                }
                set {
                    this[this.tableView_CCAR_QuestionTrackList.序号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 父级编号 {
                get {
                    return ((int)(this[this.tableView_CCAR_QuestionTrackList.父级编号Column]));
                }
                set {
                    this[this.tableView_CCAR_QuestionTrackList.父级编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 供应商负责人 {
                get {
                    try {
                        return ((string)(this[this.tableView_CCAR_QuestionTrackList.供应商负责人Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_CCAR_QuestionTrackList”中列“供应商负责人”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_CCAR_QuestionTrackList.供应商负责人Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 零件名称 {
                get {
                    return ((string)(this[this.tableView_CCAR_QuestionTrackList.零件名称Column]));
                }
                set {
                    this[this.tableView_CCAR_QuestionTrackList.零件名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 图形型号 {
                get {
                    return ((string)(this[this.tableView_CCAR_QuestionTrackList.图形型号Column]));
                }
                set {
                    this[this.tableView_CCAR_QuestionTrackList.图形型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 规格 {
                get {
                    try {
                        return ((string)(this[this.tableView_CCAR_QuestionTrackList.规格Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_CCAR_QuestionTrackList”中列“规格”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_CCAR_QuestionTrackList.规格Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 问题描述 {
                get {
                    return ((string)(this[this.tableView_CCAR_QuestionTrackList.问题描述Column]));
                }
                set {
                    this[this.tableView_CCAR_QuestionTrackList.问题描述Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 供应商接受时间 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableView_CCAR_QuestionTrackList.供应商接受时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_CCAR_QuestionTrackList”中列“供应商接受时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_CCAR_QuestionTrackList.供应商接受时间Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 解决方案 {
                get {
                    try {
                        return ((string)(this[this.tableView_CCAR_QuestionTrackList.解决方案Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_CCAR_QuestionTrackList”中列“解决方案”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_CCAR_QuestionTrackList.解决方案Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 发现时间 {
                get {
                    return ((global::System.DateTime)(this[this.tableView_CCAR_QuestionTrackList.发现时间Column]));
                }
                set {
                    this[this.tableView_CCAR_QuestionTrackList.发现时间Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 进行状态 {
                get {
                    try {
                        return ((string)(this[this.tableView_CCAR_QuestionTrackList.进行状态Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_CCAR_QuestionTrackList”中列“进行状态”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_CCAR_QuestionTrackList.进行状态Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 供应商结束时间 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableView_CCAR_QuestionTrackList.供应商结束时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_CCAR_QuestionTrackList”中列“供应商结束时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_CCAR_QuestionTrackList.供应商结束时间Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 最后审核时间 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableView_CCAR_QuestionTrackList.最后审核时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_CCAR_QuestionTrackList”中列“最后审核时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_CCAR_QuestionTrackList.最后审核时间Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 备注 {
                get {
                    try {
                        return ((string)(this[this.tableView_CCAR_QuestionTrackList.备注Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_CCAR_QuestionTrackList”中列“备注”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_CCAR_QuestionTrackList.备注Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is供应商负责人Null() {
                return this.IsNull(this.tableView_CCAR_QuestionTrackList.供应商负责人Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set供应商负责人Null() {
                this[this.tableView_CCAR_QuestionTrackList.供应商负责人Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is规格Null() {
                return this.IsNull(this.tableView_CCAR_QuestionTrackList.规格Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set规格Null() {
                this[this.tableView_CCAR_QuestionTrackList.规格Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is供应商接受时间Null() {
                return this.IsNull(this.tableView_CCAR_QuestionTrackList.供应商接受时间Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set供应商接受时间Null() {
                this[this.tableView_CCAR_QuestionTrackList.供应商接受时间Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is解决方案Null() {
                return this.IsNull(this.tableView_CCAR_QuestionTrackList.解决方案Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set解决方案Null() {
                this[this.tableView_CCAR_QuestionTrackList.解决方案Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is进行状态Null() {
                return this.IsNull(this.tableView_CCAR_QuestionTrackList.进行状态Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set进行状态Null() {
                this[this.tableView_CCAR_QuestionTrackList.进行状态Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is供应商结束时间Null() {
                return this.IsNull(this.tableView_CCAR_QuestionTrackList.供应商结束时间Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set供应商结束时间Null() {
                this[this.tableView_CCAR_QuestionTrackList.供应商结束时间Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is最后审核时间Null() {
                return this.IsNull(this.tableView_CCAR_QuestionTrackList.最后审核时间Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set最后审核时间Null() {
                this[this.tableView_CCAR_QuestionTrackList.最后审核时间Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is备注Null() {
                return this.IsNull(this.tableView_CCAR_QuestionTrackList.备注Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set备注Null() {
                this[this.tableView_CCAR_QuestionTrackList.备注Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View_OF_LoginLogRow : global::System.Data.DataRow {
            
            private View_OF_LoginLogDataTable tableView_OF_LoginLog;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_OF_LoginLogRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView_OF_LoginLog = ((View_OF_LoginLogDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 序号 {
                get {
                    return ((int)(this[this.tableView_OF_LoginLog.序号Column]));
                }
                set {
                    this[this.tableView_OF_LoginLog.序号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 用户编码 {
                get {
                    return ((string)(this[this.tableView_OF_LoginLog.用户编码Column]));
                }
                set {
                    this[this.tableView_OF_LoginLog.用户编码Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 用户姓名 {
                get {
                    return ((string)(this[this.tableView_OF_LoginLog.用户姓名Column]));
                }
                set {
                    this[this.tableView_OF_LoginLog.用户姓名Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 最近登录日期 {
                get {
                    return ((global::System.DateTime)(this[this.tableView_OF_LoginLog.最近登录日期Column]));
                }
                set {
                    this[this.tableView_OF_LoginLog.最近登录日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 登录IP地址 {
                get {
                    return ((string)(this[this.tableView_OF_LoginLog.登录IP地址Column]));
                }
                set {
                    this[this.tableView_OF_LoginLog.登录IP地址Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 登录次数 {
                get {
                    return ((int)(this[this.tableView_OF_LoginLog.登录次数Column]));
                }
                set {
                    this[this.tableView_OF_LoginLog.登录次数Column] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View_OF_NewsRow : global::System.Data.DataRow {
            
            private View_OF_NewsDataTable tableView_OF_News;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_OF_NewsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView_OF_News = ((View_OF_NewsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 新闻ID {
                get {
                    return ((int)(this[this.tableView_OF_News.新闻IDColumn]));
                }
                set {
                    this[this.tableView_OF_News.新闻IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 新闻标题 {
                get {
                    return ((string)(this[this.tableView_OF_News.新闻标题Column]));
                }
                set {
                    this[this.tableView_OF_News.新闻标题Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 新闻URL {
                get {
                    return ((string)(this[this.tableView_OF_News.新闻URLColumn]));
                }
                set {
                    this[this.tableView_OF_News.新闻URLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 发布时间 {
                get {
                    return ((global::System.DateTime)(this[this.tableView_OF_News.发布时间Column]));
                }
                set {
                    this[this.tableView_OF_News.发布时间Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 新闻类别 {
                get {
                    return ((int)(this[this.tableView_OF_News.新闻类别Column]));
                }
                set {
                    this[this.tableView_OF_News.新闻类别Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 新闻类别名称 {
                get {
                    return ((string)(this[this.tableView_OF_News.新闻类别名称Column]));
                }
                set {
                    this[this.tableView_OF_News.新闻类别名称Column] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View_OF_OrderForm_ArrivalInfoRow : global::System.Data.DataRow {
            
            private View_OF_OrderForm_ArrivalInfoDataTable tableView_OF_OrderForm_ArrivalInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_OF_OrderForm_ArrivalInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView_OF_OrderForm_ArrivalInfo = ((View_OF_OrderForm_ArrivalInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 订单物品列表ID {
                get {
                    return ((int)(this[this.tableView_OF_OrderForm_ArrivalInfo.订单物品列表IDColumn]));
                }
                set {
                    this[this.tableView_OF_OrderForm_ArrivalInfo.订单物品列表IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 入库单号 {
                get {
                    return ((string)(this[this.tableView_OF_OrderForm_ArrivalInfo.入库单号Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_ArrivalInfo.入库单号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 批次号 {
                get {
                    return ((string)(this[this.tableView_OF_OrderForm_ArrivalInfo.批次号Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_ArrivalInfo.批次号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 实际到货日期 {
                get {
                    return ((global::System.DateTime)(this[this.tableView_OF_OrderForm_ArrivalInfo.实际到货日期Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_ArrivalInfo.实际到货日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 实际到货数 {
                get {
                    return ((decimal)(this[this.tableView_OF_OrderForm_ArrivalInfo.实际到货数Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_ArrivalInfo.实际到货数Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 合格数 {
                get {
                    return ((decimal)(this[this.tableView_OF_OrderForm_ArrivalInfo.合格数Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_ArrivalInfo.合格数Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 让步数 {
                get {
                    return ((decimal)(this[this.tableView_OF_OrderForm_ArrivalInfo.让步数Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_ArrivalInfo.让步数Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 检验破坏数 {
                get {
                    return ((decimal)(this[this.tableView_OF_OrderForm_ArrivalInfo.检验破坏数Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_ArrivalInfo.检验破坏数Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 退货数 {
                get {
                    return ((decimal)(this[this.tableView_OF_OrderForm_ArrivalInfo.退货数Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_ArrivalInfo.退货数Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 质量信息 {
                get {
                    return ((string)(this[this.tableView_OF_OrderForm_ArrivalInfo.质量信息Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_ArrivalInfo.质量信息Column] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View_OF_OrderForm_IntegratedArrivalInfoRow : global::System.Data.DataRow {
            
            private View_OF_OrderForm_IntegratedArrivalInfoDataTable tableView_OF_OrderForm_IntegratedArrivalInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_OF_OrderForm_IntegratedArrivalInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView_OF_OrderForm_IntegratedArrivalInfo = ((View_OF_OrderForm_IntegratedArrivalInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 订单号 {
                get {
                    return ((string)(this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.订单号Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.订单号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 图号型号 {
                get {
                    return ((string)(this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.图号型号Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.图号型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 物品名称 {
                get {
                    return ((string)(this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.物品名称Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.物品名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 规格 {
                get {
                    return ((string)(this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.规格Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.规格Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 要求到货日期 {
                get {
                    return ((global::System.DateTime)(this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.要求到货日期Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.要求到货日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 订货数量 {
                get {
                    return ((decimal)(this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.订货数量Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.订货数量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 入库单号 {
                get {
                    return ((string)(this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.入库单号Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.入库单号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 批次号 {
                get {
                    return ((string)(this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.批次号Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.批次号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 实际到货日期 {
                get {
                    return ((global::System.DateTime)(this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.实际到货日期Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.实际到货日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 实际到货数 {
                get {
                    return ((decimal)(this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.实际到货数Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.实际到货数Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 合格数 {
                get {
                    return ((decimal)(this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.合格数Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.合格数Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 让步数 {
                get {
                    return ((decimal)(this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.让步数Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.让步数Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 检验破坏数 {
                get {
                    return ((decimal)(this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.检验破坏数Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.检验破坏数Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 退货数 {
                get {
                    return ((decimal)(this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.退货数Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.退货数Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 质量信息 {
                get {
                    return ((string)(this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.质量信息Column]));
                }
                set {
                    this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.质量信息Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 供货单位 {
                get {
                    try {
                        return ((string)(this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.供货单位Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_OF_OrderForm_IntegratedArrivalInfo”中列“供货单位”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.供货单位Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 采购员 {
                get {
                    try {
                        return ((string)(this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.采购员Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_OF_OrderForm_IntegratedArrivalInfo”中列“采购员”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.采购员Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is供货单位Null() {
                return this.IsNull(this.tableView_OF_OrderForm_IntegratedArrivalInfo.供货单位Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set供货单位Null() {
                this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.供货单位Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is采购员Null() {
                return this.IsNull(this.tableView_OF_OrderForm_IntegratedArrivalInfo.采购员Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set采购员Null() {
                this[this.tableView_OF_OrderForm_IntegratedArrivalInfo.采购员Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View_OF_OrderFormInfoRow : global::System.Data.DataRow {
            
            private View_OF_OrderFormInfoDataTable tableView_OF_OrderFormInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_OF_OrderFormInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView_OF_OrderFormInfo = ((View_OF_OrderFormInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 订单号 {
                get {
                    return ((string)(this[this.tableView_OF_OrderFormInfo.订单号Column]));
                }
                set {
                    this[this.tableView_OF_OrderFormInfo.订单号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 供应商 {
                get {
                    try {
                        return ((string)(this[this.tableView_OF_OrderFormInfo.供应商Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_OF_OrderFormInfo”中列“供应商”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_OF_OrderFormInfo.供应商Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool 确认订单 {
                get {
                    return ((bool)(this[this.tableView_OF_OrderFormInfo.确认订单Column]));
                }
                set {
                    this[this.tableView_OF_OrderFormInfo.确认订单Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 供应商处理状态 {
                get {
                    return ((string)(this[this.tableView_OF_OrderFormInfo.供应商处理状态Column]));
                }
                set {
                    this[this.tableView_OF_OrderFormInfo.供应商处理状态Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 物品列表ID {
                get {
                    return ((int)(this[this.tableView_OF_OrderFormInfo.物品列表IDColumn]));
                }
                set {
                    this[this.tableView_OF_OrderFormInfo.物品列表IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 图号型号 {
                get {
                    return ((string)(this[this.tableView_OF_OrderFormInfo.图号型号Column]));
                }
                set {
                    this[this.tableView_OF_OrderFormInfo.图号型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 物品名称 {
                get {
                    return ((string)(this[this.tableView_OF_OrderFormInfo.物品名称Column]));
                }
                set {
                    this[this.tableView_OF_OrderFormInfo.物品名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 规格 {
                get {
                    return ((string)(this[this.tableView_OF_OrderFormInfo.规格Column]));
                }
                set {
                    this[this.tableView_OF_OrderFormInfo.规格Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 订货数量 {
                get {
                    return ((decimal)(this[this.tableView_OF_OrderFormInfo.订货数量Column]));
                }
                set {
                    this[this.tableView_OF_OrderFormInfo.订货数量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 要求到货日期 {
                get {
                    return ((global::System.DateTime)(this[this.tableView_OF_OrderFormInfo.要求到货日期Column]));
                }
                set {
                    this[this.tableView_OF_OrderFormInfo.要求到货日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 入库数 {
                get {
                    try {
                        return ((decimal)(this[this.tableView_OF_OrderFormInfo.入库数Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_OF_OrderFormInfo”中列“入库数”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_OF_OrderFormInfo.入库数Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 让步数 {
                get {
                    try {
                        return ((decimal)(this[this.tableView_OF_OrderFormInfo.让步数Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_OF_OrderFormInfo”中列“让步数”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_OF_OrderFormInfo.让步数Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 退货数 {
                get {
                    try {
                        return ((decimal)(this[this.tableView_OF_OrderFormInfo.退货数Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_OF_OrderFormInfo”中列“退货数”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_OF_OrderFormInfo.退货数Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 检验破坏数 {
                get {
                    try {
                        return ((decimal)(this[this.tableView_OF_OrderFormInfo.检验破坏数Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_OF_OrderFormInfo”中列“检验破坏数”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_OF_OrderFormInfo.检验破坏数Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 订货人编号 {
                get {
                    try {
                        return ((string)(this[this.tableView_OF_OrderFormInfo.订货人编号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_OF_OrderFormInfo”中列“订货人编号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_OF_OrderFormInfo.订货人编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 订货人 {
                get {
                    try {
                        return ((string)(this[this.tableView_OF_OrderFormInfo.订货人Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_OF_OrderFormInfo”中列“订货人”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_OF_OrderFormInfo.订货人Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 创建日期 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableView_OF_OrderFormInfo.创建日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_OF_OrderFormInfo”中列“创建日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_OF_OrderFormInfo.创建日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 供应商联系人 {
                get {
                    try {
                        return ((string)(this[this.tableView_OF_OrderFormInfo.供应商联系人Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_OF_OrderFormInfo”中列“供应商联系人”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_OF_OrderFormInfo.供应商联系人Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 供应商联系方式 {
                get {
                    try {
                        return ((string)(this[this.tableView_OF_OrderFormInfo.供应商联系方式Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_OF_OrderFormInfo”中列“供应商联系方式”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_OF_OrderFormInfo.供应商联系方式Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 备注 {
                get {
                    try {
                        return ((string)(this[this.tableView_OF_OrderFormInfo.备注Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_OF_OrderFormInfo”中列“备注”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_OF_OrderFormInfo.备注Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is供应商Null() {
                return this.IsNull(this.tableView_OF_OrderFormInfo.供应商Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set供应商Null() {
                this[this.tableView_OF_OrderFormInfo.供应商Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is入库数Null() {
                return this.IsNull(this.tableView_OF_OrderFormInfo.入库数Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set入库数Null() {
                this[this.tableView_OF_OrderFormInfo.入库数Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is让步数Null() {
                return this.IsNull(this.tableView_OF_OrderFormInfo.让步数Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set让步数Null() {
                this[this.tableView_OF_OrderFormInfo.让步数Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is退货数Null() {
                return this.IsNull(this.tableView_OF_OrderFormInfo.退货数Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set退货数Null() {
                this[this.tableView_OF_OrderFormInfo.退货数Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is检验破坏数Null() {
                return this.IsNull(this.tableView_OF_OrderFormInfo.检验破坏数Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set检验破坏数Null() {
                this[this.tableView_OF_OrderFormInfo.检验破坏数Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is订货人编号Null() {
                return this.IsNull(this.tableView_OF_OrderFormInfo.订货人编号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set订货人编号Null() {
                this[this.tableView_OF_OrderFormInfo.订货人编号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is订货人Null() {
                return this.IsNull(this.tableView_OF_OrderFormInfo.订货人Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set订货人Null() {
                this[this.tableView_OF_OrderFormInfo.订货人Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is创建日期Null() {
                return this.IsNull(this.tableView_OF_OrderFormInfo.创建日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set创建日期Null() {
                this[this.tableView_OF_OrderFormInfo.创建日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is供应商联系人Null() {
                return this.IsNull(this.tableView_OF_OrderFormInfo.供应商联系人Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set供应商联系人Null() {
                this[this.tableView_OF_OrderFormInfo.供应商联系人Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is供应商联系方式Null() {
                return this.IsNull(this.tableView_OF_OrderFormInfo.供应商联系方式Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set供应商联系方式Null() {
                this[this.tableView_OF_OrderFormInfo.供应商联系方式Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is备注Null() {
                return this.IsNull(this.tableView_OF_OrderFormInfo.备注Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set备注Null() {
                this[this.tableView_OF_OrderFormInfo.备注Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View_S_AfterServiceRow : global::System.Data.DataRow {
            
            private View_S_AfterServiceDataTable tableView_S_AfterService;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_S_AfterServiceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView_S_AfterService = ((View_S_AfterServiceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 序号 {
                get {
                    return ((int)(this[this.tableView_S_AfterService.序号Column]));
                }
                set {
                    this[this.tableView_S_AfterService.序号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 单据号 {
                get {
                    return ((string)(this[this.tableView_S_AfterService.单据号Column]));
                }
                set {
                    this[this.tableView_S_AfterService.单据号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 单据状态 {
                get {
                    return ((string)(this[this.tableView_S_AfterService.单据状态Column]));
                }
                set {
                    this[this.tableView_S_AfterService.单据状态Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 信息来源 {
                get {
                    return ((string)(this[this.tableView_S_AfterService.信息来源Column]));
                }
                set {
                    this[this.tableView_S_AfterService.信息来源Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 函电类别 {
                get {
                    return ((string)(this[this.tableView_S_AfterService.函电类别Column]));
                }
                set {
                    this[this.tableView_S_AfterService.函电类别Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 内容类别 {
                get {
                    return ((string)(this[this.tableView_S_AfterService.内容类别Column]));
                }
                set {
                    this[this.tableView_S_AfterService.内容类别Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 接函电人 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.接函电人Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“接函电人”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.接函电人Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 接函电时间 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableView_S_AfterService.接函电时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“接函电时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.接函电时间Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 服务站名称 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.服务站名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“服务站名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.服务站名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 联系电话 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.联系电话Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“联系电话”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.联系电话Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 用户姓名 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.用户姓名Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“用户姓名”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.用户姓名Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 用户电话 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.用户电话Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“用户电话”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.用户电话Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 用户住址 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.用户住址Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“用户住址”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.用户住址Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 车型 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.车型Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“车型”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.车型Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 变速箱型号 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.变速箱型号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“变速箱型号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.变速箱型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 变速箱编号 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.变速箱编号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“变速箱编号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.变速箱编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 车架号 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.车架号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“车架号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.车架号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 故障地点 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.故障地点Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“故障地点”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.故障地点Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 购车时间 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.购车时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“购车时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.购车时间Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 行驶里程 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.行驶里程Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“行驶里程”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.行驶里程Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 使用性质 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.使用性质Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“使用性质”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.使用性质Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 用户态度 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.用户态度Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“用户态度”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.用户态度Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 故障简叙 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.故障简叙Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“故障简叙”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.故障简叙Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 客服中心处理意见 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.客服中心处理意见Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“客服中心处理意见”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.客服中心处理意见Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 处理方式 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.处理方式Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“处理方式”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.处理方式Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 接单处理人 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.接单处理人Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“接单处理人”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.接单处理人Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 接单时间 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableView_S_AfterService.接单时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“接单时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.接单时间Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 诊断及测试情况 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.诊断及测试情况Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“诊断及测试情况”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.诊断及测试情况Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 处理方案 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.处理方案Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“处理方案”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.处理方案Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 处理结果 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.处理结果Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“处理结果”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.处理结果Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 审核人 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.审核人Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“审核人”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.审核人Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 审核回访时间 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableView_S_AfterService.审核回访时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“审核回访时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.审核回访时间Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 维修质量 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.维修质量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“维修质量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.维修质量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 服务态度 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.服务态度Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“服务态度”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.服务态度Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 是否收费 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.是否收费Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“是否收费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.是否收费Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 金额 {
                get {
                    try {
                        return ((decimal)(this[this.tableView_S_AfterService.金额Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“金额”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.金额Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 故障处理效果确认 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.故障处理效果确认Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“故障处理效果确认”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.故障处理效果确认Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 回访人 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.回访人Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“回访人”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.回访人Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 回访时间 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableView_S_AfterService.回访时间Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“回访时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.回访时间Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 反馈单号 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_AfterService.反馈单号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_AfterService”中列“反馈单号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_AfterService.反馈单号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is接函电人Null() {
                return this.IsNull(this.tableView_S_AfterService.接函电人Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set接函电人Null() {
                this[this.tableView_S_AfterService.接函电人Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is接函电时间Null() {
                return this.IsNull(this.tableView_S_AfterService.接函电时间Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set接函电时间Null() {
                this[this.tableView_S_AfterService.接函电时间Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is服务站名称Null() {
                return this.IsNull(this.tableView_S_AfterService.服务站名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set服务站名称Null() {
                this[this.tableView_S_AfterService.服务站名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is联系电话Null() {
                return this.IsNull(this.tableView_S_AfterService.联系电话Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set联系电话Null() {
                this[this.tableView_S_AfterService.联系电话Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is用户姓名Null() {
                return this.IsNull(this.tableView_S_AfterService.用户姓名Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set用户姓名Null() {
                this[this.tableView_S_AfterService.用户姓名Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is用户电话Null() {
                return this.IsNull(this.tableView_S_AfterService.用户电话Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set用户电话Null() {
                this[this.tableView_S_AfterService.用户电话Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is用户住址Null() {
                return this.IsNull(this.tableView_S_AfterService.用户住址Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set用户住址Null() {
                this[this.tableView_S_AfterService.用户住址Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is车型Null() {
                return this.IsNull(this.tableView_S_AfterService.车型Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set车型Null() {
                this[this.tableView_S_AfterService.车型Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is变速箱型号Null() {
                return this.IsNull(this.tableView_S_AfterService.变速箱型号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set变速箱型号Null() {
                this[this.tableView_S_AfterService.变速箱型号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is变速箱编号Null() {
                return this.IsNull(this.tableView_S_AfterService.变速箱编号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set变速箱编号Null() {
                this[this.tableView_S_AfterService.变速箱编号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is车架号Null() {
                return this.IsNull(this.tableView_S_AfterService.车架号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set车架号Null() {
                this[this.tableView_S_AfterService.车架号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is故障地点Null() {
                return this.IsNull(this.tableView_S_AfterService.故障地点Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set故障地点Null() {
                this[this.tableView_S_AfterService.故障地点Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is购车时间Null() {
                return this.IsNull(this.tableView_S_AfterService.购车时间Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set购车时间Null() {
                this[this.tableView_S_AfterService.购车时间Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is行驶里程Null() {
                return this.IsNull(this.tableView_S_AfterService.行驶里程Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set行驶里程Null() {
                this[this.tableView_S_AfterService.行驶里程Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is使用性质Null() {
                return this.IsNull(this.tableView_S_AfterService.使用性质Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set使用性质Null() {
                this[this.tableView_S_AfterService.使用性质Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is用户态度Null() {
                return this.IsNull(this.tableView_S_AfterService.用户态度Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set用户态度Null() {
                this[this.tableView_S_AfterService.用户态度Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is故障简叙Null() {
                return this.IsNull(this.tableView_S_AfterService.故障简叙Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set故障简叙Null() {
                this[this.tableView_S_AfterService.故障简叙Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is客服中心处理意见Null() {
                return this.IsNull(this.tableView_S_AfterService.客服中心处理意见Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set客服中心处理意见Null() {
                this[this.tableView_S_AfterService.客服中心处理意见Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is处理方式Null() {
                return this.IsNull(this.tableView_S_AfterService.处理方式Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set处理方式Null() {
                this[this.tableView_S_AfterService.处理方式Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is接单处理人Null() {
                return this.IsNull(this.tableView_S_AfterService.接单处理人Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set接单处理人Null() {
                this[this.tableView_S_AfterService.接单处理人Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is接单时间Null() {
                return this.IsNull(this.tableView_S_AfterService.接单时间Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set接单时间Null() {
                this[this.tableView_S_AfterService.接单时间Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is诊断及测试情况Null() {
                return this.IsNull(this.tableView_S_AfterService.诊断及测试情况Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set诊断及测试情况Null() {
                this[this.tableView_S_AfterService.诊断及测试情况Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is处理方案Null() {
                return this.IsNull(this.tableView_S_AfterService.处理方案Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set处理方案Null() {
                this[this.tableView_S_AfterService.处理方案Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is处理结果Null() {
                return this.IsNull(this.tableView_S_AfterService.处理结果Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set处理结果Null() {
                this[this.tableView_S_AfterService.处理结果Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is审核人Null() {
                return this.IsNull(this.tableView_S_AfterService.审核人Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set审核人Null() {
                this[this.tableView_S_AfterService.审核人Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is审核回访时间Null() {
                return this.IsNull(this.tableView_S_AfterService.审核回访时间Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set审核回访时间Null() {
                this[this.tableView_S_AfterService.审核回访时间Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is维修质量Null() {
                return this.IsNull(this.tableView_S_AfterService.维修质量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set维修质量Null() {
                this[this.tableView_S_AfterService.维修质量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is服务态度Null() {
                return this.IsNull(this.tableView_S_AfterService.服务态度Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set服务态度Null() {
                this[this.tableView_S_AfterService.服务态度Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is是否收费Null() {
                return this.IsNull(this.tableView_S_AfterService.是否收费Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set是否收费Null() {
                this[this.tableView_S_AfterService.是否收费Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is金额Null() {
                return this.IsNull(this.tableView_S_AfterService.金额Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set金额Null() {
                this[this.tableView_S_AfterService.金额Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is故障处理效果确认Null() {
                return this.IsNull(this.tableView_S_AfterService.故障处理效果确认Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set故障处理效果确认Null() {
                this[this.tableView_S_AfterService.故障处理效果确认Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is回访人Null() {
                return this.IsNull(this.tableView_S_AfterService.回访人Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set回访人Null() {
                this[this.tableView_S_AfterService.回访人Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is回访时间Null() {
                return this.IsNull(this.tableView_S_AfterService.回访时间Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set回访时间Null() {
                this[this.tableView_S_AfterService.回访时间Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is反馈单号Null() {
                return this.IsNull(this.tableView_S_AfterService.反馈单号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set反馈单号Null() {
                this[this.tableView_S_AfterService.反馈单号Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View_S_MessageSourceRow : global::System.Data.DataRow {
            
            private View_S_MessageSourceDataTable tableView_S_MessageSource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_S_MessageSourceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView_S_MessageSource = ((View_S_MessageSourceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 来源编号 {
                get {
                    return ((string)(this[this.tableView_S_MessageSource.来源编号Column]));
                }
                set {
                    this[this.tableView_S_MessageSource.来源编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 来源 {
                get {
                    return ((string)(this[this.tableView_S_MessageSource.来源Column]));
                }
                set {
                    this[this.tableView_S_MessageSource.来源Column] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View_S_ServiceFeedBackRow : global::System.Data.DataRow {
            
            private View_S_ServiceFeedBackDataTable tableView_S_ServiceFeedBack;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_S_ServiceFeedBackRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView_S_ServiceFeedBack = ((View_S_ServiceFeedBackDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 反馈单号 {
                get {
                    return ((string)(this[this.tableView_S_ServiceFeedBack.反馈单号Column]));
                }
                set {
                    this[this.tableView_S_ServiceFeedBack.反馈单号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 单据状态 {
                get {
                    return ((string)(this[this.tableView_S_ServiceFeedBack.单据状态Column]));
                }
                set {
                    this[this.tableView_S_ServiceFeedBack.单据状态Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 关联号 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_ServiceFeedBack.关联号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_ServiceFeedBack”中列“关联号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_ServiceFeedBack.关联号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 信息来源 {
                get {
                    return ((string)(this[this.tableView_S_ServiceFeedBack.信息来源Column]));
                }
                set {
                    this[this.tableView_S_ServiceFeedBack.信息来源Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 服务站名 {
                get {
                    return ((string)(this[this.tableView_S_ServiceFeedBack.服务站名Column]));
                }
                set {
                    this[this.tableView_S_ServiceFeedBack.服务站名Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 车型 {
                get {
                    return ((string)(this[this.tableView_S_ServiceFeedBack.车型Column]));
                }
                set {
                    this[this.tableView_S_ServiceFeedBack.车型Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CVT型号 {
                get {
                    return ((string)(this[this.tableView_S_ServiceFeedBack.CVT型号Column]));
                }
                set {
                    this[this.tableView_S_ServiceFeedBack.CVT型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CVT编号 {
                get {
                    return ((string)(this[this.tableView_S_ServiceFeedBack.CVT编号Column]));
                }
                set {
                    this[this.tableView_S_ServiceFeedBack.CVT编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 车架号 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_ServiceFeedBack.车架号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_ServiceFeedBack”中列“车架号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_ServiceFeedBack.车架号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 客户姓名 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_ServiceFeedBack.客户姓名Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_ServiceFeedBack”中列“客户姓名”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_ServiceFeedBack.客户姓名Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 反馈人 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_ServiceFeedBack.反馈人Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_ServiceFeedBack”中列“反馈人”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_ServiceFeedBack.反馈人Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 反馈日期 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableView_S_ServiceFeedBack.反馈日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_ServiceFeedBack”中列“反馈日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_ServiceFeedBack.反馈日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 责任部门 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_ServiceFeedBack.责任部门Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_ServiceFeedBack”中列“责任部门”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_ServiceFeedBack.责任部门Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 责任人 {
                get {
                    try {
                        return ((string)(this[this.tableView_S_ServiceFeedBack.责任人Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_S_ServiceFeedBack”中列“责任人”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_S_ServiceFeedBack.责任人Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is关联号Null() {
                return this.IsNull(this.tableView_S_ServiceFeedBack.关联号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set关联号Null() {
                this[this.tableView_S_ServiceFeedBack.关联号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is车架号Null() {
                return this.IsNull(this.tableView_S_ServiceFeedBack.车架号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set车架号Null() {
                this[this.tableView_S_ServiceFeedBack.车架号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is客户姓名Null() {
                return this.IsNull(this.tableView_S_ServiceFeedBack.客户姓名Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set客户姓名Null() {
                this[this.tableView_S_ServiceFeedBack.客户姓名Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is反馈人Null() {
                return this.IsNull(this.tableView_S_ServiceFeedBack.反馈人Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set反馈人Null() {
                this[this.tableView_S_ServiceFeedBack.反馈人Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is反馈日期Null() {
                return this.IsNull(this.tableView_S_ServiceFeedBack.反馈日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set反馈日期Null() {
                this[this.tableView_S_ServiceFeedBack.反馈日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is责任部门Null() {
                return this.IsNull(this.tableView_S_ServiceFeedBack.责任部门Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set责任部门Null() {
                this[this.tableView_S_ServiceFeedBack.责任部门Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is责任人Null() {
                return this.IsNull(this.tableView_S_ServiceFeedBack.责任人Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set责任人Null() {
                this[this.tableView_S_ServiceFeedBack.责任人Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View_TCU_UP_DownloadLogRow : global::System.Data.DataRow {
            
            private View_TCU_UP_DownloadLogDataTable tableView_TCU_UP_DownloadLog;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_TCU_UP_DownloadLogRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView_TCU_UP_DownloadLog = ((View_TCU_UP_DownloadLogDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 序号 {
                get {
                    return ((int)(this[this.tableView_TCU_UP_DownloadLog.序号Column]));
                }
                set {
                    this[this.tableView_TCU_UP_DownloadLog.序号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 用户名 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_DownloadLog.用户名Column]));
                }
                set {
                    this[this.tableView_TCU_UP_DownloadLog.用户名Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 公司名称 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_DownloadLog.公司名称Column]));
                }
                set {
                    this[this.tableView_TCU_UP_DownloadLog.公司名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 联系方式 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_DownloadLog.联系方式Column]));
                }
                set {
                    this[this.tableView_TCU_UP_DownloadLog.联系方式Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 联系地址 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_DownloadLog.联系地址Column]));
                }
                set {
                    this[this.tableView_TCU_UP_DownloadLog.联系地址Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 备注 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_DownloadLog.备注Column]));
                }
                set {
                    this[this.tableView_TCU_UP_DownloadLog.备注Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 数据包类型名称 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_DownloadLog.数据包类型名称Column]));
                }
                set {
                    this[this.tableView_TCU_UP_DownloadLog.数据包类型名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double 数据包版本 {
                get {
                    return ((double)(this[this.tableView_TCU_UP_DownloadLog.数据包版本Column]));
                }
                set {
                    this[this.tableView_TCU_UP_DownloadLog.数据包版本Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 下载日期 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_DownloadLog.下载日期Column]));
                }
                set {
                    this[this.tableView_TCU_UP_DownloadLog.下载日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IP地址 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_DownloadLog.IP地址Column]));
                }
                set {
                    this[this.tableView_TCU_UP_DownloadLog.IP地址Column] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View_TCU_UP_FILERow : global::System.Data.DataRow {
            
            private View_TCU_UP_FILEDataTable tableView_TCU_UP_FILE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_TCU_UP_FILERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView_TCU_UP_FILE = ((View_TCU_UP_FILEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 序号 {
                get {
                    return ((int)(this[this.tableView_TCU_UP_FILE.序号Column]));
                }
                set {
                    this[this.tableView_TCU_UP_FILE.序号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 数据包类型编号 {
                get {
                    return ((int)(this[this.tableView_TCU_UP_FILE.数据包类型编号Column]));
                }
                set {
                    this[this.tableView_TCU_UP_FILE.数据包类型编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 数据包类型名称 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_FILE.数据包类型名称Column]));
                }
                set {
                    this[this.tableView_TCU_UP_FILE.数据包类型名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double 程序版本 {
                get {
                    return ((double)(this[this.tableView_TCU_UP_FILE.程序版本Column]));
                }
                set {
                    this[this.tableView_TCU_UP_FILE.程序版本Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 版本说明 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_FILE.版本说明Column]));
                }
                set {
                    this[this.tableView_TCU_UP_FILE.版本说明Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 文件名称 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_FILE.文件名称Column]));
                }
                set {
                    this[this.tableView_TCU_UP_FILE.文件名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] 文件内容 {
                get {
                    return ((byte[])(this[this.tableView_TCU_UP_FILE.文件内容Column]));
                }
                set {
                    this[this.tableView_TCU_UP_FILE.文件内容Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 文件大小 {
                get {
                    return ((int)(this[this.tableView_TCU_UP_FILE.文件大小Column]));
                }
                set {
                    this[this.tableView_TCU_UP_FILE.文件大小Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 文件大小说明 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_FILE.文件大小说明Column]));
                }
                set {
                    this[this.tableView_TCU_UP_FILE.文件大小说明Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 上传日期 {
                get {
                    return ((global::System.DateTime)(this[this.tableView_TCU_UP_FILE.上传日期Column]));
                }
                set {
                    this[this.tableView_TCU_UP_FILE.上传日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 备注 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_FILE.备注Column]));
                }
                set {
                    this[this.tableView_TCU_UP_FILE.备注Column] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View_TCU_UP_PROGRAM_UPDATE_LOGRow : global::System.Data.DataRow {
            
            private View_TCU_UP_PROGRAM_UPDATE_LOGDataTable tableView_TCU_UP_PROGRAM_UPDATE_LOG;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_TCU_UP_PROGRAM_UPDATE_LOGRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView_TCU_UP_PROGRAM_UPDATE_LOG = ((View_TCU_UP_PROGRAM_UPDATE_LOGDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 序号 {
                get {
                    return ((int)(this[this.tableView_TCU_UP_PROGRAM_UPDATE_LOG.序号Column]));
                }
                set {
                    this[this.tableView_TCU_UP_PROGRAM_UPDATE_LOG.序号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 车型 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_PROGRAM_UPDATE_LOG.车型Column]));
                }
                set {
                    this[this.tableView_TCU_UP_PROGRAM_UPDATE_LOG.车型Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double 程序版本 {
                get {
                    return ((double)(this[this.tableView_TCU_UP_PROGRAM_UPDATE_LOG.程序版本Column]));
                }
                set {
                    this[this.tableView_TCU_UP_PROGRAM_UPDATE_LOG.程序版本Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 更新日期 {
                get {
                    return ((global::System.DateTime)(this[this.tableView_TCU_UP_PROGRAM_UPDATE_LOG.更新日期Column]));
                }
                set {
                    this[this.tableView_TCU_UP_PROGRAM_UPDATE_LOG.更新日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 更新说明 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_PROGRAM_UPDATE_LOG.更新说明Column]));
                }
                set {
                    this[this.tableView_TCU_UP_PROGRAM_UPDATE_LOG.更新说明Column] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View_TCU_UP_ProgramTypeRow : global::System.Data.DataRow {
            
            private View_TCU_UP_ProgramTypeDataTable tableView_TCU_UP_ProgramType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_TCU_UP_ProgramTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView_TCU_UP_ProgramType = ((View_TCU_UP_ProgramTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 数据包类型编号 {
                get {
                    return ((int)(this[this.tableView_TCU_UP_ProgramType.数据包类型编号Column]));
                }
                set {
                    this[this.tableView_TCU_UP_ProgramType.数据包类型编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 数据包类型名称 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_ProgramType.数据包类型名称Column]));
                }
                set {
                    this[this.tableView_TCU_UP_ProgramType.数据包类型名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 备注 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_ProgramType.备注Column]));
                }
                set {
                    this[this.tableView_TCU_UP_ProgramType.备注Column] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View_TCU_UP_UserInfoRow : global::System.Data.DataRow {
            
            private View_TCU_UP_UserInfoDataTable tableView_TCU_UP_UserInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_TCU_UP_UserInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView_TCU_UP_UserInfo = ((View_TCU_UP_UserInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MachineCode {
                get {
                    return ((string)(this[this.tableView_TCU_UP_UserInfo.MachineCodeColumn]));
                }
                set {
                    this[this.tableView_TCU_UP_UserInfo.MachineCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    return ((string)(this[this.tableView_TCU_UP_UserInfo.UserNameColumn]));
                }
                set {
                    this[this.tableView_TCU_UP_UserInfo.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnable {
                get {
                    return ((bool)(this[this.tableView_TCU_UP_UserInfo.IsEnableColumn]));
                }
                set {
                    this[this.tableView_TCU_UP_UserInfo.IsEnableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CheckType {
                get {
                    return ((int)(this[this.tableView_TCU_UP_UserInfo.CheckTypeColumn]));
                }
                set {
                    this[this.tableView_TCU_UP_UserInfo.CheckTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AllowCount {
                get {
                    return ((int)(this[this.tableView_TCU_UP_UserInfo.AllowCountColumn]));
                }
                set {
                    this[this.tableView_TCU_UP_UserInfo.AllowCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableView_TCU_UP_UserInfo.EndDateColumn]));
                }
                set {
                    this[this.tableView_TCU_UP_UserInfo.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AllowProgramType {
                get {
                    return ((int)(this[this.tableView_TCU_UP_UserInfo.AllowProgramTypeColumn]));
                }
                set {
                    this[this.tableView_TCU_UP_UserInfo.AllowProgramTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProgramTypeName {
                get {
                    return ((string)(this[this.tableView_TCU_UP_UserInfo.ProgramTypeNameColumn]));
                }
                set {
                    this[this.tableView_TCU_UP_UserInfo.ProgramTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Company {
                get {
                    return ((string)(this[this.tableView_TCU_UP_UserInfo.CompanyColumn]));
                }
                set {
                    this[this.tableView_TCU_UP_UserInfo.CompanyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Contact {
                get {
                    return ((string)(this[this.tableView_TCU_UP_UserInfo.ContactColumn]));
                }
                set {
                    this[this.tableView_TCU_UP_UserInfo.ContactColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContactAddress {
                get {
                    return ((string)(this[this.tableView_TCU_UP_UserInfo.ContactAddressColumn]));
                }
                set {
                    this[this.tableView_TCU_UP_UserInfo.ContactAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    return ((string)(this[this.tableView_TCU_UP_UserInfo.RemarkColumn]));
                }
                set {
                    this[this.tableView_TCU_UP_UserInfo.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdateDate {
                get {
                    return ((global::System.DateTime)(this[this.tableView_TCU_UP_UserInfo.UpdateDateColumn]));
                }
                set {
                    this[this.tableView_TCU_UP_UserInfo.UpdateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdateLog {
                get {
                    return ((string)(this[this.tableView_TCU_UP_UserInfo.UpdateLogColumn]));
                }
                set {
                    this[this.tableView_TCU_UP_UserInfo.UpdateLogColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View_TCU_UP_VehicleModelRow : global::System.Data.DataRow {
            
            private View_TCU_UP_VehicleModelDataTable tableView_TCU_UP_VehicleModel;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_TCU_UP_VehicleModelRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView_TCU_UP_VehicleModel = ((View_TCU_UP_VehicleModelDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 车型 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_VehicleModel.车型Column]));
                }
                set {
                    this[this.tableView_TCU_UP_VehicleModel.车型Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 备注 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_VehicleModel.备注Column]));
                }
                set {
                    this[this.tableView_TCU_UP_VehicleModel.备注Column] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View_TCU_UP_WRITE_LOGRow : global::System.Data.DataRow {
            
            private View_TCU_UP_WRITE_LOGDataTable tableView_TCU_UP_WRITE_LOG;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_TCU_UP_WRITE_LOGRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView_TCU_UP_WRITE_LOG = ((View_TCU_UP_WRITE_LOGDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 序号 {
                get {
                    return ((int)(this[this.tableView_TCU_UP_WRITE_LOG.序号Column]));
                }
                set {
                    this[this.tableView_TCU_UP_WRITE_LOG.序号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TCU编号 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_WRITE_LOG.TCU编号Column]));
                }
                set {
                    this[this.tableView_TCU_UP_WRITE_LOG.TCU编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 车型 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_WRITE_LOG.车型Column]));
                }
                set {
                    this[this.tableView_TCU_UP_WRITE_LOG.车型Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 烧写版本 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_WRITE_LOG.烧写版本Column]));
                }
                set {
                    this[this.tableView_TCU_UP_WRITE_LOG.烧写版本Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 烧写次数 {
                get {
                    return ((int)(this[this.tableView_TCU_UP_WRITE_LOG.烧写次数Column]));
                }
                set {
                    this[this.tableView_TCU_UP_WRITE_LOG.烧写次数Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 烧写日期 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_WRITE_LOG.烧写日期Column]));
                }
                set {
                    this[this.tableView_TCU_UP_WRITE_LOG.烧写日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 烧写备注 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_WRITE_LOG.烧写备注Column]));
                }
                set {
                    this[this.tableView_TCU_UP_WRITE_LOG.烧写备注Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 用户名 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_WRITE_LOG.用户名Column]));
                }
                set {
                    this[this.tableView_TCU_UP_WRITE_LOG.用户名Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 数据包类别 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_WRITE_LOG.数据包类别Column]));
                }
                set {
                    this[this.tableView_TCU_UP_WRITE_LOG.数据包类别Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 公司名称 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_WRITE_LOG.公司名称Column]));
                }
                set {
                    this[this.tableView_TCU_UP_WRITE_LOG.公司名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 联系方式 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_WRITE_LOG.联系方式Column]));
                }
                set {
                    this[this.tableView_TCU_UP_WRITE_LOG.联系方式Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 联系地址 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_WRITE_LOG.联系地址Column]));
                }
                set {
                    this[this.tableView_TCU_UP_WRITE_LOG.联系地址Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 用户备注 {
                get {
                    return ((string)(this[this.tableView_TCU_UP_WRITE_LOG.用户备注Column]));
                }
                set {
                    this[this.tableView_TCU_UP_WRITE_LOG.用户备注Column] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetNewsRow : global::System.Data.DataRow {
            
            private GetNewsDataTable tableGetNews;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetNewsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetNews = ((GetNewsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableGetNews.IDColumn]));
                }
                set {
                    this[this.tableGetNews.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    return ((string)(this[this.tableGetNews.TitleColumn]));
                }
                set {
                    this[this.tableGetNews.TitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewsUrl {
                get {
                    return ((string)(this[this.tableGetNews.NewsUrlColumn]));
                }
                set {
                    this[this.tableGetNews.NewsUrlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NewsDate {
                get {
                    return ((global::System.DateTime)(this[this.tableGetNews.NewsDateColumn]));
                }
                set {
                    this[this.tableGetNews.NewsDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NewsType {
                get {
                    return ((int)(this[this.tableGetNews.NewsTypeColumn]));
                }
                set {
                    this[this.tableGetNews.NewsTypeColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetServerTimeRow : global::System.Data.DataRow {
            
            private GetServerTimeDataTable tableGetServerTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetServerTimeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetServerTime = ((GetServerTimeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Column1 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGetServerTime.Column1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“GetServerTime”中列“Column1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableGetServerTime.Column1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumn1Null() {
                return this.IsNull(this.tableGetServerTime.Column1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumn1Null() {
                this[this.tableGetServerTime.Column1Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TCU_UP_GetFileRow : global::System.Data.DataRow {
            
            private TCU_UP_GetFileDataTable tableTCU_UP_GetFile;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCU_UP_GetFileRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTCU_UP_GetFile = ((TCU_UP_GetFileDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] FileContent {
                get {
                    return ((byte[])(this[this.tableTCU_UP_GetFile.FileContentColumn]));
                }
                set {
                    this[this.tableTCU_UP_GetFile.FileContentColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TCU_UP_GetFileNoteInfoRow : global::System.Data.DataRow {
            
            private TCU_UP_GetFileNoteInfoDataTable tableTCU_UP_GetFileNoteInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCU_UP_GetFileNoteInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTCU_UP_GetFileNoteInfo = ((TCU_UP_GetFileNoteInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProgramType {
                get {
                    return ((int)(this[this.tableTCU_UP_GetFileNoteInfo.ProgramTypeColumn]));
                }
                set {
                    this[this.tableTCU_UP_GetFileNoteInfo.ProgramTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ProgramVersion {
                get {
                    return ((double)(this[this.tableTCU_UP_GetFileNoteInfo.ProgramVersionColumn]));
                }
                set {
                    this[this.tableTCU_UP_GetFileNoteInfo.ProgramVersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VersionDetail {
                get {
                    return ((string)(this[this.tableTCU_UP_GetFileNoteInfo.VersionDetailColumn]));
                }
                set {
                    this[this.tableTCU_UP_GetFileNoteInfo.VersionDetailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FileLength {
                get {
                    return ((int)(this[this.tableTCU_UP_GetFileNoteInfo.FileLengthColumn]));
                }
                set {
                    this[this.tableTCU_UP_GetFileNoteInfo.FileLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FileLengthDetail {
                get {
                    return ((string)(this[this.tableTCU_UP_GetFileNoteInfo.FileLengthDetailColumn]));
                }
                set {
                    this[this.tableTCU_UP_GetFileNoteInfo.FileLengthDetailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    return ((global::System.DateTime)(this[this.tableTCU_UP_GetFileNoteInfo.DateColumn]));
                }
                set {
                    this[this.tableTCU_UP_GetFileNoteInfo.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    return ((string)(this[this.tableTCU_UP_GetFileNoteInfo.RemarkColumn]));
                }
                set {
                    this[this.tableTCU_UP_GetFileNoteInfo.RemarkColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TCU_UP_GetUserInfoRow : global::System.Data.DataRow {
            
            private TCU_UP_GetUserInfoDataTable tableTCU_UP_GetUserInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCU_UP_GetUserInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTCU_UP_GetUserInfo = ((TCU_UP_GetUserInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MachineCode {
                get {
                    return ((string)(this[this.tableTCU_UP_GetUserInfo.MachineCodeColumn]));
                }
                set {
                    this[this.tableTCU_UP_GetUserInfo.MachineCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    return ((string)(this[this.tableTCU_UP_GetUserInfo.UserNameColumn]));
                }
                set {
                    this[this.tableTCU_UP_GetUserInfo.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Company {
                get {
                    return ((string)(this[this.tableTCU_UP_GetUserInfo.CompanyColumn]));
                }
                set {
                    this[this.tableTCU_UP_GetUserInfo.CompanyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Contact {
                get {
                    return ((string)(this[this.tableTCU_UP_GetUserInfo.ContactColumn]));
                }
                set {
                    this[this.tableTCU_UP_GetUserInfo.ContactColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContactAddress {
                get {
                    return ((string)(this[this.tableTCU_UP_GetUserInfo.ContactAddressColumn]));
                }
                set {
                    this[this.tableTCU_UP_GetUserInfo.ContactAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnable {
                get {
                    return ((bool)(this[this.tableTCU_UP_GetUserInfo.IsEnableColumn]));
                }
                set {
                    this[this.tableTCU_UP_GetUserInfo.IsEnableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CheckType {
                get {
                    return ((int)(this[this.tableTCU_UP_GetUserInfo.CheckTypeColumn]));
                }
                set {
                    this[this.tableTCU_UP_GetUserInfo.CheckTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AllowCount {
                get {
                    return ((int)(this[this.tableTCU_UP_GetUserInfo.AllowCountColumn]));
                }
                set {
                    this[this.tableTCU_UP_GetUserInfo.AllowCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableTCU_UP_GetUserInfo.EndDateColumn]));
                }
                set {
                    this[this.tableTCU_UP_GetUserInfo.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AllowProgramType {
                get {
                    return ((int)(this[this.tableTCU_UP_GetUserInfo.AllowProgramTypeColumn]));
                }
                set {
                    this[this.tableTCU_UP_GetUserInfo.AllowProgramTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    return ((string)(this[this.tableTCU_UP_GetUserInfo.RemarkColumn]));
                }
                set {
                    this[this.tableTCU_UP_GetUserInfo.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdateDate {
                get {
                    return ((global::System.DateTime)(this[this.tableTCU_UP_GetUserInfo.UpdateDateColumn]));
                }
                set {
                    this[this.tableTCU_UP_GetUserInfo.UpdateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdateLog {
                get {
                    return ((string)(this[this.tableTCU_UP_GetUserInfo.UpdateLogColumn]));
                }
                set {
                    this[this.tableTCU_UP_GetUserInfo.UpdateLogColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CCAR_QuestionTrackBillRowChangeEvent : global::System.EventArgs {
            
            private CCAR_QuestionTrackBillRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CCAR_QuestionTrackBillRowChangeEvent(CCAR_QuestionTrackBillRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CCAR_QuestionTrackBillRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CCAR_QuestionTrackListRowChangeEvent : global::System.EventArgs {
            
            private CCAR_QuestionTrackListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CCAR_QuestionTrackListRowChangeEvent(CCAR_QuestionTrackListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CCAR_QuestionTrackListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OF_AnswerRowChangeEvent : global::System.EventArgs {
            
            private OF_AnswerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_AnswerRowChangeEvent(OF_AnswerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_AnswerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OF_BillID_StatusRowChangeEvent : global::System.EventArgs {
            
            private OF_BillID_StatusRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_BillID_StatusRowChangeEvent(OF_BillID_StatusRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_BillID_StatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OF_BugCodeRowChangeEvent : global::System.EventArgs {
            
            private OF_BugCodeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_BugCodeRowChangeEvent(OF_BugCodeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_BugCodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OF_BugMessageInfoRowChangeEvent : global::System.EventArgs {
            
            private OF_BugMessageInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_BugMessageInfoRowChangeEvent(OF_BugMessageInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_BugMessageInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OF_CarBugStatusRowChangeEvent : global::System.EventArgs {
            
            private OF_CarBugStatusRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_CarBugStatusRowChangeEvent(OF_CarBugStatusRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_CarBugStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OF_DownRecordRowChangeEvent : global::System.EventArgs {
            
            private OF_DownRecordRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_DownRecordRowChangeEvent(OF_DownRecordRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_DownRecordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OF_LoginLogRowChangeEvent : global::System.EventArgs {
            
            private OF_LoginLogRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_LoginLogRowChangeEvent(OF_LoginLogRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_LoginLogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OF_NewsRowChangeEvent : global::System.EventArgs {
            
            private OF_NewsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsRowChangeEvent(OF_NewsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OF_NewsAudienceRowChangeEvent : global::System.EventArgs {
            
            private OF_NewsAudienceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsAudienceRowChangeEvent(OF_NewsAudienceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsAudienceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OF_NewsFileRowChangeEvent : global::System.EventArgs {
            
            private OF_NewsFileRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsFileRowChangeEvent(OF_NewsFileRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsFileRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OF_NewsTypeRowChangeEvent : global::System.EventArgs {
            
            private OF_NewsTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsTypeRowChangeEvent(OF_NewsTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_NewsTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OF_OrderForm_ArrivalInfoRowChangeEvent : global::System.EventArgs {
            
            private OF_OrderForm_ArrivalInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderForm_ArrivalInfoRowChangeEvent(OF_OrderForm_ArrivalInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderForm_ArrivalInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OF_OrderFormGoodsRowChangeEvent : global::System.EventArgs {
            
            private OF_OrderFormGoodsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderFormGoodsRowChangeEvent(OF_OrderFormGoodsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderFormGoodsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OF_OrderFormInfoRowChangeEvent : global::System.EventArgs {
            
            private OF_OrderFormInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderFormInfoRowChangeEvent(OF_OrderFormInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OF_OrderFormInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class S_AfterServiceRowChangeEvent : global::System.EventArgs {
            
            private S_AfterServiceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_AfterServiceRowChangeEvent(S_AfterServiceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_AfterServiceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class S_CommtionRowChangeEvent : global::System.EventArgs {
            
            private S_CommtionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_CommtionRowChangeEvent(S_CommtionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_CommtionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class S_MessageSourceRowChangeEvent : global::System.EventArgs {
            
            private S_MessageSourceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_MessageSourceRowChangeEvent(S_MessageSourceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_MessageSourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class S_ReplaceAccessoryRowChangeEvent : global::System.EventArgs {
            
            private S_ReplaceAccessoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_ReplaceAccessoryRowChangeEvent(S_ReplaceAccessoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_ReplaceAccessoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class S_ServiceFeedBackRowChangeEvent : global::System.EventArgs {
            
            private S_ServiceFeedBackRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_ServiceFeedBackRowChangeEvent(S_ServiceFeedBackRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_ServiceFeedBackRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class S_ServiceFileDownRowChangeEvent : global::System.EventArgs {
            
            private S_ServiceFileDownRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_ServiceFileDownRowChangeEvent(S_ServiceFileDownRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_ServiceFileDownRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TCU_UP_DownloadLogRowChangeEvent : global::System.EventArgs {
            
            private TCU_UP_DownloadLogRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_DownloadLogRowChangeEvent(TCU_UP_DownloadLogRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_DownloadLogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TCU_UP_FILERowChangeEvent : global::System.EventArgs {
            
            private TCU_UP_FILERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_FILERowChangeEvent(TCU_UP_FILERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_FILERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TCU_UP_LOGRowChangeEvent : global::System.EventArgs {
            
            private TCU_UP_LOGRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_LOGRowChangeEvent(TCU_UP_LOGRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_LOGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TCU_UP_Program_Update_LogRowChangeEvent : global::System.EventArgs {
            
            private TCU_UP_Program_Update_LogRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_Program_Update_LogRowChangeEvent(TCU_UP_Program_Update_LogRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_Program_Update_LogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TCU_UP_ProgramTypeRowChangeEvent : global::System.EventArgs {
            
            private TCU_UP_ProgramTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_ProgramTypeRowChangeEvent(TCU_UP_ProgramTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_ProgramTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TCU_UP_UserInfoRowChangeEvent : global::System.EventArgs {
            
            private TCU_UP_UserInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_UserInfoRowChangeEvent(TCU_UP_UserInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_UserInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TCU_UP_VehicleModelRowChangeEvent : global::System.EventArgs {
            
            private TCU_UP_VehicleModelRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_VehicleModelRowChangeEvent(TCU_UP_VehicleModelRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_VehicleModelRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View_CCAR_QuestionTrackListRowChangeEvent : global::System.EventArgs {
            
            private View_CCAR_QuestionTrackListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_CCAR_QuestionTrackListRowChangeEvent(View_CCAR_QuestionTrackListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_CCAR_QuestionTrackListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View_OF_LoginLogRowChangeEvent : global::System.EventArgs {
            
            private View_OF_LoginLogRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_LoginLogRowChangeEvent(View_OF_LoginLogRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_LoginLogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View_OF_NewsRowChangeEvent : global::System.EventArgs {
            
            private View_OF_NewsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_NewsRowChangeEvent(View_OF_NewsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_NewsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View_OF_OrderForm_ArrivalInfoRowChangeEvent : global::System.EventArgs {
            
            private View_OF_OrderForm_ArrivalInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_OrderForm_ArrivalInfoRowChangeEvent(View_OF_OrderForm_ArrivalInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_OrderForm_ArrivalInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View_OF_OrderForm_IntegratedArrivalInfoRowChangeEvent : global::System.EventArgs {
            
            private View_OF_OrderForm_IntegratedArrivalInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_OrderForm_IntegratedArrivalInfoRowChangeEvent(View_OF_OrderForm_IntegratedArrivalInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_OrderForm_IntegratedArrivalInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View_OF_OrderFormInfoRowChangeEvent : global::System.EventArgs {
            
            private View_OF_OrderFormInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_OrderFormInfoRowChangeEvent(View_OF_OrderFormInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_OF_OrderFormInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View_S_AfterServiceRowChangeEvent : global::System.EventArgs {
            
            private View_S_AfterServiceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_S_AfterServiceRowChangeEvent(View_S_AfterServiceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_S_AfterServiceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View_S_MessageSourceRowChangeEvent : global::System.EventArgs {
            
            private View_S_MessageSourceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_S_MessageSourceRowChangeEvent(View_S_MessageSourceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_S_MessageSourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View_S_ServiceFeedBackRowChangeEvent : global::System.EventArgs {
            
            private View_S_ServiceFeedBackRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_S_ServiceFeedBackRowChangeEvent(View_S_ServiceFeedBackRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_S_ServiceFeedBackRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View_TCU_UP_DownloadLogRowChangeEvent : global::System.EventArgs {
            
            private View_TCU_UP_DownloadLogRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_DownloadLogRowChangeEvent(View_TCU_UP_DownloadLogRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_DownloadLogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View_TCU_UP_FILERowChangeEvent : global::System.EventArgs {
            
            private View_TCU_UP_FILERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_FILERowChangeEvent(View_TCU_UP_FILERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_FILERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View_TCU_UP_PROGRAM_UPDATE_LOGRowChangeEvent : global::System.EventArgs {
            
            private View_TCU_UP_PROGRAM_UPDATE_LOGRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_PROGRAM_UPDATE_LOGRowChangeEvent(View_TCU_UP_PROGRAM_UPDATE_LOGRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_PROGRAM_UPDATE_LOGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View_TCU_UP_ProgramTypeRowChangeEvent : global::System.EventArgs {
            
            private View_TCU_UP_ProgramTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_ProgramTypeRowChangeEvent(View_TCU_UP_ProgramTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_ProgramTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View_TCU_UP_UserInfoRowChangeEvent : global::System.EventArgs {
            
            private View_TCU_UP_UserInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_UserInfoRowChangeEvent(View_TCU_UP_UserInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_UserInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View_TCU_UP_VehicleModelRowChangeEvent : global::System.EventArgs {
            
            private View_TCU_UP_VehicleModelRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_VehicleModelRowChangeEvent(View_TCU_UP_VehicleModelRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_VehicleModelRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View_TCU_UP_WRITE_LOGRowChangeEvent : global::System.EventArgs {
            
            private View_TCU_UP_WRITE_LOGRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_WRITE_LOGRowChangeEvent(View_TCU_UP_WRITE_LOGRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_TCU_UP_WRITE_LOGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetNewsRowChangeEvent : global::System.EventArgs {
            
            private GetNewsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetNewsRowChangeEvent(GetNewsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetNewsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetServerTimeRowChangeEvent : global::System.EventArgs {
            
            private GetServerTimeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetServerTimeRowChangeEvent(GetServerTimeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetServerTimeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TCU_UP_GetFileRowChangeEvent : global::System.EventArgs {
            
            private TCU_UP_GetFileRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_GetFileRowChangeEvent(TCU_UP_GetFileRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_GetFileRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TCU_UP_GetFileNoteInfoRowChangeEvent : global::System.EventArgs {
            
            private TCU_UP_GetFileNoteInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_GetFileNoteInfoRowChangeEvent(TCU_UP_GetFileNoteInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_GetFileNoteInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TCU_UP_GetUserInfoRowChangeEvent : global::System.EventArgs {
            
            private TCU_UP_GetUserInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_GetUserInfoRowChangeEvent(TCU_UP_GetUserInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCU_UP_GetUserInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Expression.RundarWebServerDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CCAR_QuestionTrackBillTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CCAR_QuestionTrackBillTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CCAR_QuestionTrackBill";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("JLRDChargeMan", "JLRDChargeMan");
            tableMapping.ColumnMappings.Add("CreateTime", "CreateTime");
            tableMapping.ColumnMappings.Add("Provider", "Provider");
            tableMapping.ColumnMappings.Add("QuestionTitle", "QuestionTitle");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("Remark", "Remark");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[CCAR_QuestionTrackBill] WHERE (([ID] = @Original_ID) AND ([JLRDChargeMan] = @Original_JLRDChargeMan) AND ([CreateTime] = @Original_CreateTime) AND ([Provider] = @Original_Provider) AND ([QuestionTitle] = @Original_QuestionTitle) AND ([Status] = @Original_Status) AND ((@IsNull_Remark = 1 AND [Remark] IS NULL) OR ([Remark] = @Original_Remark)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JLRDChargeMan", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JLRDChargeMan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CreateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Provider", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Provider", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QuestionTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuestionTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Remark", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[CCAR_QuestionTrackBill] ([JLRDChargeMan], [CreateTime], [Provider], [QuestionTitle], [Status], [Remark]) VALUES (@JLRDChargeMan, @CreateTime, @Provider, @QuestionTitle, @Status, @Remark);
SELECT ID, JLRDChargeMan, CreateTime, Provider, QuestionTitle, Status, Remark FROM CCAR_QuestionTrackBill WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@JLRDChargeMan", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JLRDChargeMan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Provider", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Provider", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QuestionTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuestionTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[CCAR_QuestionTrackBill] SET [JLRDChargeMan] = @JLRDChargeMan, [CreateTime] = @CreateTime, [Provider] = @Provider, [QuestionTitle] = @QuestionTitle, [Status] = @Status, [Remark] = @Remark WHERE (([ID] = @Original_ID) AND ([JLRDChargeMan] = @Original_JLRDChargeMan) AND ([CreateTime] = @Original_CreateTime) AND ([Provider] = @Original_Provider) AND ([QuestionTitle] = @Original_QuestionTitle) AND ([Status] = @Original_Status) AND ((@IsNull_Remark = 1 AND [Remark] IS NULL) OR ([Remark] = @Original_Remark)));
SELECT ID, JLRDChargeMan, CreateTime, Provider, QuestionTitle, Status, Remark FROM CCAR_QuestionTrackBill WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@JLRDChargeMan", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JLRDChargeMan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Provider", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Provider", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QuestionTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuestionTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JLRDChargeMan", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JLRDChargeMan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CreateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Provider", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Provider", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QuestionTitle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuestionTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Remark", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, JLRDChargeMan, CreateTime, Provider, QuestionTitle, Status, Remark FRO" +
                "M dbo.CCAR_QuestionTrackBill";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.CCAR_QuestionTrackBillDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.CCAR_QuestionTrackBillDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.CCAR_QuestionTrackBillDataTable dataTable = new RundarWebServerDataSet.CCAR_QuestionTrackBillDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.CCAR_QuestionTrackBillDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CCAR_QuestionTrackBill");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_JLRDChargeMan, System.DateTime Original_CreateTime, string Original_Provider, string Original_QuestionTitle, string Original_Status, string Original_Remark) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_JLRDChargeMan == null)) {
                throw new global::System.ArgumentNullException("Original_JLRDChargeMan");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_JLRDChargeMan));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_CreateTime));
            if ((Original_Provider == null)) {
                throw new global::System.ArgumentNullException("Original_Provider");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Provider));
            }
            if ((Original_QuestionTitle == null)) {
                throw new global::System.ArgumentNullException("Original_QuestionTitle");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_QuestionTitle));
            }
            if ((Original_Status == null)) {
                throw new global::System.ArgumentNullException("Original_Status");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Status));
            }
            if ((Original_Remark == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_Remark));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string JLRDChargeMan, System.DateTime CreateTime, string Provider, string QuestionTitle, string Status, string Remark) {
            if ((JLRDChargeMan == null)) {
                throw new global::System.ArgumentNullException("JLRDChargeMan");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(JLRDChargeMan));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(CreateTime));
            if ((Provider == null)) {
                throw new global::System.ArgumentNullException("Provider");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Provider));
            }
            if ((QuestionTitle == null)) {
                throw new global::System.ArgumentNullException("QuestionTitle");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(QuestionTitle));
            }
            if ((Status == null)) {
                throw new global::System.ArgumentNullException("Status");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Status));
            }
            if ((Remark == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Remark));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string JLRDChargeMan, System.DateTime CreateTime, string Provider, string QuestionTitle, string Status, string Remark, int Original_ID, string Original_JLRDChargeMan, System.DateTime Original_CreateTime, string Original_Provider, string Original_QuestionTitle, string Original_Status, string Original_Remark, int ID) {
            if ((JLRDChargeMan == null)) {
                throw new global::System.ArgumentNullException("JLRDChargeMan");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(JLRDChargeMan));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(CreateTime));
            if ((Provider == null)) {
                throw new global::System.ArgumentNullException("Provider");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Provider));
            }
            if ((QuestionTitle == null)) {
                throw new global::System.ArgumentNullException("QuestionTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(QuestionTitle));
            }
            if ((Status == null)) {
                throw new global::System.ArgumentNullException("Status");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Status));
            }
            if ((Remark == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Remark));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_ID));
            if ((Original_JLRDChargeMan == null)) {
                throw new global::System.ArgumentNullException("Original_JLRDChargeMan");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_JLRDChargeMan));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(Original_CreateTime));
            if ((Original_Provider == null)) {
                throw new global::System.ArgumentNullException("Original_Provider");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Provider));
            }
            if ((Original_QuestionTitle == null)) {
                throw new global::System.ArgumentNullException("Original_QuestionTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_QuestionTitle));
            }
            if ((Original_Status == null)) {
                throw new global::System.ArgumentNullException("Original_Status");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_Status));
            }
            if ((Original_Remark == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_Remark));
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string JLRDChargeMan, System.DateTime CreateTime, string Provider, string QuestionTitle, string Status, string Remark, int Original_ID, string Original_JLRDChargeMan, System.DateTime Original_CreateTime, string Original_Provider, string Original_QuestionTitle, string Original_Status, string Original_Remark) {
            return this.Update(JLRDChargeMan, CreateTime, Provider, QuestionTitle, Status, Remark, Original_ID, Original_JLRDChargeMan, Original_CreateTime, Original_Provider, Original_QuestionTitle, Original_Status, Original_Remark, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CCAR_QuestionTrackListTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CCAR_QuestionTrackListTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CCAR_QuestionTrackList";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("FatherID", "FatherID");
            tableMapping.ColumnMappings.Add("ProviderMan", "ProviderMan");
            tableMapping.ColumnMappings.Add("AccessoryName", "AccessoryName");
            tableMapping.ColumnMappings.Add("AccessoryCode", "AccessoryCode");
            tableMapping.ColumnMappings.Add("Spec", "Spec");
            tableMapping.ColumnMappings.Add("Question", "Question");
            tableMapping.ColumnMappings.Add("Solution", "Solution");
            tableMapping.ColumnMappings.Add("StartTime", "StartTime");
            tableMapping.ColumnMappings.Add("GYSAcceptTime", "GYSAcceptTime");
            tableMapping.ColumnMappings.Add("Sequence", "Sequence");
            tableMapping.ColumnMappings.Add("EndTime", "EndTime");
            tableMapping.ColumnMappings.Add("LastCheckTime", "LastCheckTime");
            tableMapping.ColumnMappings.Add("Remart", "Remart");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[CCAR_QuestionTrackList] WHERE (([ID] = @Original_ID) AND ([FatherID] = @Original_FatherID) AND ((@IsNull_ProviderMan = 1 AND [ProviderMan] IS NULL) OR ([ProviderMan] = @Original_ProviderMan)) AND ([AccessoryName] = @Original_AccessoryName) AND ([AccessoryCode] = @Original_AccessoryCode) AND ((@IsNull_Spec = 1 AND [Spec] IS NULL) OR ([Spec] = @Original_Spec)) AND ([Question] = @Original_Question) AND ((@IsNull_Solution = 1 AND [Solution] IS NULL) OR ([Solution] = @Original_Solution)) AND ([StartTime] = @Original_StartTime) AND ((@IsNull_GYSAcceptTime = 1 AND [GYSAcceptTime] IS NULL) OR ([GYSAcceptTime] = @Original_GYSAcceptTime)) AND ((@IsNull_Sequence = 1 AND [Sequence] IS NULL) OR ([Sequence] = @Original_Sequence)) AND ((@IsNull_EndTime = 1 AND [EndTime] IS NULL) OR ([EndTime] = @Original_EndTime)) AND ((@IsNull_LastCheckTime = 1 AND [LastCheckTime] IS NULL) OR ([LastCheckTime] = @Original_LastCheckTime)) AND ((@IsNull_Remart = 1 AND [Remart] IS NULL) OR ([Remart] = @Original_Remart)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FatherID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FatherID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProviderMan", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProviderMan", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProviderMan", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProviderMan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AccessoryName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AccessoryName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AccessoryCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AccessoryCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Spec", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spec", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Spec", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spec", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Question", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Question", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Solution", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Solution", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Solution", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Solution", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GYSAcceptTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GYSAcceptTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GYSAcceptTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GYSAcceptTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Sequence", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sequence", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sequence", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sequence", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LastCheckTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastCheckTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LastCheckTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastCheckTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Remart", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remart", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remart", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remart", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[CCAR_QuestionTrackList] ([FatherID], [ProviderMan], [AccessoryName], [AccessoryCode], [Spec], [Question], [Solution], [StartTime], [GYSAcceptTime], [Sequence], [EndTime], [LastCheckTime], [Remart]) VALUES (@FatherID, @ProviderMan, @AccessoryName, @AccessoryCode, @Spec, @Question, @Solution, @StartTime, @GYSAcceptTime, @Sequence, @EndTime, @LastCheckTime, @Remart);
SELECT ID, FatherID, ProviderMan, AccessoryName, AccessoryCode, Spec, Question, Solution, StartTime, GYSAcceptTime, Sequence, EndTime, LastCheckTime, Remart FROM CCAR_QuestionTrackList WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FatherID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FatherID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProviderMan", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProviderMan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AccessoryName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AccessoryName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AccessoryCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AccessoryCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Spec", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spec", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Question", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Question", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Solution", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Solution", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GYSAcceptTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GYSAcceptTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sequence", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sequence", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastCheckTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastCheckTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remart", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remart", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CCAR_QuestionTrackList] SET [FatherID] = @FatherID, [ProviderMan] =" +
                " @ProviderMan, [AccessoryName] = @AccessoryName, [AccessoryCode] = @AccessoryCod" +
                "e, [Spec] = @Spec, [Question] = @Question, [Solution] = @Solution, [StartTime] =" +
                " @StartTime, [GYSAcceptTime] = @GYSAcceptTime, [Sequence] = @Sequence, [EndTime]" +
                " = @EndTime, [LastCheckTime] = @LastCheckTime, [Remart] = @Remart WHERE (([ID] =" +
                " @Original_ID) AND ([FatherID] = @Original_FatherID) AND ((@IsNull_ProviderMan =" +
                " 1 AND [ProviderMan] IS NULL) OR ([ProviderMan] = @Original_ProviderMan)) AND ([" +
                "AccessoryName] = @Original_AccessoryName) AND ([AccessoryCode] = @Original_Acces" +
                "soryCode) AND ((@IsNull_Spec = 1 AND [Spec] IS NULL) OR ([Spec] = @Original_Spec" +
                ")) AND ([Question] = @Original_Question) AND ((@IsNull_Solution = 1 AND [Solutio" +
                "n] IS NULL) OR ([Solution] = @Original_Solution)) AND ([StartTime] = @Original_S" +
                "tartTime) AND ((@IsNull_GYSAcceptTime = 1 AND [GYSAcceptTime] IS NULL) OR ([GYSA" +
                "cceptTime] = @Original_GYSAcceptTime)) AND ((@IsNull_Sequence = 1 AND [Sequence]" +
                " IS NULL) OR ([Sequence] = @Original_Sequence)) AND ((@IsNull_EndTime = 1 AND [E" +
                "ndTime] IS NULL) OR ([EndTime] = @Original_EndTime)) AND ((@IsNull_LastCheckTime" +
                " = 1 AND [LastCheckTime] IS NULL) OR ([LastCheckTime] = @Original_LastCheckTime)" +
                ") AND ((@IsNull_Remart = 1 AND [Remart] IS NULL) OR ([Remart] = @Original_Remart" +
                ")));\r\nSELECT ID, FatherID, ProviderMan, AccessoryName, AccessoryCode, Spec, Ques" +
                "tion, Solution, StartTime, GYSAcceptTime, Sequence, EndTime, LastCheckTime, Rema" +
                "rt FROM CCAR_QuestionTrackList WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FatherID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FatherID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProviderMan", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProviderMan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AccessoryName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AccessoryName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AccessoryCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AccessoryCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Spec", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spec", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Question", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Question", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Solution", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Solution", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GYSAcceptTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GYSAcceptTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sequence", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sequence", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastCheckTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastCheckTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remart", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remart", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FatherID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FatherID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProviderMan", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProviderMan", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProviderMan", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProviderMan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AccessoryName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AccessoryName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AccessoryCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AccessoryCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Spec", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spec", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Spec", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spec", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Question", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Question", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Solution", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Solution", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Solution", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Solution", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_GYSAcceptTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GYSAcceptTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GYSAcceptTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GYSAcceptTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Sequence", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sequence", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sequence", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sequence", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LastCheckTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastCheckTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LastCheckTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastCheckTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Remart", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remart", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remart", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remart", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, FatherID, ProviderMan, AccessoryName, AccessoryCode, Spec, Question, S" +
                "olution, StartTime, GYSAcceptTime, Sequence, EndTime, LastCheckTime, Remart FROM" +
                " dbo.CCAR_QuestionTrackList";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.CCAR_QuestionTrackListDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.CCAR_QuestionTrackListDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.CCAR_QuestionTrackListDataTable dataTable = new RundarWebServerDataSet.CCAR_QuestionTrackListDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.CCAR_QuestionTrackListDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CCAR_QuestionTrackList");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, int Original_FatherID, string Original_ProviderMan, string Original_AccessoryName, string Original_AccessoryCode, string Original_Spec, string Original_Question, string Original_Solution, System.DateTime Original_StartTime, global::System.Nullable<global::System.DateTime> Original_GYSAcceptTime, string Original_Sequence, global::System.Nullable<global::System.DateTime> Original_EndTime, global::System.Nullable<global::System.DateTime> Original_LastCheckTime, string Original_Remart) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_FatherID));
            if ((Original_ProviderMan == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_ProviderMan));
            }
            if ((Original_AccessoryName == null)) {
                throw new global::System.ArgumentNullException("Original_AccessoryName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_AccessoryName));
            }
            if ((Original_AccessoryCode == null)) {
                throw new global::System.ArgumentNullException("Original_AccessoryCode");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_AccessoryCode));
            }
            if ((Original_Spec == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_Spec));
            }
            if ((Original_Question == null)) {
                throw new global::System.ArgumentNullException("Original_Question");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_Question));
            }
            if ((Original_Solution == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_Solution));
            }
            this.Adapter.DeleteCommand.Parameters[11].Value = ((System.DateTime)(Original_StartTime));
            if ((Original_GYSAcceptTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((System.DateTime)(Original_GYSAcceptTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_Sequence == null)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_Sequence));
            }
            if ((Original_EndTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((System.DateTime)(Original_EndTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_LastCheckTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[19].Value = ((System.DateTime)(Original_LastCheckTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Original_Remart == null)) {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[21].Value = ((string)(Original_Remart));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int FatherID, string ProviderMan, string AccessoryName, string AccessoryCode, string Spec, string Question, string Solution, System.DateTime StartTime, global::System.Nullable<global::System.DateTime> GYSAcceptTime, string Sequence, global::System.Nullable<global::System.DateTime> EndTime, global::System.Nullable<global::System.DateTime> LastCheckTime, string Remart) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(FatherID));
            if ((ProviderMan == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ProviderMan));
            }
            if ((AccessoryName == null)) {
                throw new global::System.ArgumentNullException("AccessoryName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(AccessoryName));
            }
            if ((AccessoryCode == null)) {
                throw new global::System.ArgumentNullException("AccessoryCode");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(AccessoryCode));
            }
            if ((Spec == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Spec));
            }
            if ((Question == null)) {
                throw new global::System.ArgumentNullException("Question");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Question));
            }
            if ((Solution == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Solution));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((System.DateTime)(StartTime));
            if ((GYSAcceptTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((System.DateTime)(GYSAcceptTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Sequence == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Sequence));
            }
            if ((EndTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((System.DateTime)(EndTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((LastCheckTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((System.DateTime)(LastCheckTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Remart == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Remart));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int FatherID, 
                    string ProviderMan, 
                    string AccessoryName, 
                    string AccessoryCode, 
                    string Spec, 
                    string Question, 
                    string Solution, 
                    System.DateTime StartTime, 
                    global::System.Nullable<global::System.DateTime> GYSAcceptTime, 
                    string Sequence, 
                    global::System.Nullable<global::System.DateTime> EndTime, 
                    global::System.Nullable<global::System.DateTime> LastCheckTime, 
                    string Remart, 
                    int Original_ID, 
                    int Original_FatherID, 
                    string Original_ProviderMan, 
                    string Original_AccessoryName, 
                    string Original_AccessoryCode, 
                    string Original_Spec, 
                    string Original_Question, 
                    string Original_Solution, 
                    System.DateTime Original_StartTime, 
                    global::System.Nullable<global::System.DateTime> Original_GYSAcceptTime, 
                    string Original_Sequence, 
                    global::System.Nullable<global::System.DateTime> Original_EndTime, 
                    global::System.Nullable<global::System.DateTime> Original_LastCheckTime, 
                    string Original_Remart, 
                    int ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(FatherID));
            if ((ProviderMan == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ProviderMan));
            }
            if ((AccessoryName == null)) {
                throw new global::System.ArgumentNullException("AccessoryName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(AccessoryName));
            }
            if ((AccessoryCode == null)) {
                throw new global::System.ArgumentNullException("AccessoryCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(AccessoryCode));
            }
            if ((Spec == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Spec));
            }
            if ((Question == null)) {
                throw new global::System.ArgumentNullException("Question");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Question));
            }
            if ((Solution == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Solution));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((System.DateTime)(StartTime));
            if ((GYSAcceptTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(GYSAcceptTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Sequence == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Sequence));
            }
            if ((EndTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((System.DateTime)(EndTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((LastCheckTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(LastCheckTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Remart == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Remart));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_ID));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_FatherID));
            if ((Original_ProviderMan == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_ProviderMan));
            }
            if ((Original_AccessoryName == null)) {
                throw new global::System.ArgumentNullException("Original_AccessoryName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_AccessoryName));
            }
            if ((Original_AccessoryCode == null)) {
                throw new global::System.ArgumentNullException("Original_AccessoryCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_AccessoryCode));
            }
            if ((Original_Spec == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_Spec));
            }
            if ((Original_Question == null)) {
                throw new global::System.ArgumentNullException("Original_Question");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_Question));
            }
            if ((Original_Solution == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_Solution));
            }
            this.Adapter.UpdateCommand.Parameters[24].Value = ((System.DateTime)(Original_StartTime));
            if ((Original_GYSAcceptTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((System.DateTime)(Original_GYSAcceptTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_Sequence == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_Sequence));
            }
            if ((Original_EndTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((System.DateTime)(Original_EndTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_LastCheckTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((System.DateTime)(Original_LastCheckTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_Remart == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_Remart));
            }
            this.Adapter.UpdateCommand.Parameters[35].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int FatherID, 
                    string ProviderMan, 
                    string AccessoryName, 
                    string AccessoryCode, 
                    string Spec, 
                    string Question, 
                    string Solution, 
                    System.DateTime StartTime, 
                    global::System.Nullable<global::System.DateTime> GYSAcceptTime, 
                    string Sequence, 
                    global::System.Nullable<global::System.DateTime> EndTime, 
                    global::System.Nullable<global::System.DateTime> LastCheckTime, 
                    string Remart, 
                    int Original_ID, 
                    int Original_FatherID, 
                    string Original_ProviderMan, 
                    string Original_AccessoryName, 
                    string Original_AccessoryCode, 
                    string Original_Spec, 
                    string Original_Question, 
                    string Original_Solution, 
                    System.DateTime Original_StartTime, 
                    global::System.Nullable<global::System.DateTime> Original_GYSAcceptTime, 
                    string Original_Sequence, 
                    global::System.Nullable<global::System.DateTime> Original_EndTime, 
                    global::System.Nullable<global::System.DateTime> Original_LastCheckTime, 
                    string Original_Remart) {
            return this.Update(FatherID, ProviderMan, AccessoryName, AccessoryCode, Spec, Question, Solution, StartTime, GYSAcceptTime, Sequence, EndTime, LastCheckTime, Remart, Original_ID, Original_FatherID, Original_ProviderMan, Original_AccessoryName, Original_AccessoryCode, Original_Spec, Original_Question, Original_Solution, Original_StartTime, Original_GYSAcceptTime, Original_Sequence, Original_EndTime, Original_LastCheckTime, Original_Remart, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OF_AnswerTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OF_AnswerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OF_Answer";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("answerName", "answerName");
            tableMapping.ColumnMappings.Add("title", "title");
            tableMapping.ColumnMappings.Add("answerContent", "answerContent");
            tableMapping.ColumnMappings.Add("answerTime", "answerTime");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[OF_Answer] WHERE (([ID] = @Original_ID) AND ([answerName] = @Original_answerName) AND ([title] = @Original_title) AND ((@IsNull_answerContent = 1 AND [answerContent] IS NULL) OR ([answerContent] = @Original_answerContent)) AND ((@IsNull_answerTime = 1 AND [answerTime] IS NULL) OR ([answerTime] = @Original_answerTime)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_answerName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "answerName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "title", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_answerContent", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "answerContent", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_answerContent", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "answerContent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_answerTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "answerTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_answerTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "answerTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OF_Answer] ([answerName], [title], [answerContent], [answerTim" +
                "e]) VALUES (@answerName, @title, @answerContent, @answerTime);\r\nSELECT ID, answe" +
                "rName, title, answerContent, answerTime FROM OF_Answer WHERE (ID = SCOPE_IDENTIT" +
                "Y())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@answerName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "answerName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@answerContent", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "answerContent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@answerTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "answerTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[OF_Answer] SET [answerName] = @answerName, [title] = @title, [answerContent] = @answerContent, [answerTime] = @answerTime WHERE (([ID] = @Original_ID) AND ([answerName] = @Original_answerName) AND ([title] = @Original_title) AND ((@IsNull_answerContent = 1 AND [answerContent] IS NULL) OR ([answerContent] = @Original_answerContent)) AND ((@IsNull_answerTime = 1 AND [answerTime] IS NULL) OR ([answerTime] = @Original_answerTime)));
SELECT ID, answerName, title, answerContent, answerTime FROM OF_Answer WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@answerName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "answerName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@answerContent", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "answerContent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@answerTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "answerTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_answerName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "answerName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "title", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_answerContent", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "answerContent", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_answerContent", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "answerContent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_answerTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "answerTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_answerTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "answerTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, answerName, title, answerContent, answerTime FROM dbo.OF_Answer";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.OF_AnswerDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.OF_AnswerDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.OF_AnswerDataTable dataTable = new RundarWebServerDataSet.OF_AnswerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.OF_AnswerDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "OF_Answer");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_answerName, string Original_title, string Original_answerContent, global::System.Nullable<global::System.DateTime> Original_answerTime) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_answerName == null)) {
                throw new global::System.ArgumentNullException("Original_answerName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_answerName));
            }
            if ((Original_title == null)) {
                throw new global::System.ArgumentNullException("Original_title");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_title));
            }
            if ((Original_answerContent == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_answerContent));
            }
            if ((Original_answerTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_answerTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string answerName, string title, string answerContent, global::System.Nullable<global::System.DateTime> answerTime) {
            if ((answerName == null)) {
                throw new global::System.ArgumentNullException("answerName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(answerName));
            }
            if ((title == null)) {
                throw new global::System.ArgumentNullException("title");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(title));
            }
            if ((answerContent == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(answerContent));
            }
            if ((answerTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(answerTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string answerName, string title, string answerContent, global::System.Nullable<global::System.DateTime> answerTime, int Original_ID, string Original_answerName, string Original_title, string Original_answerContent, global::System.Nullable<global::System.DateTime> Original_answerTime, int ID) {
            if ((answerName == null)) {
                throw new global::System.ArgumentNullException("answerName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(answerName));
            }
            if ((title == null)) {
                throw new global::System.ArgumentNullException("title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(title));
            }
            if ((answerContent == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(answerContent));
            }
            if ((answerTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(answerTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID));
            if ((Original_answerName == null)) {
                throw new global::System.ArgumentNullException("Original_answerName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_answerName));
            }
            if ((Original_title == null)) {
                throw new global::System.ArgumentNullException("Original_title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_title));
            }
            if ((Original_answerContent == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_answerContent));
            }
            if ((Original_answerTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((System.DateTime)(Original_answerTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string answerName, string title, string answerContent, global::System.Nullable<global::System.DateTime> answerTime, int Original_ID, string Original_answerName, string Original_title, string Original_answerContent, global::System.Nullable<global::System.DateTime> Original_answerTime) {
            return this.Update(answerName, title, answerContent, answerTime, Original_ID, Original_answerName, Original_title, Original_answerContent, Original_answerTime, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OF_BillID_StatusTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OF_BillID_StatusTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OF_BillID_Status";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Bill_ID", "Bill_ID");
            tableMapping.ColumnMappings.Add("UseStatus", "UseStatus");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[OF_BillID_Status] WHERE (([ID] = @Original_ID) AND ([Bill_ID] " +
                "= @Original_Bill_ID) AND ([UseStatus] = @Original_UseStatus))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Bill_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Bill_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UseStatus", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UseStatus", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OF_BillID_Status] ([Bill_ID], [UseStatus]) VALUES (@Bill_ID, @" +
                "UseStatus);\r\nSELECT ID, Bill_ID, UseStatus FROM OF_BillID_Status WHERE (ID = SCO" +
                "PE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Bill_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Bill_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UseStatus", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UseStatus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[OF_BillID_Status] SET [Bill_ID] = @Bill_ID, [UseStatus] = @UseStatus WHERE (([ID] = @Original_ID) AND ([Bill_ID] = @Original_Bill_ID) AND ([UseStatus] = @Original_UseStatus));
SELECT ID, Bill_ID, UseStatus FROM OF_BillID_Status WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Bill_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Bill_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UseStatus", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UseStatus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Bill_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Bill_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UseStatus", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UseStatus", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, Bill_ID, UseStatus FROM dbo.OF_BillID_Status";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.OF_BillID_StatusDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.OF_BillID_StatusDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.OF_BillID_StatusDataTable dataTable = new RundarWebServerDataSet.OF_BillID_StatusDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.OF_BillID_StatusDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "OF_BillID_Status");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_Bill_ID, bool Original_UseStatus) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_Bill_ID == null)) {
                throw new global::System.ArgumentNullException("Original_Bill_ID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Bill_ID));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((bool)(Original_UseStatus));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Bill_ID, bool UseStatus) {
            if ((Bill_ID == null)) {
                throw new global::System.ArgumentNullException("Bill_ID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Bill_ID));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(UseStatus));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Bill_ID, bool UseStatus, int Original_ID, string Original_Bill_ID, bool Original_UseStatus, int ID) {
            if ((Bill_ID == null)) {
                throw new global::System.ArgumentNullException("Bill_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Bill_ID));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(UseStatus));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID));
            if ((Original_Bill_ID == null)) {
                throw new global::System.ArgumentNullException("Original_Bill_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_Bill_ID));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(Original_UseStatus));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Bill_ID, bool UseStatus, int Original_ID, string Original_Bill_ID, bool Original_UseStatus) {
            return this.Update(Bill_ID, UseStatus, Original_ID, Original_Bill_ID, Original_UseStatus, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OF_BugCodeTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OF_BugCodeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OF_BugCode";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("BugName", "BugName");
            tableMapping.ColumnMappings.Add("Remark", "Remark");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[OF_BugCode] WHERE (([ID] = @Original_ID) AND ([BugName] = @Ori" +
                "ginal_BugName) AND ((@IsNull_Remark = 1 AND [Remark] IS NULL) OR ([Remark] = @Or" +
                "iginal_Remark)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BugName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Remark", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OF_BugCode] ([BugName], [Remark]) VALUES (@BugName, @Remark);\r" +
                "\nSELECT ID, BugName, Remark FROM OF_BugCode WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BugName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[OF_BugCode] SET [BugName] = @BugName, [Remark] = @Remark WHERE (([ID] = @Original_ID) AND ([BugName] = @Original_BugName) AND ((@IsNull_Remark = 1 AND [Remark] IS NULL) OR ([Remark] = @Original_Remark)));
SELECT ID, BugName, Remark FROM OF_BugCode WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BugName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BugName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Remark", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, BugName, Remark FROM dbo.OF_BugCode";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.OF_BugCodeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.OF_BugCodeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.OF_BugCodeDataTable dataTable = new RundarWebServerDataSet.OF_BugCodeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.OF_BugCodeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "OF_BugCode");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_BugName, string Original_Remark) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_BugName == null)) {
                throw new global::System.ArgumentNullException("Original_BugName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_BugName));
            }
            if ((Original_Remark == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Remark));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string BugName, string Remark) {
            if ((BugName == null)) {
                throw new global::System.ArgumentNullException("BugName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(BugName));
            }
            if ((Remark == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Remark));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string BugName, string Remark, int Original_ID, string Original_BugName, string Original_Remark, int ID) {
            if ((BugName == null)) {
                throw new global::System.ArgumentNullException("BugName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(BugName));
            }
            if ((Remark == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Remark));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID));
            if ((Original_BugName == null)) {
                throw new global::System.ArgumentNullException("Original_BugName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_BugName));
            }
            if ((Original_Remark == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Remark));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string BugName, string Remark, int Original_ID, string Original_BugName, string Original_Remark) {
            return this.Update(BugName, Remark, Original_ID, Original_BugName, Original_Remark, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OF_BugMessageInfoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OF_BugMessageInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OF_BugMessageInfo";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("ServiceID", "ServiceID");
            tableMapping.ColumnMappings.Add("BugCode", "BugCode");
            tableMapping.ColumnMappings.Add("CarMainBug", "CarMainBug");
            tableMapping.ColumnMappings.Add("CarSecendBug", "CarSecendBug");
            tableMapping.ColumnMappings.Add("Frequency", "Frequency");
            tableMapping.ColumnMappings.Add("Condition", "Condition");
            tableMapping.ColumnMappings.Add("BugDeclare", "BugDeclare");
            tableMapping.ColumnMappings.Add("CVTOilDetection", "CVTOilDetection");
            tableMapping.ColumnMappings.Add("PressureSensor", "PressureSensor");
            tableMapping.ColumnMappings.Add("ActiveSensor", "ActiveSensor");
            tableMapping.ColumnMappings.Add("PassivitySensor", "PassivitySensor");
            tableMapping.ColumnMappings.Add("ShiftKnob", "ShiftKnob");
            tableMapping.ColumnMappings.Add("OverLinkStatus", "OverLinkStatus");
            tableMapping.ColumnMappings.Add("OilSump", "OilSump");
            tableMapping.ColumnMappings.Add("PKey", "PKey");
            tableMapping.ColumnMappings.Add("RKey", "RKey");
            tableMapping.ColumnMappings.Add("NKey", "NKey");
            tableMapping.ColumnMappings.Add("DKey", "DKey");
            tableMapping.ColumnMappings.Add("SKey", "SKey");
            tableMapping.ColumnMappings.Add("Remark", "Remark");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[OF_BugMessageInfo] WHERE (([ID] = @Original_ID) AND ((@IsNull_" +
                "ServiceID = 1 AND [ServiceID] IS NULL) OR ([ServiceID] = @Original_ServiceID)) A" +
                "ND ((@IsNull_BugCode = 1 AND [BugCode] IS NULL) OR ([BugCode] = @Original_BugCod" +
                "e)) AND ((@IsNull_CarMainBug = 1 AND [CarMainBug] IS NULL) OR ([CarMainBug] = @O" +
                "riginal_CarMainBug)) AND ((@IsNull_CarSecendBug = 1 AND [CarSecendBug] IS NULL) " +
                "OR ([CarSecendBug] = @Original_CarSecendBug)) AND ((@IsNull_Frequency = 1 AND [F" +
                "requency] IS NULL) OR ([Frequency] = @Original_Frequency)) AND ((@IsNull_Conditi" +
                "on = 1 AND [Condition] IS NULL) OR ([Condition] = @Original_Condition)) AND ((@I" +
                "sNull_BugDeclare = 1 AND [BugDeclare] IS NULL) OR ([BugDeclare] = @Original_BugD" +
                "eclare)) AND ((@IsNull_CVTOilDetection = 1 AND [CVTOilDetection] IS NULL) OR ([C" +
                "VTOilDetection] = @Original_CVTOilDetection)) AND ((@IsNull_PressureSensor = 1 A" +
                "ND [PressureSensor] IS NULL) OR ([PressureSensor] = @Original_PressureSensor)) A" +
                "ND ((@IsNull_ActiveSensor = 1 AND [ActiveSensor] IS NULL) OR ([ActiveSensor] = @" +
                "Original_ActiveSensor)) AND ((@IsNull_PassivitySensor = 1 AND [PassivitySensor] " +
                "IS NULL) OR ([PassivitySensor] = @Original_PassivitySensor)) AND ((@IsNull_Shift" +
                "Knob = 1 AND [ShiftKnob] IS NULL) OR ([ShiftKnob] = @Original_ShiftKnob)) AND ((" +
                "@IsNull_OverLinkStatus = 1 AND [OverLinkStatus] IS NULL) OR ([OverLinkStatus] = " +
                "@Original_OverLinkStatus)) AND ((@IsNull_OilSump = 1 AND [OilSump] IS NULL) OR (" +
                "[OilSump] = @Original_OilSump)) AND ((@IsNull_PKey = 1 AND [PKey] IS NULL) OR ([" +
                "PKey] = @Original_PKey)) AND ((@IsNull_RKey = 1 AND [RKey] IS NULL) OR ([RKey] =" +
                " @Original_RKey)) AND ((@IsNull_NKey = 1 AND [NKey] IS NULL) OR ([NKey] = @Origi" +
                "nal_NKey)) AND ((@IsNull_DKey = 1 AND [DKey] IS NULL) OR ([DKey] = @Original_DKe" +
                "y)) AND ((@IsNull_SKey = 1 AND [SKey] IS NULL) OR ([SKey] = @Original_SKey)) AND" +
                " ((@IsNull_Remark = 1 AND [Remark] IS NULL) OR ([Remark] = @Original_Remark)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ServiceID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BugCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugCode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BugCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CarMainBug", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarMainBug", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CarMainBug", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarMainBug", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CarSecendBug", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarSecendBug", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CarSecendBug", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarSecendBug", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Frequency", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Frequency", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Condition", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Condition", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Condition", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Condition", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BugDeclare", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugDeclare", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BugDeclare", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugDeclare", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CVTOilDetection", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTOilDetection", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CVTOilDetection", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTOilDetection", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PressureSensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PressureSensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PressureSensor", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PressureSensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ActiveSensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActiveSensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ActiveSensor", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActiveSensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PassivitySensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassivitySensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PassivitySensor", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassivitySensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ShiftKnob", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShiftKnob", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShiftKnob", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShiftKnob", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OverLinkStatus", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OverLinkStatus", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OverLinkStatus", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OverLinkStatus", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OilSump", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OilSump", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OilSump", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OilSump", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PKey", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PKey", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PKey", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RKey", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RKey", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RKey", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NKey", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NKey", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NKey", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DKey", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DKey", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DKey", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SKey", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SKey", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SKey", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Remark", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[OF_BugMessageInfo] ([ServiceID], [BugCode], [CarMainBug], [CarSecendBug], [Frequency], [Condition], [BugDeclare], [CVTOilDetection], [PressureSensor], [ActiveSensor], [PassivitySensor], [ShiftKnob], [OverLinkStatus], [OilSump], [PKey], [RKey], [NKey], [DKey], [SKey], [Remark]) VALUES (@ServiceID, @BugCode, @CarMainBug, @CarSecendBug, @Frequency, @Condition, @BugDeclare, @CVTOilDetection, @PressureSensor, @ActiveSensor, @PassivitySensor, @ShiftKnob, @OverLinkStatus, @OilSump, @PKey, @RKey, @NKey, @DKey, @SKey, @Remark);
SELECT ID, ServiceID, BugCode, CarMainBug, CarSecendBug, Frequency, Condition, BugDeclare, CVTOilDetection, PressureSensor, ActiveSensor, PassivitySensor, ShiftKnob, OverLinkStatus, OilSump, PKey, RKey, NKey, DKey, SKey, Remark FROM OF_BugMessageInfo WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ServiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BugCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CarMainBug", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarMainBug", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CarSecendBug", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarSecendBug", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Frequency", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Condition", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Condition", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BugDeclare", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugDeclare", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CVTOilDetection", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTOilDetection", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PressureSensor", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PressureSensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ActiveSensor", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActiveSensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassivitySensor", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassivitySensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShiftKnob", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShiftKnob", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OverLinkStatus", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OverLinkStatus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OilSump", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OilSump", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PKey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RKey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NKey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DKey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SKey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[OF_BugMessageInfo] SET [ServiceID] = @ServiceID, [BugCode] = @BugCo" +
                "de, [CarMainBug] = @CarMainBug, [CarSecendBug] = @CarSecendBug, [Frequency] = @F" +
                "requency, [Condition] = @Condition, [BugDeclare] = @BugDeclare, [CVTOilDetection" +
                "] = @CVTOilDetection, [PressureSensor] = @PressureSensor, [ActiveSensor] = @Acti" +
                "veSensor, [PassivitySensor] = @PassivitySensor, [ShiftKnob] = @ShiftKnob, [OverL" +
                "inkStatus] = @OverLinkStatus, [OilSump] = @OilSump, [PKey] = @PKey, [RKey] = @RK" +
                "ey, [NKey] = @NKey, [DKey] = @DKey, [SKey] = @SKey, [Remark] = @Remark WHERE (([" +
                "ID] = @Original_ID) AND ((@IsNull_ServiceID = 1 AND [ServiceID] IS NULL) OR ([Se" +
                "rviceID] = @Original_ServiceID)) AND ((@IsNull_BugCode = 1 AND [BugCode] IS NULL" +
                ") OR ([BugCode] = @Original_BugCode)) AND ((@IsNull_CarMainBug = 1 AND [CarMainB" +
                "ug] IS NULL) OR ([CarMainBug] = @Original_CarMainBug)) AND ((@IsNull_CarSecendBu" +
                "g = 1 AND [CarSecendBug] IS NULL) OR ([CarSecendBug] = @Original_CarSecendBug)) " +
                "AND ((@IsNull_Frequency = 1 AND [Frequency] IS NULL) OR ([Frequency] = @Original" +
                "_Frequency)) AND ((@IsNull_Condition = 1 AND [Condition] IS NULL) OR ([Condition" +
                "] = @Original_Condition)) AND ((@IsNull_BugDeclare = 1 AND [BugDeclare] IS NULL)" +
                " OR ([BugDeclare] = @Original_BugDeclare)) AND ((@IsNull_CVTOilDetection = 1 AND" +
                " [CVTOilDetection] IS NULL) OR ([CVTOilDetection] = @Original_CVTOilDetection)) " +
                "AND ((@IsNull_PressureSensor = 1 AND [PressureSensor] IS NULL) OR ([PressureSens" +
                "or] = @Original_PressureSensor)) AND ((@IsNull_ActiveSensor = 1 AND [ActiveSenso" +
                "r] IS NULL) OR ([ActiveSensor] = @Original_ActiveSensor)) AND ((@IsNull_Passivit" +
                "ySensor = 1 AND [PassivitySensor] IS NULL) OR ([PassivitySensor] = @Original_Pas" +
                "sivitySensor)) AND ((@IsNull_ShiftKnob = 1 AND [ShiftKnob] IS NULL) OR ([ShiftKn" +
                "ob] = @Original_ShiftKnob)) AND ((@IsNull_OverLinkStatus = 1 AND [OverLinkStatus" +
                "] IS NULL) OR ([OverLinkStatus] = @Original_OverLinkStatus)) AND ((@IsNull_OilSu" +
                "mp = 1 AND [OilSump] IS NULL) OR ([OilSump] = @Original_OilSump)) AND ((@IsNull_" +
                "PKey = 1 AND [PKey] IS NULL) OR ([PKey] = @Original_PKey)) AND ((@IsNull_RKey = " +
                "1 AND [RKey] IS NULL) OR ([RKey] = @Original_RKey)) AND ((@IsNull_NKey = 1 AND [" +
                "NKey] IS NULL) OR ([NKey] = @Original_NKey)) AND ((@IsNull_DKey = 1 AND [DKey] I" +
                "S NULL) OR ([DKey] = @Original_DKey)) AND ((@IsNull_SKey = 1 AND [SKey] IS NULL)" +
                " OR ([SKey] = @Original_SKey)) AND ((@IsNull_Remark = 1 AND [Remark] IS NULL) OR" +
                " ([Remark] = @Original_Remark)));\r\nSELECT ID, ServiceID, BugCode, CarMainBug, Ca" +
                "rSecendBug, Frequency, Condition, BugDeclare, CVTOilDetection, PressureSensor, A" +
                "ctiveSensor, PassivitySensor, ShiftKnob, OverLinkStatus, OilSump, PKey, RKey, NK" +
                "ey, DKey, SKey, Remark FROM OF_BugMessageInfo WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ServiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BugCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CarMainBug", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarMainBug", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CarSecendBug", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarSecendBug", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Frequency", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Condition", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Condition", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BugDeclare", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugDeclare", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CVTOilDetection", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTOilDetection", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PressureSensor", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PressureSensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ActiveSensor", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActiveSensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PassivitySensor", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassivitySensor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ShiftKnob", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShiftKnob", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OverLinkStatus", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OverLinkStatus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OilSump", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OilSump", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PKey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RKey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NKey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DKey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SKey", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ServiceID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BugCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugCode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BugCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CarMainBug", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarMainBug", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CarMainBug", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarMainBug", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CarSecendBug", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarSecendBug", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CarSecendBug", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarSecendBug", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Frequency", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Frequency", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Frequency", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Condition", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Condition", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Condition", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Condition", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BugDeclare", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugDeclare", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BugDeclare", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugDeclare", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CVTOilDetection", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTOilDetection", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CVTOilDetection", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTOilDetection", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PressureSensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PressureSensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PressureSensor", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PressureSensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ActiveSensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActiveSensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ActiveSensor", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActiveSensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PassivitySensor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassivitySensor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PassivitySensor", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PassivitySensor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ShiftKnob", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShiftKnob", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ShiftKnob", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ShiftKnob", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OverLinkStatus", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OverLinkStatus", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OverLinkStatus", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OverLinkStatus", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OilSump", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OilSump", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OilSump", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OilSump", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PKey", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PKey", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PKey", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RKey", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RKey", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RKey", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NKey", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NKey", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NKey", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DKey", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DKey", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DKey", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SKey", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SKey", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SKey", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SKey", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Remark", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, ServiceID, BugCode, CarMainBug, CarSecendBug, Frequency, Condition, Bu" +
                "gDeclare, CVTOilDetection, PressureSensor, ActiveSensor, PassivitySensor, ShiftK" +
                "nob, OverLinkStatus, OilSump, PKey, RKey, NKey, DKey, SKey, Remark FROM dbo.OF_B" +
                "ugMessageInfo";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.OF_BugMessageInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.OF_BugMessageInfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.OF_BugMessageInfoDataTable dataTable = new RundarWebServerDataSet.OF_BugMessageInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.OF_BugMessageInfoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "OF_BugMessageInfo");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_ID, 
                    string Original_ServiceID, 
                    string Original_BugCode, 
                    string Original_CarMainBug, 
                    string Original_CarSecendBug, 
                    string Original_Frequency, 
                    string Original_Condition, 
                    string Original_BugDeclare, 
                    string Original_CVTOilDetection, 
                    string Original_PressureSensor, 
                    string Original_ActiveSensor, 
                    string Original_PassivitySensor, 
                    string Original_ShiftKnob, 
                    string Original_OverLinkStatus, 
                    string Original_OilSump, 
                    string Original_PKey, 
                    string Original_RKey, 
                    string Original_NKey, 
                    string Original_DKey, 
                    string Original_SKey, 
                    string Original_Remark) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_ServiceID == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_ServiceID));
            }
            if ((Original_BugCode == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_BugCode));
            }
            if ((Original_CarMainBug == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_CarMainBug));
            }
            if ((Original_CarSecendBug == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_CarSecendBug));
            }
            if ((Original_Frequency == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_Frequency));
            }
            if ((Original_Condition == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_Condition));
            }
            if ((Original_BugDeclare == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_BugDeclare));
            }
            if ((Original_CVTOilDetection == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_CVTOilDetection));
            }
            if ((Original_PressureSensor == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_PressureSensor));
            }
            if ((Original_ActiveSensor == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_ActiveSensor));
            }
            if ((Original_PassivitySensor == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_PassivitySensor));
            }
            if ((Original_ShiftKnob == null)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_ShiftKnob));
            }
            if ((Original_OverLinkStatus == null)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_OverLinkStatus));
            }
            if ((Original_OilSump == null)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((string)(Original_OilSump));
            }
            if ((Original_PKey == null)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((string)(Original_PKey));
            }
            if ((Original_RKey == null)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((string)(Original_RKey));
            }
            if ((Original_NKey == null)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((string)(Original_NKey));
            }
            if ((Original_DKey == null)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((string)(Original_DKey));
            }
            if ((Original_SKey == null)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((string)(Original_SKey));
            }
            if ((Original_Remark == null)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((string)(Original_Remark));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string ServiceID, 
                    string BugCode, 
                    string CarMainBug, 
                    string CarSecendBug, 
                    string Frequency, 
                    string Condition, 
                    string BugDeclare, 
                    string CVTOilDetection, 
                    string PressureSensor, 
                    string ActiveSensor, 
                    string PassivitySensor, 
                    string ShiftKnob, 
                    string OverLinkStatus, 
                    string OilSump, 
                    string PKey, 
                    string RKey, 
                    string NKey, 
                    string DKey, 
                    string SKey, 
                    string Remark) {
            if ((ServiceID == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ServiceID));
            }
            if ((BugCode == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(BugCode));
            }
            if ((CarMainBug == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CarMainBug));
            }
            if ((CarSecendBug == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CarSecendBug));
            }
            if ((Frequency == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Frequency));
            }
            if ((Condition == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Condition));
            }
            if ((BugDeclare == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(BugDeclare));
            }
            if ((CVTOilDetection == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(CVTOilDetection));
            }
            if ((PressureSensor == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(PressureSensor));
            }
            if ((ActiveSensor == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(ActiveSensor));
            }
            if ((PassivitySensor == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(PassivitySensor));
            }
            if ((ShiftKnob == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(ShiftKnob));
            }
            if ((OverLinkStatus == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(OverLinkStatus));
            }
            if ((OilSump == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(OilSump));
            }
            if ((PKey == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(PKey));
            }
            if ((RKey == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(RKey));
            }
            if ((NKey == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(NKey));
            }
            if ((DKey == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(DKey));
            }
            if ((SKey == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(SKey));
            }
            if ((Remark == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(Remark));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ServiceID, 
                    string BugCode, 
                    string CarMainBug, 
                    string CarSecendBug, 
                    string Frequency, 
                    string Condition, 
                    string BugDeclare, 
                    string CVTOilDetection, 
                    string PressureSensor, 
                    string ActiveSensor, 
                    string PassivitySensor, 
                    string ShiftKnob, 
                    string OverLinkStatus, 
                    string OilSump, 
                    string PKey, 
                    string RKey, 
                    string NKey, 
                    string DKey, 
                    string SKey, 
                    string Remark, 
                    int Original_ID, 
                    string Original_ServiceID, 
                    string Original_BugCode, 
                    string Original_CarMainBug, 
                    string Original_CarSecendBug, 
                    string Original_Frequency, 
                    string Original_Condition, 
                    string Original_BugDeclare, 
                    string Original_CVTOilDetection, 
                    string Original_PressureSensor, 
                    string Original_ActiveSensor, 
                    string Original_PassivitySensor, 
                    string Original_ShiftKnob, 
                    string Original_OverLinkStatus, 
                    string Original_OilSump, 
                    string Original_PKey, 
                    string Original_RKey, 
                    string Original_NKey, 
                    string Original_DKey, 
                    string Original_SKey, 
                    string Original_Remark, 
                    int ID) {
            if ((ServiceID == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ServiceID));
            }
            if ((BugCode == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(BugCode));
            }
            if ((CarMainBug == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CarMainBug));
            }
            if ((CarSecendBug == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CarSecendBug));
            }
            if ((Frequency == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Frequency));
            }
            if ((Condition == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Condition));
            }
            if ((BugDeclare == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(BugDeclare));
            }
            if ((CVTOilDetection == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(CVTOilDetection));
            }
            if ((PressureSensor == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(PressureSensor));
            }
            if ((ActiveSensor == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(ActiveSensor));
            }
            if ((PassivitySensor == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(PassivitySensor));
            }
            if ((ShiftKnob == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(ShiftKnob));
            }
            if ((OverLinkStatus == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(OverLinkStatus));
            }
            if ((OilSump == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(OilSump));
            }
            if ((PKey == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(PKey));
            }
            if ((RKey == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(RKey));
            }
            if ((NKey == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(NKey));
            }
            if ((DKey == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(DKey));
            }
            if ((SKey == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(SKey));
            }
            if ((Remark == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Remark));
            }
            this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_ID));
            if ((Original_ServiceID == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_ServiceID));
            }
            if ((Original_BugCode == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_BugCode));
            }
            if ((Original_CarMainBug == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_CarMainBug));
            }
            if ((Original_CarSecendBug == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_CarSecendBug));
            }
            if ((Original_Frequency == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_Frequency));
            }
            if ((Original_Condition == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_Condition));
            }
            if ((Original_BugDeclare == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_BugDeclare));
            }
            if ((Original_CVTOilDetection == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_CVTOilDetection));
            }
            if ((Original_PressureSensor == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_PressureSensor));
            }
            if ((Original_ActiveSensor == null)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_ActiveSensor));
            }
            if ((Original_PassivitySensor == null)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_PassivitySensor));
            }
            if ((Original_ShiftKnob == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_ShiftKnob));
            }
            if ((Original_OverLinkStatus == null)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(Original_OverLinkStatus));
            }
            if ((Original_OilSump == null)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((string)(Original_OilSump));
            }
            if ((Original_PKey == null)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((string)(Original_PKey));
            }
            if ((Original_RKey == null)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[52].Value = ((string)(Original_RKey));
            }
            if ((Original_NKey == null)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[54].Value = ((string)(Original_NKey));
            }
            if ((Original_DKey == null)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[56].Value = ((string)(Original_DKey));
            }
            if ((Original_SKey == null)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[58].Value = ((string)(Original_SKey));
            }
            if ((Original_Remark == null)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[60].Value = ((string)(Original_Remark));
            }
            this.Adapter.UpdateCommand.Parameters[61].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ServiceID, 
                    string BugCode, 
                    string CarMainBug, 
                    string CarSecendBug, 
                    string Frequency, 
                    string Condition, 
                    string BugDeclare, 
                    string CVTOilDetection, 
                    string PressureSensor, 
                    string ActiveSensor, 
                    string PassivitySensor, 
                    string ShiftKnob, 
                    string OverLinkStatus, 
                    string OilSump, 
                    string PKey, 
                    string RKey, 
                    string NKey, 
                    string DKey, 
                    string SKey, 
                    string Remark, 
                    int Original_ID, 
                    string Original_ServiceID, 
                    string Original_BugCode, 
                    string Original_CarMainBug, 
                    string Original_CarSecendBug, 
                    string Original_Frequency, 
                    string Original_Condition, 
                    string Original_BugDeclare, 
                    string Original_CVTOilDetection, 
                    string Original_PressureSensor, 
                    string Original_ActiveSensor, 
                    string Original_PassivitySensor, 
                    string Original_ShiftKnob, 
                    string Original_OverLinkStatus, 
                    string Original_OilSump, 
                    string Original_PKey, 
                    string Original_RKey, 
                    string Original_NKey, 
                    string Original_DKey, 
                    string Original_SKey, 
                    string Original_Remark) {
            return this.Update(ServiceID, BugCode, CarMainBug, CarSecendBug, Frequency, Condition, BugDeclare, CVTOilDetection, PressureSensor, ActiveSensor, PassivitySensor, ShiftKnob, OverLinkStatus, OilSump, PKey, RKey, NKey, DKey, SKey, Remark, Original_ID, Original_ServiceID, Original_BugCode, Original_CarMainBug, Original_CarSecendBug, Original_Frequency, Original_Condition, Original_BugDeclare, Original_CVTOilDetection, Original_PressureSensor, Original_ActiveSensor, Original_PassivitySensor, Original_ShiftKnob, Original_OverLinkStatus, Original_OilSump, Original_PKey, Original_RKey, Original_NKey, Original_DKey, Original_SKey, Original_Remark, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OF_CarBugStatusTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OF_CarBugStatusTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OF_CarBugStatus";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("BugCode", "BugCode");
            tableMapping.ColumnMappings.Add("BugName", "BugName");
            tableMapping.ColumnMappings.Add("Remark", "Remark");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[OF_CarBugStatus] WHERE (([ID] = @Original_ID) AND ([BugCode] =" +
                " @Original_BugCode) AND ([BugName] = @Original_BugName) AND ((@IsNull_Remark = 1" +
                " AND [Remark] IS NULL) OR ([Remark] = @Original_Remark)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BugCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BugName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Remark", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OF_CarBugStatus] ([BugCode], [BugName], [Remark]) VALUES (@Bug" +
                "Code, @BugName, @Remark);\r\nSELECT ID, BugCode, BugName, Remark FROM OF_CarBugSta" +
                "tus WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BugCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BugName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[OF_CarBugStatus] SET [BugCode] = @BugCode, [BugName] = @BugName, [Remark] = @Remark WHERE (([ID] = @Original_ID) AND ([BugCode] = @Original_BugCode) AND ([BugName] = @Original_BugName) AND ((@IsNull_Remark = 1 AND [Remark] IS NULL) OR ([Remark] = @Original_Remark)));
SELECT ID, BugCode, BugName, Remark FROM OF_CarBugStatus WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BugCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BugName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BugCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BugName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Remark", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, BugCode, BugName, Remark FROM dbo.OF_CarBugStatus";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.OF_CarBugStatusDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.OF_CarBugStatusDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.OF_CarBugStatusDataTable dataTable = new RundarWebServerDataSet.OF_CarBugStatusDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.OF_CarBugStatusDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "OF_CarBugStatus");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_BugCode, string Original_BugName, string Original_Remark) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_BugCode == null)) {
                throw new global::System.ArgumentNullException("Original_BugCode");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_BugCode));
            }
            if ((Original_BugName == null)) {
                throw new global::System.ArgumentNullException("Original_BugName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_BugName));
            }
            if ((Original_Remark == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Remark));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string BugCode, string BugName, string Remark) {
            if ((BugCode == null)) {
                throw new global::System.ArgumentNullException("BugCode");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(BugCode));
            }
            if ((BugName == null)) {
                throw new global::System.ArgumentNullException("BugName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(BugName));
            }
            if ((Remark == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Remark));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string BugCode, string BugName, string Remark, int Original_ID, string Original_BugCode, string Original_BugName, string Original_Remark, int ID) {
            if ((BugCode == null)) {
                throw new global::System.ArgumentNullException("BugCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(BugCode));
            }
            if ((BugName == null)) {
                throw new global::System.ArgumentNullException("BugName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(BugName));
            }
            if ((Remark == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Remark));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ID));
            if ((Original_BugCode == null)) {
                throw new global::System.ArgumentNullException("Original_BugCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_BugCode));
            }
            if ((Original_BugName == null)) {
                throw new global::System.ArgumentNullException("Original_BugName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_BugName));
            }
            if ((Original_Remark == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Remark));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string BugCode, string BugName, string Remark, int Original_ID, string Original_BugCode, string Original_BugName, string Original_Remark) {
            return this.Update(BugCode, BugName, Remark, Original_ID, Original_BugCode, Original_BugName, Original_Remark, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OF_DownRecordTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OF_DownRecordTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OF_DownRecord";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("FileID", "FileID");
            tableMapping.ColumnMappings.Add("DownUser", "DownUser");
            tableMapping.ColumnMappings.Add("DownTime", "DownTime");
            tableMapping.ColumnMappings.Add("DownContxt", "DownContxt");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[OF_DownRecord] WHERE (([ID] = @Original_ID) AND ((@IsNull_FileID = 1 AND [FileID] IS NULL) OR ([FileID] = @Original_FileID)) AND ([DownUser] = @Original_DownUser) AND ([DownTime] = @Original_DownTime) AND ([DownContxt] = @Original_DownContxt))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FileID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FileID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DownUser", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DownUser", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DownTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DownTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DownContxt", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DownContxt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OF_DownRecord] ([FileID], [DownUser], [DownTime], [DownContxt]" +
                ") VALUES (@FileID, @DownUser, @DownTime, @DownContxt);\r\nSELECT ID, FileID, DownU" +
                "ser, DownTime, DownContxt FROM OF_DownRecord WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DownUser", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DownUser", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DownTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DownTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DownContxt", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DownContxt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[OF_DownRecord] SET [FileID] = @FileID, [DownUser] = @DownUser, [DownTime] = @DownTime, [DownContxt] = @DownContxt WHERE (([ID] = @Original_ID) AND ((@IsNull_FileID = 1 AND [FileID] IS NULL) OR ([FileID] = @Original_FileID)) AND ([DownUser] = @Original_DownUser) AND ([DownTime] = @Original_DownTime) AND ([DownContxt] = @Original_DownContxt));
SELECT ID, FileID, DownUser, DownTime, DownContxt FROM OF_DownRecord WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DownUser", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DownUser", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DownTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DownTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DownContxt", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DownContxt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FileID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FileID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DownUser", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DownUser", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DownTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DownTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DownContxt", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DownContxt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, FileID, DownUser, DownTime, DownContxt FROM dbo.OF_DownRecord";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.OF_DownRecordDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.OF_DownRecordDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.OF_DownRecordDataTable dataTable = new RundarWebServerDataSet.OF_DownRecordDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.OF_DownRecordDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "OF_DownRecord");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, global::System.Nullable<int> Original_FileID, string Original_DownUser, System.DateTime Original_DownTime, string Original_DownContxt) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_FileID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_FileID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_DownUser == null)) {
                throw new global::System.ArgumentNullException("Original_DownUser");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_DownUser));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_DownTime));
            if ((Original_DownContxt == null)) {
                throw new global::System.ArgumentNullException("Original_DownContxt");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_DownContxt));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<int> FileID, string DownUser, System.DateTime DownTime, string DownContxt) {
            if ((FileID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(FileID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((DownUser == null)) {
                throw new global::System.ArgumentNullException("DownUser");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DownUser));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(DownTime));
            if ((DownContxt == null)) {
                throw new global::System.ArgumentNullException("DownContxt");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(DownContxt));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> FileID, string DownUser, System.DateTime DownTime, string DownContxt, int Original_ID, global::System.Nullable<int> Original_FileID, string Original_DownUser, System.DateTime Original_DownTime, string Original_DownContxt, int ID) {
            if ((FileID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(FileID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((DownUser == null)) {
                throw new global::System.ArgumentNullException("DownUser");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DownUser));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(DownTime));
            if ((DownContxt == null)) {
                throw new global::System.ArgumentNullException("DownContxt");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(DownContxt));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID));
            if ((Original_FileID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_FileID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_DownUser == null)) {
                throw new global::System.ArgumentNullException("Original_DownUser");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_DownUser));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(Original_DownTime));
            if ((Original_DownContxt == null)) {
                throw new global::System.ArgumentNullException("Original_DownContxt");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_DownContxt));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> FileID, string DownUser, System.DateTime DownTime, string DownContxt, int Original_ID, global::System.Nullable<int> Original_FileID, string Original_DownUser, System.DateTime Original_DownTime, string Original_DownContxt) {
            return this.Update(FileID, DownUser, DownTime, DownContxt, Original_ID, Original_FileID, Original_DownUser, Original_DownTime, Original_DownContxt, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OF_LoginLogTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OF_LoginLogTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OF_LoginLog";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("UserCode", "UserCode");
            tableMapping.ColumnMappings.Add("TrueName", "TrueName");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("IP", "IP");
            tableMapping.ColumnMappings.Add("Amount", "Amount");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[OF_LoginLog] WHERE (([ID] = @Original_ID) AND ([UserCode] = @O" +
                "riginal_UserCode) AND ([TrueName] = @Original_TrueName) AND ([Date] = @Original_" +
                "Date) AND ([IP] = @Original_IP) AND ([Amount] = @Original_Amount))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TrueName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrueName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IP", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IP", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Amount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Amount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OF_LoginLog] ([UserCode], [TrueName], [Date], [IP], [Amount]) " +
                "VALUES (@UserCode, @TrueName, @Date, @IP, @Amount);\r\nSELECT ID, UserCode, TrueNa" +
                "me, Date, IP, Amount FROM OF_LoginLog WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TrueName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrueName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IP", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Amount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Amount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[OF_LoginLog] SET [UserCode] = @UserCode, [TrueName] = @TrueName, [Date] = @Date, [IP] = @IP, [Amount] = @Amount WHERE (([ID] = @Original_ID) AND ([UserCode] = @Original_UserCode) AND ([TrueName] = @Original_TrueName) AND ([Date] = @Original_Date) AND ([IP] = @Original_IP) AND ([Amount] = @Original_Amount));
SELECT ID, UserCode, TrueName, Date, IP, Amount FROM OF_LoginLog WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TrueName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrueName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IP", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Amount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Amount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TrueName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrueName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IP", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IP", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Amount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Amount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, UserCode, TrueName, Date, IP, Amount FROM dbo.OF_LoginLog";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.OF_LoginLogDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.OF_LoginLogDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.OF_LoginLogDataTable dataTable = new RundarWebServerDataSet.OF_LoginLogDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.OF_LoginLogDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "OF_LoginLog");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_UserCode, string Original_TrueName, System.DateTime Original_Date, string Original_IP, int Original_Amount) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_UserCode == null)) {
                throw new global::System.ArgumentNullException("Original_UserCode");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_UserCode));
            }
            if ((Original_TrueName == null)) {
                throw new global::System.ArgumentNullException("Original_TrueName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_TrueName));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_Date));
            if ((Original_IP == null)) {
                throw new global::System.ArgumentNullException("Original_IP");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_IP));
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_Amount));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string UserCode, string TrueName, System.DateTime Date, string IP, int Amount) {
            if ((UserCode == null)) {
                throw new global::System.ArgumentNullException("UserCode");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(UserCode));
            }
            if ((TrueName == null)) {
                throw new global::System.ArgumentNullException("TrueName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TrueName));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(Date));
            if ((IP == null)) {
                throw new global::System.ArgumentNullException("IP");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(IP));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(Amount));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string UserCode, string TrueName, System.DateTime Date, string IP, int Amount, int Original_ID, string Original_UserCode, string Original_TrueName, System.DateTime Original_Date, string Original_IP, int Original_Amount, int ID) {
            if ((UserCode == null)) {
                throw new global::System.ArgumentNullException("UserCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(UserCode));
            }
            if ((TrueName == null)) {
                throw new global::System.ArgumentNullException("TrueName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TrueName));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(Date));
            if ((IP == null)) {
                throw new global::System.ArgumentNullException("IP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(IP));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Amount));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_ID));
            if ((Original_UserCode == null)) {
                throw new global::System.ArgumentNullException("Original_UserCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_UserCode));
            }
            if ((Original_TrueName == null)) {
                throw new global::System.ArgumentNullException("Original_TrueName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_TrueName));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(Original_Date));
            if ((Original_IP == null)) {
                throw new global::System.ArgumentNullException("Original_IP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_IP));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_Amount));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string UserCode, string TrueName, System.DateTime Date, string IP, int Amount, int Original_ID, string Original_UserCode, string Original_TrueName, System.DateTime Original_Date, string Original_IP, int Original_Amount) {
            return this.Update(UserCode, TrueName, Date, IP, Amount, Original_ID, Original_UserCode, Original_TrueName, Original_Date, Original_IP, Original_Amount, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OF_NewsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OF_NewsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OF_News";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Title", "Title");
            tableMapping.ColumnMappings.Add("NewsUrl", "NewsUrl");
            tableMapping.ColumnMappings.Add("NewsDate", "NewsDate");
            tableMapping.ColumnMappings.Add("NewsType", "NewsType");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[OF_News] WHERE (([ID] = @Original_ID) AND ([Title] = @Original" +
                "_Title) AND ([NewsUrl] = @Original_NewsUrl) AND ([NewsDate] = @Original_NewsDate" +
                ") AND ([NewsType] = @Original_NewsType))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Title", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewsUrl", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsUrl", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewsDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewsType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OF_News] ([Title], [NewsUrl], [NewsDate], [NewsType]) VALUES (" +
                "@Title, @NewsUrl, @NewsDate, @NewsType);\r\nSELECT ID, Title, NewsUrl, NewsDate, N" +
                "ewsType FROM OF_News WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsUrl", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[OF_News] SET [Title] = @Title, [NewsUrl] = @NewsUrl, [NewsDate] = @NewsDate, [NewsType] = @NewsType WHERE (([ID] = @Original_ID) AND ([Title] = @Original_Title) AND ([NewsUrl] = @Original_NewsUrl) AND ([NewsDate] = @Original_NewsDate) AND ([NewsType] = @Original_NewsType));
SELECT ID, Title, NewsUrl, NewsDate, NewsType FROM OF_News WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsUrl", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Title", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewsUrl", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsUrl", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewsDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewsType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, Title, NewsUrl, NewsDate, NewsType FROM dbo.OF_News";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.OF_NewsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.OF_NewsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.OF_NewsDataTable dataTable = new RundarWebServerDataSet.OF_NewsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.OF_NewsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "OF_News");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_Title, string Original_NewsUrl, System.DateTime Original_NewsDate, int Original_NewsType) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_Title == null)) {
                throw new global::System.ArgumentNullException("Original_Title");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Title));
            }
            if ((Original_NewsUrl == null)) {
                throw new global::System.ArgumentNullException("Original_NewsUrl");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_NewsUrl));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_NewsDate));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_NewsType));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Title, string NewsUrl, System.DateTime NewsDate, int NewsType) {
            if ((Title == null)) {
                throw new global::System.ArgumentNullException("Title");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Title));
            }
            if ((NewsUrl == null)) {
                throw new global::System.ArgumentNullException("NewsUrl");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NewsUrl));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(NewsDate));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(NewsType));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Title, string NewsUrl, System.DateTime NewsDate, int NewsType, int Original_ID, string Original_Title, string Original_NewsUrl, System.DateTime Original_NewsDate, int Original_NewsType, int ID) {
            if ((Title == null)) {
                throw new global::System.ArgumentNullException("Title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Title));
            }
            if ((NewsUrl == null)) {
                throw new global::System.ArgumentNullException("NewsUrl");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NewsUrl));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(NewsDate));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(NewsType));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID));
            if ((Original_Title == null)) {
                throw new global::System.ArgumentNullException("Original_Title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Title));
            }
            if ((Original_NewsUrl == null)) {
                throw new global::System.ArgumentNullException("Original_NewsUrl");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_NewsUrl));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((System.DateTime)(Original_NewsDate));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_NewsType));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Title, string NewsUrl, System.DateTime NewsDate, int NewsType, int Original_ID, string Original_Title, string Original_NewsUrl, System.DateTime Original_NewsDate, int Original_NewsType) {
            return this.Update(Title, NewsUrl, NewsDate, NewsType, Original_ID, Original_Title, Original_NewsUrl, Original_NewsDate, Original_NewsType, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OF_NewsAudienceTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OF_NewsAudienceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OF_NewsAudience";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("NewsID", "NewsID");
            tableMapping.ColumnMappings.Add("AudienceType", "AudienceType");
            tableMapping.ColumnMappings.Add("AudienceName", "AudienceName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[OF_NewsAudience] WHERE (([ID] = @Original_ID) AND ([NewsID] = " +
                "@Original_NewsID) AND ([AudienceType] = @Original_AudienceType) AND ([AudienceNa" +
                "me] = @Original_AudienceName))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewsID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AudienceType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AudienceType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AudienceName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AudienceName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OF_NewsAudience] ([NewsID], [AudienceType], [AudienceName]) VA" +
                "LUES (@NewsID, @AudienceType, @AudienceName);\r\nSELECT ID, NewsID, AudienceType, " +
                "AudienceName FROM OF_NewsAudience WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AudienceType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AudienceType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AudienceName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AudienceName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[OF_NewsAudience] SET [NewsID] = @NewsID, [AudienceType] = @AudienceType, [AudienceName] = @AudienceName WHERE (([ID] = @Original_ID) AND ([NewsID] = @Original_NewsID) AND ([AudienceType] = @Original_AudienceType) AND ([AudienceName] = @Original_AudienceName));
SELECT ID, NewsID, AudienceType, AudienceName FROM OF_NewsAudience WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewsID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AudienceType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AudienceType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AudienceName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AudienceName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewsID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewsID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AudienceType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AudienceType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AudienceName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AudienceName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, NewsID, AudienceType, AudienceName FROM dbo.OF_NewsAudience";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.OF_NewsAudienceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.OF_NewsAudienceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.OF_NewsAudienceDataTable dataTable = new RundarWebServerDataSet.OF_NewsAudienceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.OF_NewsAudienceDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "OF_NewsAudience");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, int Original_NewsID, string Original_AudienceType, string Original_AudienceName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_NewsID));
            if ((Original_AudienceType == null)) {
                throw new global::System.ArgumentNullException("Original_AudienceType");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_AudienceType));
            }
            if ((Original_AudienceName == null)) {
                throw new global::System.ArgumentNullException("Original_AudienceName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_AudienceName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int NewsID, string AudienceType, string AudienceName) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(NewsID));
            if ((AudienceType == null)) {
                throw new global::System.ArgumentNullException("AudienceType");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(AudienceType));
            }
            if ((AudienceName == null)) {
                throw new global::System.ArgumentNullException("AudienceName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(AudienceName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int NewsID, string AudienceType, string AudienceName, int Original_ID, int Original_NewsID, string Original_AudienceType, string Original_AudienceName, int ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(NewsID));
            if ((AudienceType == null)) {
                throw new global::System.ArgumentNullException("AudienceType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(AudienceType));
            }
            if ((AudienceName == null)) {
                throw new global::System.ArgumentNullException("AudienceName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(AudienceName));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ID));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_NewsID));
            if ((Original_AudienceType == null)) {
                throw new global::System.ArgumentNullException("Original_AudienceType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_AudienceType));
            }
            if ((Original_AudienceName == null)) {
                throw new global::System.ArgumentNullException("Original_AudienceName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_AudienceName));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int NewsID, string AudienceType, string AudienceName, int Original_ID, int Original_NewsID, string Original_AudienceType, string Original_AudienceName) {
            return this.Update(NewsID, AudienceType, AudienceName, Original_ID, Original_NewsID, Original_AudienceType, Original_AudienceName, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OF_NewsFileTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OF_NewsFileTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OF_NewsFile";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("sender", "sender");
            tableMapping.ColumnMappings.Add("title", "title");
            tableMapping.ColumnMappings.Add("contents", "contents");
            tableMapping.ColumnMappings.Add("fileNames", "fileNames");
            tableMapping.ColumnMappings.Add("filePath", "filePath");
            tableMapping.ColumnMappings.Add("receiver", "receiver");
            tableMapping.ColumnMappings.Add("releaseTime", "releaseTime");
            tableMapping.ColumnMappings.Add("newsType", "newsType");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[OF_NewsFile] WHERE (([ID] = @Original_ID) AND ([sender] = @Original_sender) AND ([title] = @Original_title) AND ((@IsNull_contents = 1 AND [contents] IS NULL) OR ([contents] = @Original_contents)) AND ((@IsNull_fileNames = 1 AND [fileNames] IS NULL) OR ([fileNames] = @Original_fileNames)) AND ((@IsNull_filePath = 1 AND [filePath] IS NULL) OR ([filePath] = @Original_filePath)) AND ((@IsNull_receiver = 1 AND [receiver] IS NULL) OR ([receiver] = @Original_receiver)) AND ((@IsNull_releaseTime = 1 AND [releaseTime] IS NULL) OR ([releaseTime] = @Original_releaseTime)) AND ((@IsNull_newsType = 1 AND [newsType] IS NULL) OR ([newsType] = @Original_newsType)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_sender", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sender", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "title", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_contents", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "contents", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_contents", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "contents", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_fileNames", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "fileNames", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_fileNames", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "fileNames", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_filePath", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "filePath", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_filePath", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "filePath", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_receiver", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "receiver", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_receiver", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "receiver", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_releaseTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "releaseTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_releaseTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "releaseTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_newsType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "newsType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_newsType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "newsType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[OF_NewsFile] ([sender], [title], [contents], [fileNames], [filePath], [receiver], [releaseTime], [newsType]) VALUES (@sender, @title, @contents, @fileNames, @filePath, @receiver, @releaseTime, @newsType);
SELECT ID, sender, title, contents, fileNames, filePath, receiver, releaseTime, newsType FROM OF_NewsFile WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sender", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sender", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@contents", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "contents", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@fileNames", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "fileNames", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@filePath", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "filePath", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@receiver", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "receiver", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@releaseTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "releaseTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@newsType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "newsType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[OF_NewsFile] SET [sender] = @sender, [title] = @title, [contents] = @contents, [fileNames] = @fileNames, [filePath] = @filePath, [receiver] = @receiver, [releaseTime] = @releaseTime, [newsType] = @newsType WHERE (([ID] = @Original_ID) AND ([sender] = @Original_sender) AND ([title] = @Original_title) AND ((@IsNull_contents = 1 AND [contents] IS NULL) OR ([contents] = @Original_contents)) AND ((@IsNull_fileNames = 1 AND [fileNames] IS NULL) OR ([fileNames] = @Original_fileNames)) AND ((@IsNull_filePath = 1 AND [filePath] IS NULL) OR ([filePath] = @Original_filePath)) AND ((@IsNull_receiver = 1 AND [receiver] IS NULL) OR ([receiver] = @Original_receiver)) AND ((@IsNull_releaseTime = 1 AND [releaseTime] IS NULL) OR ([releaseTime] = @Original_releaseTime)) AND ((@IsNull_newsType = 1 AND [newsType] IS NULL) OR ([newsType] = @Original_newsType)));
SELECT ID, sender, title, contents, fileNames, filePath, receiver, releaseTime, newsType FROM OF_NewsFile WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sender", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sender", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@contents", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "contents", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@fileNames", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "fileNames", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@filePath", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "filePath", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@receiver", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "receiver", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@releaseTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "releaseTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@newsType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "newsType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_sender", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sender", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_title", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "title", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_contents", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "contents", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_contents", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "contents", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_fileNames", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "fileNames", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_fileNames", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "fileNames", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_filePath", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "filePath", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_filePath", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "filePath", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_receiver", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "receiver", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_receiver", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "receiver", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_releaseTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "releaseTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_releaseTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "releaseTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_newsType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "newsType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_newsType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "newsType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, sender, title, contents, fileNames, filePath, receiver, releaseTime, n" +
                "ewsType FROM dbo.OF_NewsFile";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.OF_NewsFileDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.OF_NewsFileDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.OF_NewsFileDataTable dataTable = new RundarWebServerDataSet.OF_NewsFileDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.OF_NewsFileDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "OF_NewsFile");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_sender, string Original_title, string Original_contents, string Original_fileNames, string Original_filePath, string Original_receiver, global::System.Nullable<global::System.DateTime> Original_releaseTime, string Original_newsType) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_sender == null)) {
                throw new global::System.ArgumentNullException("Original_sender");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_sender));
            }
            if ((Original_title == null)) {
                throw new global::System.ArgumentNullException("Original_title");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_title));
            }
            if ((Original_contents == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_contents));
            }
            if ((Original_fileNames == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_fileNames));
            }
            if ((Original_filePath == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_filePath));
            }
            if ((Original_receiver == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_receiver));
            }
            if ((Original_releaseTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((System.DateTime)(Original_releaseTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_newsType == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_newsType));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string sender, string title, string contents, string fileNames, string filePath, string receiver, global::System.Nullable<global::System.DateTime> releaseTime, string newsType) {
            if ((sender == null)) {
                throw new global::System.ArgumentNullException("sender");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(sender));
            }
            if ((title == null)) {
                throw new global::System.ArgumentNullException("title");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(title));
            }
            if ((contents == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(contents));
            }
            if ((fileNames == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(fileNames));
            }
            if ((filePath == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(filePath));
            }
            if ((receiver == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(receiver));
            }
            if ((releaseTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(releaseTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((newsType == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(newsType));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string sender, 
                    string title, 
                    string contents, 
                    string fileNames, 
                    string filePath, 
                    string receiver, 
                    global::System.Nullable<global::System.DateTime> releaseTime, 
                    string newsType, 
                    int Original_ID, 
                    string Original_sender, 
                    string Original_title, 
                    string Original_contents, 
                    string Original_fileNames, 
                    string Original_filePath, 
                    string Original_receiver, 
                    global::System.Nullable<global::System.DateTime> Original_releaseTime, 
                    string Original_newsType, 
                    int ID) {
            if ((sender == null)) {
                throw new global::System.ArgumentNullException("sender");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(sender));
            }
            if ((title == null)) {
                throw new global::System.ArgumentNullException("title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(title));
            }
            if ((contents == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(contents));
            }
            if ((fileNames == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(fileNames));
            }
            if ((filePath == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(filePath));
            }
            if ((receiver == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(receiver));
            }
            if ((releaseTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(releaseTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((newsType == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(newsType));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_ID));
            if ((Original_sender == null)) {
                throw new global::System.ArgumentNullException("Original_sender");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_sender));
            }
            if ((Original_title == null)) {
                throw new global::System.ArgumentNullException("Original_title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_title));
            }
            if ((Original_contents == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_contents));
            }
            if ((Original_fileNames == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_fileNames));
            }
            if ((Original_filePath == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_filePath));
            }
            if ((Original_receiver == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_receiver));
            }
            if ((Original_releaseTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((System.DateTime)(Original_releaseTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_newsType == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_newsType));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string sender, 
                    string title, 
                    string contents, 
                    string fileNames, 
                    string filePath, 
                    string receiver, 
                    global::System.Nullable<global::System.DateTime> releaseTime, 
                    string newsType, 
                    int Original_ID, 
                    string Original_sender, 
                    string Original_title, 
                    string Original_contents, 
                    string Original_fileNames, 
                    string Original_filePath, 
                    string Original_receiver, 
                    global::System.Nullable<global::System.DateTime> Original_releaseTime, 
                    string Original_newsType) {
            return this.Update(sender, title, contents, fileNames, filePath, receiver, releaseTime, newsType, Original_ID, Original_sender, Original_title, Original_contents, Original_fileNames, Original_filePath, Original_receiver, Original_releaseTime, Original_newsType, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OF_NewsTypeTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OF_NewsTypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OF_NewsType";
            tableMapping.ColumnMappings.Add("TypeID", "TypeID");
            tableMapping.ColumnMappings.Add("TypeName", "TypeName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[OF_NewsType] WHERE (([TypeID] = @Original_TypeID) AND ([TypeNa" +
                "me] = @Original_TypeName))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TypeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TypeName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OF_NewsType] ([TypeID], [TypeName]) VALUES (@TypeID, @TypeName" +
                ");\r\nSELECT TypeID, TypeName FROM OF_NewsType WHERE (TypeID = @TypeID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TypeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TypeName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[OF_NewsType] SET [TypeID] = @TypeID, [TypeName] = @TypeName WHERE (" +
                "([TypeID] = @Original_TypeID) AND ([TypeName] = @Original_TypeName));\r\nSELECT Ty" +
                "peID, TypeName FROM OF_NewsType WHERE (TypeID = @TypeID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TypeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TypeName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TypeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TypeName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TypeName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TypeID, TypeName FROM dbo.OF_NewsType";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.OF_NewsTypeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.OF_NewsTypeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.OF_NewsTypeDataTable dataTable = new RundarWebServerDataSet.OF_NewsTypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.OF_NewsTypeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "OF_NewsType");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_TypeID, string Original_TypeName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_TypeID));
            if ((Original_TypeName == null)) {
                throw new global::System.ArgumentNullException("Original_TypeName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TypeName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int TypeID, string TypeName) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(TypeID));
            if ((TypeName == null)) {
                throw new global::System.ArgumentNullException("TypeName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TypeName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int TypeID, string TypeName, int Original_TypeID, string Original_TypeName) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(TypeID));
            if ((TypeName == null)) {
                throw new global::System.ArgumentNullException("TypeName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TypeName));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_TypeID));
            if ((Original_TypeName == null)) {
                throw new global::System.ArgumentNullException("Original_TypeName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_TypeName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TypeName, int Original_TypeID, string Original_TypeName) {
            return this.Update(Original_TypeID, TypeName, Original_TypeID, Original_TypeName);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OF_OrderForm_ArrivalInfoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OF_OrderForm_ArrivalInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OF_OrderForm_ArrivalInfo";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("ListID", "ListID");
            tableMapping.ColumnMappings.Add("InBillID", "InBillID");
            tableMapping.ColumnMappings.Add("BatchNo", "BatchNo");
            tableMapping.ColumnMappings.Add("ActualDate", "ActualDate");
            tableMapping.ColumnMappings.Add("ActuaQuantity", "ActuaQuantity");
            tableMapping.ColumnMappings.Add("EligibilityQuantity", "EligibilityQuantity");
            tableMapping.ColumnMappings.Add("ConcessionQuantity", "ConcessionQuantity");
            tableMapping.ColumnMappings.Add("DestructQuantity", "DestructQuantity");
            tableMapping.ColumnMappings.Add("RejectQuantity", "RejectQuantity");
            tableMapping.ColumnMappings.Add("QualityInfo", "QualityInfo");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[OF_OrderForm_ArrivalInfo] WHERE (([ID] = @Original_ID) AND ([ListID] = @Original_ListID) AND ([InBillID] = @Original_InBillID) AND ([BatchNo] = @Original_BatchNo) AND ([ActualDate] = @Original_ActualDate) AND ([ActuaQuantity] = @Original_ActuaQuantity) AND ([EligibilityQuantity] = @Original_EligibilityQuantity) AND ([ConcessionQuantity] = @Original_ConcessionQuantity) AND ([DestructQuantity] = @Original_DestructQuantity) AND ([RejectQuantity] = @Original_RejectQuantity))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ListID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ListID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_InBillID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InBillID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BatchNo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BatchNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ActualDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ActuaQuantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "ActuaQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EligibilityQuantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 3, "EligibilityQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ConcessionQuantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "ConcessionQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DestructQuantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "DestructQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RejectQuantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "RejectQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[OF_OrderForm_ArrivalInfo] ([ID], [ListID], [InBillID], [BatchNo], [ActualDate], [ActuaQuantity], [EligibilityQuantity], [ConcessionQuantity], [DestructQuantity], [RejectQuantity], [QualityInfo]) VALUES (@ID, @ListID, @InBillID, @BatchNo, @ActualDate, @ActuaQuantity, @EligibilityQuantity, @ConcessionQuantity, @DestructQuantity, @RejectQuantity, @QualityInfo);
SELECT ID, ListID, InBillID, BatchNo, ActualDate, ActuaQuantity, EligibilityQuantity, ConcessionQuantity, DestructQuantity, RejectQuantity, QualityInfo FROM OF_OrderForm_ArrivalInfo WHERE (ID = @ID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ListID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ListID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InBillID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InBillID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BatchNo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BatchNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ActualDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ActuaQuantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "ActuaQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EligibilityQuantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 3, "EligibilityQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ConcessionQuantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "ConcessionQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DestructQuantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "DestructQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RejectQuantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "RejectQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QualityInfo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QualityInfo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[OF_OrderForm_ArrivalInfo] SET [ID] = @ID, [ListID] = @ListID, [InBillID] = @InBillID, [BatchNo] = @BatchNo, [ActualDate] = @ActualDate, [ActuaQuantity] = @ActuaQuantity, [EligibilityQuantity] = @EligibilityQuantity, [ConcessionQuantity] = @ConcessionQuantity, [DestructQuantity] = @DestructQuantity, [RejectQuantity] = @RejectQuantity, [QualityInfo] = @QualityInfo WHERE (([ID] = @Original_ID) AND ([ListID] = @Original_ListID) AND ([InBillID] = @Original_InBillID) AND ([BatchNo] = @Original_BatchNo) AND ([ActualDate] = @Original_ActualDate) AND ([ActuaQuantity] = @Original_ActuaQuantity) AND ([EligibilityQuantity] = @Original_EligibilityQuantity) AND ([ConcessionQuantity] = @Original_ConcessionQuantity) AND ([DestructQuantity] = @Original_DestructQuantity) AND ([RejectQuantity] = @Original_RejectQuantity));
SELECT ID, ListID, InBillID, BatchNo, ActualDate, ActuaQuantity, EligibilityQuantity, ConcessionQuantity, DestructQuantity, RejectQuantity, QualityInfo FROM OF_OrderForm_ArrivalInfo WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ListID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ListID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InBillID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InBillID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BatchNo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BatchNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ActualDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ActuaQuantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "ActuaQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EligibilityQuantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 3, "EligibilityQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ConcessionQuantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "ConcessionQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DestructQuantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "DestructQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RejectQuantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "RejectQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QualityInfo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QualityInfo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ListID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ListID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_InBillID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InBillID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BatchNo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BatchNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ActualDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ActualDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ActuaQuantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "ActuaQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EligibilityQuantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 3, "EligibilityQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ConcessionQuantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "ConcessionQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DestructQuantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "DestructQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RejectQuantity", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "RejectQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, ListID, InBillID, BatchNo, ActualDate, ActuaQuantity, EligibilityQuant" +
                "ity, ConcessionQuantity, DestructQuantity, RejectQuantity, QualityInfo FROM dbo." +
                "OF_OrderForm_ArrivalInfo";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.OF_OrderForm_ArrivalInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.OF_OrderForm_ArrivalInfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.OF_OrderForm_ArrivalInfoDataTable dataTable = new RundarWebServerDataSet.OF_OrderForm_ArrivalInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.OF_OrderForm_ArrivalInfoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "OF_OrderForm_ArrivalInfo");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, int Original_ListID, string Original_InBillID, string Original_BatchNo, System.DateTime Original_ActualDate, decimal Original_ActuaQuantity, decimal Original_EligibilityQuantity, decimal Original_ConcessionQuantity, decimal Original_DestructQuantity, decimal Original_RejectQuantity) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ListID));
            if ((Original_InBillID == null)) {
                throw new global::System.ArgumentNullException("Original_InBillID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_InBillID));
            }
            if ((Original_BatchNo == null)) {
                throw new global::System.ArgumentNullException("Original_BatchNo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_BatchNo));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_ActualDate));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_ActuaQuantity));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_EligibilityQuantity));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_ConcessionQuantity));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_DestructQuantity));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_RejectQuantity));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID, int ListID, string InBillID, string BatchNo, System.DateTime ActualDate, decimal ActuaQuantity, decimal EligibilityQuantity, decimal ConcessionQuantity, decimal DestructQuantity, decimal RejectQuantity, string QualityInfo) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ListID));
            if ((InBillID == null)) {
                throw new global::System.ArgumentNullException("InBillID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(InBillID));
            }
            if ((BatchNo == null)) {
                throw new global::System.ArgumentNullException("BatchNo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(BatchNo));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(ActualDate));
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(ActuaQuantity));
            this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(EligibilityQuantity));
            this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(ConcessionQuantity));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(DestructQuantity));
            this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(RejectQuantity));
            if ((QualityInfo == null)) {
                throw new global::System.ArgumentNullException("QualityInfo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(QualityInfo));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int ID, 
                    int ListID, 
                    string InBillID, 
                    string BatchNo, 
                    System.DateTime ActualDate, 
                    decimal ActuaQuantity, 
                    decimal EligibilityQuantity, 
                    decimal ConcessionQuantity, 
                    decimal DestructQuantity, 
                    decimal RejectQuantity, 
                    string QualityInfo, 
                    int Original_ID, 
                    int Original_ListID, 
                    string Original_InBillID, 
                    string Original_BatchNo, 
                    System.DateTime Original_ActualDate, 
                    decimal Original_ActuaQuantity, 
                    decimal Original_EligibilityQuantity, 
                    decimal Original_ConcessionQuantity, 
                    decimal Original_DestructQuantity, 
                    decimal Original_RejectQuantity) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ListID));
            if ((InBillID == null)) {
                throw new global::System.ArgumentNullException("InBillID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(InBillID));
            }
            if ((BatchNo == null)) {
                throw new global::System.ArgumentNullException("BatchNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(BatchNo));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(ActualDate));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(ActuaQuantity));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(EligibilityQuantity));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(ConcessionQuantity));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(DestructQuantity));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(RejectQuantity));
            if ((QualityInfo == null)) {
                throw new global::System.ArgumentNullException("QualityInfo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(QualityInfo));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_ID));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_ListID));
            if ((Original_InBillID == null)) {
                throw new global::System.ArgumentNullException("Original_InBillID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_InBillID));
            }
            if ((Original_BatchNo == null)) {
                throw new global::System.ArgumentNullException("Original_BatchNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_BatchNo));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(Original_ActualDate));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((decimal)(Original_ActuaQuantity));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(Original_EligibilityQuantity));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((decimal)(Original_ConcessionQuantity));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((decimal)(Original_DestructQuantity));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_RejectQuantity));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int ListID, 
                    string InBillID, 
                    string BatchNo, 
                    System.DateTime ActualDate, 
                    decimal ActuaQuantity, 
                    decimal EligibilityQuantity, 
                    decimal ConcessionQuantity, 
                    decimal DestructQuantity, 
                    decimal RejectQuantity, 
                    string QualityInfo, 
                    int Original_ID, 
                    int Original_ListID, 
                    string Original_InBillID, 
                    string Original_BatchNo, 
                    System.DateTime Original_ActualDate, 
                    decimal Original_ActuaQuantity, 
                    decimal Original_EligibilityQuantity, 
                    decimal Original_ConcessionQuantity, 
                    decimal Original_DestructQuantity, 
                    decimal Original_RejectQuantity) {
            return this.Update(Original_ID, ListID, InBillID, BatchNo, ActualDate, ActuaQuantity, EligibilityQuantity, ConcessionQuantity, DestructQuantity, RejectQuantity, QualityInfo, Original_ID, Original_ListID, Original_InBillID, Original_BatchNo, Original_ActualDate, Original_ActuaQuantity, Original_EligibilityQuantity, Original_ConcessionQuantity, Original_DestructQuantity, Original_RejectQuantity);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OF_OrderFormGoodsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OF_OrderFormGoodsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OF_OrderFormGoods";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("OrderFormNumber", "OrderFormNumber");
            tableMapping.ColumnMappings.Add("GoodsCode", "GoodsCode");
            tableMapping.ColumnMappings.Add("GoodsName", "GoodsName");
            tableMapping.ColumnMappings.Add("Spec", "Spec");
            tableMapping.ColumnMappings.Add("ArriveTime", "ArriveTime");
            tableMapping.ColumnMappings.Add("OrderCount", "OrderCount");
            tableMapping.ColumnMappings.Add("IsIncept", "IsIncept");
            tableMapping.ColumnMappings.Add("Status", "Status");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[OF_OrderFormGoods] WHERE (([ID] = @Original_ID) AND ([OrderFormNumber] = @Original_OrderFormNumber) AND ([GoodsCode] = @Original_GoodsCode) AND ([GoodsName] = @Original_GoodsName) AND ([Spec] = @Original_Spec) AND ([ArriveTime] = @Original_ArriveTime) AND ([OrderCount] = @Original_OrderCount) AND ([IsIncept] = @Original_IsIncept) AND ([Status] = @Original_Status))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OrderFormNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OrderFormNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GoodsCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GoodsCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GoodsName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GoodsName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Spec", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spec", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ArriveTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArriveTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OrderCount", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 3, "OrderCount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsIncept", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsIncept", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[OF_OrderFormGoods] ([OrderFormNumber], [GoodsCode], [GoodsName], [Spec], [ArriveTime], [OrderCount], [IsIncept], [Status]) VALUES (@OrderFormNumber, @GoodsCode, @GoodsName, @Spec, @ArriveTime, @OrderCount, @IsIncept, @Status);
SELECT ID, OrderFormNumber, GoodsCode, GoodsName, Spec, ArriveTime, OrderCount, IsIncept, Status FROM OF_OrderFormGoods WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OrderFormNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OrderFormNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GoodsCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GoodsCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GoodsName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GoodsName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Spec", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spec", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArriveTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArriveTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OrderCount", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 3, "OrderCount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsIncept", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsIncept", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[OF_OrderFormGoods] SET [OrderFormNumber] = @OrderFormNumber, [GoodsCode] = @GoodsCode, [GoodsName] = @GoodsName, [Spec] = @Spec, [ArriveTime] = @ArriveTime, [OrderCount] = @OrderCount, [IsIncept] = @IsIncept, [Status] = @Status WHERE (([ID] = @Original_ID) AND ([OrderFormNumber] = @Original_OrderFormNumber) AND ([GoodsCode] = @Original_GoodsCode) AND ([GoodsName] = @Original_GoodsName) AND ([Spec] = @Original_Spec) AND ([ArriveTime] = @Original_ArriveTime) AND ([OrderCount] = @Original_OrderCount) AND ([IsIncept] = @Original_IsIncept) AND ([Status] = @Original_Status));
SELECT ID, OrderFormNumber, GoodsCode, GoodsName, Spec, ArriveTime, OrderCount, IsIncept, Status FROM OF_OrderFormGoods WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OrderFormNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OrderFormNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GoodsCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GoodsCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GoodsName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GoodsName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Spec", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spec", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArriveTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArriveTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OrderCount", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 3, "OrderCount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsIncept", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsIncept", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OrderFormNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OrderFormNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GoodsCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GoodsCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GoodsName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GoodsName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Spec", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Spec", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ArriveTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArriveTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OrderCount", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 3, "OrderCount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsIncept", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsIncept", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, OrderFormNumber, GoodsCode, GoodsName, Spec, ArriveTime, OrderCount, I" +
                "sIncept, Status FROM dbo.OF_OrderFormGoods";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.OF_OrderFormGoodsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.OF_OrderFormGoodsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.OF_OrderFormGoodsDataTable dataTable = new RundarWebServerDataSet.OF_OrderFormGoodsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.OF_OrderFormGoodsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "OF_OrderFormGoods");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_OrderFormNumber, string Original_GoodsCode, string Original_GoodsName, string Original_Spec, System.DateTime Original_ArriveTime, decimal Original_OrderCount, bool Original_IsIncept, string Original_Status) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_OrderFormNumber == null)) {
                throw new global::System.ArgumentNullException("Original_OrderFormNumber");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_OrderFormNumber));
            }
            if ((Original_GoodsCode == null)) {
                throw new global::System.ArgumentNullException("Original_GoodsCode");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_GoodsCode));
            }
            if ((Original_GoodsName == null)) {
                throw new global::System.ArgumentNullException("Original_GoodsName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_GoodsName));
            }
            if ((Original_Spec == null)) {
                throw new global::System.ArgumentNullException("Original_Spec");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Spec));
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((System.DateTime)(Original_ArriveTime));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_OrderCount));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((bool)(Original_IsIncept));
            if ((Original_Status == null)) {
                throw new global::System.ArgumentNullException("Original_Status");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_Status));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string OrderFormNumber, string GoodsCode, string GoodsName, string Spec, System.DateTime ArriveTime, decimal OrderCount, bool IsIncept, string Status) {
            if ((OrderFormNumber == null)) {
                throw new global::System.ArgumentNullException("OrderFormNumber");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(OrderFormNumber));
            }
            if ((GoodsCode == null)) {
                throw new global::System.ArgumentNullException("GoodsCode");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(GoodsCode));
            }
            if ((GoodsName == null)) {
                throw new global::System.ArgumentNullException("GoodsName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(GoodsName));
            }
            if ((Spec == null)) {
                throw new global::System.ArgumentNullException("Spec");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Spec));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(ArriveTime));
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(OrderCount));
            this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(IsIncept));
            if ((Status == null)) {
                throw new global::System.ArgumentNullException("Status");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Status));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string OrderFormNumber, 
                    string GoodsCode, 
                    string GoodsName, 
                    string Spec, 
                    System.DateTime ArriveTime, 
                    decimal OrderCount, 
                    bool IsIncept, 
                    string Status, 
                    int Original_ID, 
                    string Original_OrderFormNumber, 
                    string Original_GoodsCode, 
                    string Original_GoodsName, 
                    string Original_Spec, 
                    System.DateTime Original_ArriveTime, 
                    decimal Original_OrderCount, 
                    bool Original_IsIncept, 
                    string Original_Status, 
                    int ID) {
            if ((OrderFormNumber == null)) {
                throw new global::System.ArgumentNullException("OrderFormNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(OrderFormNumber));
            }
            if ((GoodsCode == null)) {
                throw new global::System.ArgumentNullException("GoodsCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(GoodsCode));
            }
            if ((GoodsName == null)) {
                throw new global::System.ArgumentNullException("GoodsName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(GoodsName));
            }
            if ((Spec == null)) {
                throw new global::System.ArgumentNullException("Spec");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Spec));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(ArriveTime));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(OrderCount));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(IsIncept));
            if ((Status == null)) {
                throw new global::System.ArgumentNullException("Status");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Status));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_ID));
            if ((Original_OrderFormNumber == null)) {
                throw new global::System.ArgumentNullException("Original_OrderFormNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_OrderFormNumber));
            }
            if ((Original_GoodsCode == null)) {
                throw new global::System.ArgumentNullException("Original_GoodsCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_GoodsCode));
            }
            if ((Original_GoodsName == null)) {
                throw new global::System.ArgumentNullException("Original_GoodsName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_GoodsName));
            }
            if ((Original_Spec == null)) {
                throw new global::System.ArgumentNullException("Original_Spec");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_Spec));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_ArriveTime));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Original_OrderCount));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((bool)(Original_IsIncept));
            if ((Original_Status == null)) {
                throw new global::System.ArgumentNullException("Original_Status");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_Status));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string OrderFormNumber, 
                    string GoodsCode, 
                    string GoodsName, 
                    string Spec, 
                    System.DateTime ArriveTime, 
                    decimal OrderCount, 
                    bool IsIncept, 
                    string Status, 
                    int Original_ID, 
                    string Original_OrderFormNumber, 
                    string Original_GoodsCode, 
                    string Original_GoodsName, 
                    string Original_Spec, 
                    System.DateTime Original_ArriveTime, 
                    decimal Original_OrderCount, 
                    bool Original_IsIncept, 
                    string Original_Status) {
            return this.Update(OrderFormNumber, GoodsCode, GoodsName, Spec, ArriveTime, OrderCount, IsIncept, Status, Original_ID, Original_OrderFormNumber, Original_GoodsCode, Original_GoodsName, Original_Spec, Original_ArriveTime, Original_OrderCount, Original_IsIncept, Original_Status, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OF_OrderFormInfoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OF_OrderFormInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OF_OrderFormInfo";
            tableMapping.ColumnMappings.Add("OrderFormNumber", "OrderFormNumber");
            tableMapping.ColumnMappings.Add("Provider", "Provider");
            tableMapping.ColumnMappings.Add("Buyer", "Buyer");
            tableMapping.ColumnMappings.Add("ProviderLinkMan", "ProviderLinkMan");
            tableMapping.ColumnMappings.Add("ProviderLinkMode", "ProviderLinkMode");
            tableMapping.ColumnMappings.Add("Remark", "Remark");
            tableMapping.ColumnMappings.Add("CreateDate", "CreateDate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[OF_OrderFormInfo] WHERE (([OrderFormNumber] = @Original_OrderFormNumber) AND ((@IsNull_Provider = 1 AND [Provider] IS NULL) OR ([Provider] = @Original_Provider)) AND ((@IsNull_Buyer = 1 AND [Buyer] IS NULL) OR ([Buyer] = @Original_Buyer)) AND ((@IsNull_ProviderLinkMan = 1 AND [ProviderLinkMan] IS NULL) OR ([ProviderLinkMan] = @Original_ProviderLinkMan)) AND ((@IsNull_ProviderLinkMode = 1 AND [ProviderLinkMode] IS NULL) OR ([ProviderLinkMode] = @Original_ProviderLinkMode)) AND ((@IsNull_CreateDate = 1 AND [CreateDate] IS NULL) OR ([CreateDate] = @Original_CreateDate)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OrderFormNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OrderFormNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Provider", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Provider", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Provider", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Provider", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Buyer", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Buyer", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Buyer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Buyer", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProviderLinkMan", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProviderLinkMan", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProviderLinkMan", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProviderLinkMan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProviderLinkMode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProviderLinkMode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProviderLinkMode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProviderLinkMode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CreateDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[OF_OrderFormInfo] ([OrderFormNumber], [Provider], [Buyer], [ProviderLinkMan], [ProviderLinkMode], [Remark], [CreateDate]) VALUES (@OrderFormNumber, @Provider, @Buyer, @ProviderLinkMan, @ProviderLinkMode, @Remark, @CreateDate);
SELECT OrderFormNumber, Provider, Buyer, ProviderLinkMan, ProviderLinkMode, Remark, CreateDate FROM OF_OrderFormInfo WHERE (OrderFormNumber = @OrderFormNumber)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OrderFormNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OrderFormNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Provider", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Provider", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Buyer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Buyer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProviderLinkMan", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProviderLinkMan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProviderLinkMode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProviderLinkMode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[OF_OrderFormInfo] SET [OrderFormNumber] = @OrderFormNumber, [Provider] = @Provider, [Buyer] = @Buyer, [ProviderLinkMan] = @ProviderLinkMan, [ProviderLinkMode] = @ProviderLinkMode, [Remark] = @Remark, [CreateDate] = @CreateDate WHERE (([OrderFormNumber] = @Original_OrderFormNumber) AND ((@IsNull_Provider = 1 AND [Provider] IS NULL) OR ([Provider] = @Original_Provider)) AND ((@IsNull_Buyer = 1 AND [Buyer] IS NULL) OR ([Buyer] = @Original_Buyer)) AND ((@IsNull_ProviderLinkMan = 1 AND [ProviderLinkMan] IS NULL) OR ([ProviderLinkMan] = @Original_ProviderLinkMan)) AND ((@IsNull_ProviderLinkMode = 1 AND [ProviderLinkMode] IS NULL) OR ([ProviderLinkMode] = @Original_ProviderLinkMode)) AND ((@IsNull_CreateDate = 1 AND [CreateDate] IS NULL) OR ([CreateDate] = @Original_CreateDate)));
SELECT OrderFormNumber, Provider, Buyer, ProviderLinkMan, ProviderLinkMode, Remark, CreateDate FROM OF_OrderFormInfo WHERE (OrderFormNumber = @OrderFormNumber)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OrderFormNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OrderFormNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Provider", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Provider", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Buyer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Buyer", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProviderLinkMan", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProviderLinkMan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProviderLinkMode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProviderLinkMode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OrderFormNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OrderFormNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Provider", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Provider", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Provider", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Provider", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Buyer", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Buyer", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Buyer", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Buyer", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProviderLinkMan", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProviderLinkMan", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProviderLinkMan", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProviderLinkMan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProviderLinkMode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProviderLinkMode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProviderLinkMode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProviderLinkMode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CreateDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT OrderFormNumber, Provider, Buyer, ProviderLinkMan, ProviderLinkMode, Remar" +
                "k, CreateDate FROM dbo.OF_OrderFormInfo";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.OF_OrderFormInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.OF_OrderFormInfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.OF_OrderFormInfoDataTable dataTable = new RundarWebServerDataSet.OF_OrderFormInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.OF_OrderFormInfoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "OF_OrderFormInfo");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_OrderFormNumber, string Original_Provider, string Original_Buyer, string Original_ProviderLinkMan, string Original_ProviderLinkMode, global::System.Nullable<global::System.DateTime> Original_CreateDate) {
            if ((Original_OrderFormNumber == null)) {
                throw new global::System.ArgumentNullException("Original_OrderFormNumber");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_OrderFormNumber));
            }
            if ((Original_Provider == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Provider));
            }
            if ((Original_Buyer == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Buyer));
            }
            if ((Original_ProviderLinkMan == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_ProviderLinkMan));
            }
            if ((Original_ProviderLinkMode == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_ProviderLinkMode));
            }
            if ((Original_CreateDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_CreateDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string OrderFormNumber, string Provider, string Buyer, string ProviderLinkMan, string ProviderLinkMode, string Remark, global::System.Nullable<global::System.DateTime> CreateDate) {
            if ((OrderFormNumber == null)) {
                throw new global::System.ArgumentNullException("OrderFormNumber");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(OrderFormNumber));
            }
            if ((Provider == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Provider));
            }
            if ((Buyer == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Buyer));
            }
            if ((ProviderLinkMan == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ProviderLinkMan));
            }
            if ((ProviderLinkMode == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ProviderLinkMode));
            }
            if ((Remark == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Remark));
            }
            if ((CreateDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(CreateDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string OrderFormNumber, string Provider, string Buyer, string ProviderLinkMan, string ProviderLinkMode, string Remark, global::System.Nullable<global::System.DateTime> CreateDate, string Original_OrderFormNumber, string Original_Provider, string Original_Buyer, string Original_ProviderLinkMan, string Original_ProviderLinkMode, global::System.Nullable<global::System.DateTime> Original_CreateDate) {
            if ((OrderFormNumber == null)) {
                throw new global::System.ArgumentNullException("OrderFormNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(OrderFormNumber));
            }
            if ((Provider == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Provider));
            }
            if ((Buyer == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Buyer));
            }
            if ((ProviderLinkMan == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ProviderLinkMan));
            }
            if ((ProviderLinkMode == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(ProviderLinkMode));
            }
            if ((Remark == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Remark));
            }
            if ((CreateDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(CreateDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_OrderFormNumber == null)) {
                throw new global::System.ArgumentNullException("Original_OrderFormNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_OrderFormNumber));
            }
            if ((Original_Provider == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Provider));
            }
            if ((Original_Buyer == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_Buyer));
            }
            if ((Original_ProviderLinkMan == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_ProviderLinkMan));
            }
            if ((Original_ProviderLinkMode == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_ProviderLinkMode));
            }
            if ((Original_CreateDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(Original_CreateDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Provider, string Buyer, string ProviderLinkMan, string ProviderLinkMode, string Remark, global::System.Nullable<global::System.DateTime> CreateDate, string Original_OrderFormNumber, string Original_Provider, string Original_Buyer, string Original_ProviderLinkMan, string Original_ProviderLinkMode, global::System.Nullable<global::System.DateTime> Original_CreateDate) {
            return this.Update(Original_OrderFormNumber, Provider, Buyer, ProviderLinkMan, ProviderLinkMode, Remark, CreateDate, Original_OrderFormNumber, Original_Provider, Original_Buyer, Original_ProviderLinkMan, Original_ProviderLinkMode, Original_CreateDate);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class S_AfterServiceTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public S_AfterServiceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "S_AfterService";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("ServiceID", "ServiceID");
            tableMapping.ColumnMappings.Add("MessageSource", "MessageSource");
            tableMapping.ColumnMappings.Add("ServerType", "ServerType");
            tableMapping.ColumnMappings.Add("ContentType", "ContentType");
            tableMapping.ColumnMappings.Add("AcceptName", "AcceptName");
            tableMapping.ColumnMappings.Add("AcceptTime", "AcceptTime");
            tableMapping.ColumnMappings.Add("SiteName", "SiteName");
            tableMapping.ColumnMappings.Add("LinkTel", "LinkTel");
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            tableMapping.ColumnMappings.Add("UserTel", "UserTel");
            tableMapping.ColumnMappings.Add("UserAddress", "UserAddress");
            tableMapping.ColumnMappings.Add("CarModel", "CarModel");
            tableMapping.ColumnMappings.Add("CVTCode", "CVTCode");
            tableMapping.ColumnMappings.Add("CVTID", "CVTID");
            tableMapping.ColumnMappings.Add("ChassisNum", "ChassisNum");
            tableMapping.ColumnMappings.Add("BugAddress", "BugAddress");
            tableMapping.ColumnMappings.Add("BuyCarTime", "BuyCarTime");
            tableMapping.ColumnMappings.Add("RunMileage", "RunMileage");
            tableMapping.ColumnMappings.Add("UseProperty", "UseProperty");
            tableMapping.ColumnMappings.Add("UserAttitude", "UserAttitude");
            tableMapping.ColumnMappings.Add("BugDescribe", "BugDescribe");
            tableMapping.ColumnMappings.Add("ServiceIdea", "ServiceIdea");
            tableMapping.ColumnMappings.Add("ProcessMode", "ProcessMode");
            tableMapping.ColumnMappings.Add("ProcessName", "ProcessName");
            tableMapping.ColumnMappings.Add("ProcessTime", "ProcessTime");
            tableMapping.ColumnMappings.Add("DiagnoseSituation", "DiagnoseSituation");
            tableMapping.ColumnMappings.Add("Solution", "Solution");
            tableMapping.ColumnMappings.Add("ProcessResult", "ProcessResult");
            tableMapping.ColumnMappings.Add("CheckName", "CheckName");
            tableMapping.ColumnMappings.Add("CheckTime", "CheckTime");
            tableMapping.ColumnMappings.Add("RepairQuality", "RepairQuality");
            tableMapping.ColumnMappings.Add("ServiceAttitude", "ServiceAttitude");
            tableMapping.ColumnMappings.Add("IsCharge", "IsCharge");
            tableMapping.ColumnMappings.Add("Amount", "Amount");
            tableMapping.ColumnMappings.Add("FailureResults", "FailureResults");
            tableMapping.ColumnMappings.Add("ReturnName", "ReturnName");
            tableMapping.ColumnMappings.Add("ReturnTime", "ReturnTime");
            tableMapping.ColumnMappings.Add("FKBillID", "FKBillID");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("PY", "PY");
            tableMapping.ColumnMappings.Add("WB", "WB");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[S_AfterService] WHERE (([ID] = @Original_ID) AND ([ServiceID] " +
                "= @Original_ServiceID) AND ([MessageSource] = @Original_MessageSource) AND ([Ser" +
                "verType] = @Original_ServerType) AND ([ContentType] = @Original_ContentType) AND" +
                " ((@IsNull_AcceptName = 1 AND [AcceptName] IS NULL) OR ([AcceptName] = @Original" +
                "_AcceptName)) AND ((@IsNull_AcceptTime = 1 AND [AcceptTime] IS NULL) OR ([Accept" +
                "Time] = @Original_AcceptTime)) AND ((@IsNull_SiteName = 1 AND [SiteName] IS NULL" +
                ") OR ([SiteName] = @Original_SiteName)) AND ((@IsNull_LinkTel = 1 AND [LinkTel] " +
                "IS NULL) OR ([LinkTel] = @Original_LinkTel)) AND ((@IsNull_UserName = 1 AND [Use" +
                "rName] IS NULL) OR ([UserName] = @Original_UserName)) AND ((@IsNull_UserTel = 1 " +
                "AND [UserTel] IS NULL) OR ([UserTel] = @Original_UserTel)) AND ((@IsNull_UserAdd" +
                "ress = 1 AND [UserAddress] IS NULL) OR ([UserAddress] = @Original_UserAddress)) " +
                "AND ((@IsNull_CarModel = 1 AND [CarModel] IS NULL) OR ([CarModel] = @Original_Ca" +
                "rModel)) AND ((@IsNull_CVTCode = 1 AND [CVTCode] IS NULL) OR ([CVTCode] = @Origi" +
                "nal_CVTCode)) AND ((@IsNull_CVTID = 1 AND [CVTID] IS NULL) OR ([CVTID] = @Origin" +
                "al_CVTID)) AND ((@IsNull_ChassisNum = 1 AND [ChassisNum] IS NULL) OR ([ChassisNu" +
                "m] = @Original_ChassisNum)) AND ((@IsNull_BugAddress = 1 AND [BugAddress] IS NUL" +
                "L) OR ([BugAddress] = @Original_BugAddress)) AND ((@IsNull_BuyCarTime = 1 AND [B" +
                "uyCarTime] IS NULL) OR ([BuyCarTime] = @Original_BuyCarTime)) AND ((@IsNull_RunM" +
                "ileage = 1 AND [RunMileage] IS NULL) OR ([RunMileage] = @Original_RunMileage)) A" +
                "ND ((@IsNull_UseProperty = 1 AND [UseProperty] IS NULL) OR ([UseProperty] = @Ori" +
                "ginal_UseProperty)) AND ((@IsNull_UserAttitude = 1 AND [UserAttitude] IS NULL) O" +
                "R ([UserAttitude] = @Original_UserAttitude)) AND ((@IsNull_BugDescribe = 1 AND [" +
                "BugDescribe] IS NULL) OR ([BugDescribe] = @Original_BugDescribe)) AND ((@IsNull_" +
                "ServiceIdea = 1 AND [ServiceIdea] IS NULL) OR ([ServiceIdea] = @Original_Service" +
                "Idea)) AND ((@IsNull_ProcessMode = 1 AND [ProcessMode] IS NULL) OR ([ProcessMode" +
                "] = @Original_ProcessMode)) AND ((@IsNull_ProcessName = 1 AND [ProcessName] IS N" +
                "ULL) OR ([ProcessName] = @Original_ProcessName)) AND ((@IsNull_ProcessTime = 1 A" +
                "ND [ProcessTime] IS NULL) OR ([ProcessTime] = @Original_ProcessTime)) AND ((@IsN" +
                "ull_DiagnoseSituation = 1 AND [DiagnoseSituation] IS NULL) OR ([DiagnoseSituatio" +
                "n] = @Original_DiagnoseSituation)) AND ((@IsNull_Solution = 1 AND [Solution] IS " +
                "NULL) OR ([Solution] = @Original_Solution)) AND ((@IsNull_ProcessResult = 1 AND " +
                "[ProcessResult] IS NULL) OR ([ProcessResult] = @Original_ProcessResult)) AND ((@" +
                "IsNull_CheckName = 1 AND [CheckName] IS NULL) OR ([CheckName] = @Original_CheckN" +
                "ame)) AND ((@IsNull_CheckTime = 1 AND [CheckTime] IS NULL) OR ([CheckTime] = @Or" +
                "iginal_CheckTime)) AND ((@IsNull_RepairQuality = 1 AND [RepairQuality] IS NULL) " +
                "OR ([RepairQuality] = @Original_RepairQuality)) AND ((@IsNull_ServiceAttitude = " +
                "1 AND [ServiceAttitude] IS NULL) OR ([ServiceAttitude] = @Original_ServiceAttitu" +
                "de)) AND ((@IsNull_IsCharge = 1 AND [IsCharge] IS NULL) OR ([IsCharge] = @Origin" +
                "al_IsCharge)) AND ((@IsNull_Amount = 1 AND [Amount] IS NULL) OR ([Amount] = @Ori" +
                "ginal_Amount)) AND ((@IsNull_FailureResults = 1 AND [FailureResults] IS NULL) OR" +
                " ([FailureResults] = @Original_FailureResults)) AND ((@IsNull_ReturnName = 1 AND" +
                " [ReturnName] IS NULL) OR ([ReturnName] = @Original_ReturnName)) AND ((@IsNull_R" +
                "eturnTime = 1 AND [ReturnTime] IS NULL) OR ([ReturnTime] = @Original_ReturnTime)" +
                ") AND ((@IsNull_FKBillID = 1 AND [FKBillID] IS NULL) OR ([FKBillID] = @Original_" +
                "FKBillID)) AND ([Status] = @Original_Status) AND ((@IsNull_PY = 1 AND [PY] IS NU" +
                "LL) OR ([PY] = @Original_PY)) AND ((@IsNull_WB = 1 AND [WB] IS NULL) OR ([WB] = " +
                "@Original_WB)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MessageSource", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageSource", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServerType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServerType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ContentType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContentType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AcceptName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AcceptName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AcceptName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AcceptName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AcceptTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AcceptTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AcceptTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AcceptTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SiteName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SiteName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SiteName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SiteName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LinkTel", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkTel", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkTel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkTel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserTel", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserTel", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserTel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserTel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserAddress", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserAddress", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CarModel", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarModel", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CarModel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarModel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CVTCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTCode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CVTCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CVTID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CVTID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ChassisNum", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChassisNum", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ChassisNum", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChassisNum", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BugAddress", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugAddress", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BugAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BuyCarTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyCarTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BuyCarTime", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyCarTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RunMileage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunMileage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RunMileage", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunMileage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UseProperty", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UseProperty", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UseProperty", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UseProperty", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserAttitude", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserAttitude", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserAttitude", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserAttitude", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BugDescribe", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugDescribe", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BugDescribe", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugDescribe", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ServiceIdea", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceIdea", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServiceIdea", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceIdea", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProcessMode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessMode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProcessMode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessMode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProcessName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProcessName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProcessTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProcessTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DiagnoseSituation", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DiagnoseSituation", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DiagnoseSituation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DiagnoseSituation", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Solution", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Solution", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Solution", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Solution", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProcessResult", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessResult", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProcessResult", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessResult", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CheckName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CheckName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CheckTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CheckTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RepairQuality", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RepairQuality", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RepairQuality", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RepairQuality", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ServiceAttitude", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceAttitude", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServiceAttitude", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceAttitude", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IsCharge", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsCharge", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsCharge", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsCharge", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Amount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Amount", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Amount", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "Amount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FailureResults", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FailureResults", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FailureResults", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FailureResults", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ReturnName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReturnName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ReturnName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReturnName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ReturnTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReturnTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ReturnTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReturnTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FKBillID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FKBillID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FKBillID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FKBillID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PY", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PY", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_WB", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WB", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WB", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WB", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[S_AfterService] ([ServiceID], [MessageSource], [ServerType], [" +
                "ContentType], [AcceptName], [AcceptTime], [SiteName], [LinkTel], [UserName], [Us" +
                "erTel], [UserAddress], [CarModel], [CVTCode], [CVTID], [ChassisNum], [BugAddress" +
                "], [BuyCarTime], [RunMileage], [UseProperty], [UserAttitude], [BugDescribe], [Se" +
                "rviceIdea], [ProcessMode], [ProcessName], [ProcessTime], [DiagnoseSituation], [S" +
                "olution], [ProcessResult], [CheckName], [CheckTime], [RepairQuality], [ServiceAt" +
                "titude], [IsCharge], [Amount], [FailureResults], [ReturnName], [ReturnTime], [FK" +
                "BillID], [Status], [PY], [WB]) VALUES (@ServiceID, @MessageSource, @ServerType, " +
                "@ContentType, @AcceptName, @AcceptTime, @SiteName, @LinkTel, @UserName, @UserTel" +
                ", @UserAddress, @CarModel, @CVTCode, @CVTID, @ChassisNum, @BugAddress, @BuyCarTi" +
                "me, @RunMileage, @UseProperty, @UserAttitude, @BugDescribe, @ServiceIdea, @Proce" +
                "ssMode, @ProcessName, @ProcessTime, @DiagnoseSituation, @Solution, @ProcessResul" +
                "t, @CheckName, @CheckTime, @RepairQuality, @ServiceAttitude, @IsCharge, @Amount," +
                " @FailureResults, @ReturnName, @ReturnTime, @FKBillID, @Status, @PY, @WB);\r\nSELE" +
                "CT ID, ServiceID, MessageSource, ServerType, ContentType, AcceptName, AcceptTime" +
                ", SiteName, LinkTel, UserName, UserTel, UserAddress, CarModel, CVTCode, CVTID, C" +
                "hassisNum, BugAddress, BuyCarTime, RunMileage, UseProperty, UserAttitude, BugDes" +
                "cribe, ServiceIdea, ProcessMode, ProcessName, ProcessTime, DiagnoseSituation, So" +
                "lution, ProcessResult, CheckName, CheckTime, RepairQuality, ServiceAttitude, IsC" +
                "harge, Amount, FailureResults, ReturnName, ReturnTime, FKBillID, Status, PY, WB " +
                "FROM S_AfterService WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ServiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MessageSource", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageSource", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ServerType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServerType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContentType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContentType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AcceptName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AcceptName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AcceptTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AcceptTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SiteName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SiteName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkTel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkTel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserTel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserTel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CarModel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarModel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CVTCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CVTID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ChassisNum", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChassisNum", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BugAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BuyCarTime", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyCarTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RunMileage", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunMileage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UseProperty", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UseProperty", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserAttitude", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserAttitude", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BugDescribe", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugDescribe", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ServiceIdea", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceIdea", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProcessMode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessMode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProcessName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProcessTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DiagnoseSituation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DiagnoseSituation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Solution", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Solution", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProcessResult", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessResult", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CheckName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CheckTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RepairQuality", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RepairQuality", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ServiceAttitude", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceAttitude", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsCharge", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsCharge", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Amount", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "Amount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FailureResults", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FailureResults", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReturnName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReturnName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReturnTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReturnTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FKBillID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FKBillID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PY", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WB", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[S_AfterService] SET [ServiceID] = @ServiceID, [MessageSource] = @Me" +
                "ssageSource, [ServerType] = @ServerType, [ContentType] = @ContentType, [AcceptNa" +
                "me] = @AcceptName, [AcceptTime] = @AcceptTime, [SiteName] = @SiteName, [LinkTel]" +
                " = @LinkTel, [UserName] = @UserName, [UserTel] = @UserTel, [UserAddress] = @User" +
                "Address, [CarModel] = @CarModel, [CVTCode] = @CVTCode, [CVTID] = @CVTID, [Chassi" +
                "sNum] = @ChassisNum, [BugAddress] = @BugAddress, [BuyCarTime] = @BuyCarTime, [Ru" +
                "nMileage] = @RunMileage, [UseProperty] = @UseProperty, [UserAttitude] = @UserAtt" +
                "itude, [BugDescribe] = @BugDescribe, [ServiceIdea] = @ServiceIdea, [ProcessMode]" +
                " = @ProcessMode, [ProcessName] = @ProcessName, [ProcessTime] = @ProcessTime, [Di" +
                "agnoseSituation] = @DiagnoseSituation, [Solution] = @Solution, [ProcessResult] =" +
                " @ProcessResult, [CheckName] = @CheckName, [CheckTime] = @CheckTime, [RepairQual" +
                "ity] = @RepairQuality, [ServiceAttitude] = @ServiceAttitude, [IsCharge] = @IsCha" +
                "rge, [Amount] = @Amount, [FailureResults] = @FailureResults, [ReturnName] = @Ret" +
                "urnName, [ReturnTime] = @ReturnTime, [FKBillID] = @FKBillID, [Status] = @Status," +
                " [PY] = @PY, [WB] = @WB WHERE (([ID] = @Original_ID) AND ([ServiceID] = @Origina" +
                "l_ServiceID) AND ([MessageSource] = @Original_MessageSource) AND ([ServerType] =" +
                " @Original_ServerType) AND ([ContentType] = @Original_ContentType) AND ((@IsNull" +
                "_AcceptName = 1 AND [AcceptName] IS NULL) OR ([AcceptName] = @Original_AcceptNam" +
                "e)) AND ((@IsNull_AcceptTime = 1 AND [AcceptTime] IS NULL) OR ([AcceptTime] = @O" +
                "riginal_AcceptTime)) AND ((@IsNull_SiteName = 1 AND [SiteName] IS NULL) OR ([Sit" +
                "eName] = @Original_SiteName)) AND ((@IsNull_LinkTel = 1 AND [LinkTel] IS NULL) O" +
                "R ([LinkTel] = @Original_LinkTel)) AND ((@IsNull_UserName = 1 AND [UserName] IS " +
                "NULL) OR ([UserName] = @Original_UserName)) AND ((@IsNull_UserTel = 1 AND [UserT" +
                "el] IS NULL) OR ([UserTel] = @Original_UserTel)) AND ((@IsNull_UserAddress = 1 A" +
                "ND [UserAddress] IS NULL) OR ([UserAddress] = @Original_UserAddress)) AND ((@IsN" +
                "ull_CarModel = 1 AND [CarModel] IS NULL) OR ([CarModel] = @Original_CarModel)) A" +
                "ND ((@IsNull_CVTCode = 1 AND [CVTCode] IS NULL) OR ([CVTCode] = @Original_CVTCod" +
                "e)) AND ((@IsNull_CVTID = 1 AND [CVTID] IS NULL) OR ([CVTID] = @Original_CVTID))" +
                " AND ((@IsNull_ChassisNum = 1 AND [ChassisNum] IS NULL) OR ([ChassisNum] = @Orig" +
                "inal_ChassisNum)) AND ((@IsNull_BugAddress = 1 AND [BugAddress] IS NULL) OR ([Bu" +
                "gAddress] = @Original_BugAddress)) AND ((@IsNull_BuyCarTime = 1 AND [BuyCarTime]" +
                " IS NULL) OR ([BuyCarTime] = @Original_BuyCarTime)) AND ((@IsNull_RunMileage = 1" +
                " AND [RunMileage] IS NULL) OR ([RunMileage] = @Original_RunMileage)) AND ((@IsNu" +
                "ll_UseProperty = 1 AND [UseProperty] IS NULL) OR ([UseProperty] = @Original_UseP" +
                "roperty)) AND ((@IsNull_UserAttitude = 1 AND [UserAttitude] IS NULL) OR ([UserAt" +
                "titude] = @Original_UserAttitude)) AND ((@IsNull_BugDescribe = 1 AND [BugDescrib" +
                "e] IS NULL) OR ([BugDescribe] = @Original_BugDescribe)) AND ((@IsNull_ServiceIde" +
                "a = 1 AND [ServiceIdea] IS NULL) OR ([ServiceIdea] = @Original_ServiceIdea)) AND" +
                " ((@IsNull_ProcessMode = 1 AND [ProcessMode] IS NULL) OR ([ProcessMode] = @Origi" +
                "nal_ProcessMode)) AND ((@IsNull_ProcessName = 1 AND [ProcessName] IS NULL) OR ([" +
                "ProcessName] = @Original_ProcessName)) AND ((@IsNull_ProcessTime = 1 AND [Proces" +
                "sTime] IS NULL) OR ([ProcessTime] = @Original_ProcessTime)) AND ((@IsNull_Diagno" +
                "seSituation = 1 AND [DiagnoseSituation] IS NULL) OR ([DiagnoseSituation] = @Orig" +
                "inal_DiagnoseSituation)) AND ((@IsNull_Solution = 1 AND [Solution] IS NULL) OR (" +
                "[Solution] = @Original_Solution)) AND ((@IsNull_ProcessResult = 1 AND [ProcessRe" +
                "sult] IS NULL) OR ([ProcessResult] = @Original_ProcessResult)) AND ((@IsNull_Che" +
                "ckName = 1 AND [CheckName] IS NULL) OR ([CheckName] = @Original_CheckName)) AND " +
                "((@IsNull_CheckTime = 1 AND [CheckTime] IS NULL) OR ([CheckTime] = @Original_Che" +
                "ckTime)) AND ((@IsNull_RepairQuality = 1 AND [RepairQuality] IS NULL) OR ([Repai" +
                "rQuality] = @Original_RepairQuality)) AND ((@IsNull_ServiceAttitude = 1 AND [Ser" +
                "viceAttitude] IS NULL) OR ([ServiceAttitude] = @Original_ServiceAttitude)) AND (" +
                "(@IsNull_IsCharge = 1 AND [IsCharge] IS NULL) OR ([IsCharge] = @Original_IsCharg" +
                "e)) AND ((@IsNull_Amount = 1 AND [Amount] IS NULL) OR ([Amount] = @Original_Amou" +
                "nt)) AND ((@IsNull_FailureResults = 1 AND [FailureResults] IS NULL) OR ([Failure" +
                "Results] = @Original_FailureResults)) AND ((@IsNull_ReturnName = 1 AND [ReturnNa" +
                "me] IS NULL) OR ([ReturnName] = @Original_ReturnName)) AND ((@IsNull_ReturnTime " +
                "= 1 AND [ReturnTime] IS NULL) OR ([ReturnTime] = @Original_ReturnTime)) AND ((@I" +
                "sNull_FKBillID = 1 AND [FKBillID] IS NULL) OR ([FKBillID] = @Original_FKBillID))" +
                " AND ([Status] = @Original_Status) AND ((@IsNull_PY = 1 AND [PY] IS NULL) OR ([P" +
                "Y] = @Original_PY)) AND ((@IsNull_WB = 1 AND [WB] IS NULL) OR ([WB] = @Original_" +
                "WB)));\r\nSELECT ID, ServiceID, MessageSource, ServerType, ContentType, AcceptName" +
                ", AcceptTime, SiteName, LinkTel, UserName, UserTel, UserAddress, CarModel, CVTCo" +
                "de, CVTID, ChassisNum, BugAddress, BuyCarTime, RunMileage, UseProperty, UserAtti" +
                "tude, BugDescribe, ServiceIdea, ProcessMode, ProcessName, ProcessTime, DiagnoseS" +
                "ituation, Solution, ProcessResult, CheckName, CheckTime, RepairQuality, ServiceA" +
                "ttitude, IsCharge, Amount, FailureResults, ReturnName, ReturnTime, FKBillID, Sta" +
                "tus, PY, WB FROM S_AfterService WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ServiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MessageSource", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageSource", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ServerType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServerType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContentType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContentType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AcceptName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AcceptName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AcceptTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AcceptTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SiteName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SiteName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkTel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkTel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserTel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserTel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CarModel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarModel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CVTCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CVTID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ChassisNum", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChassisNum", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BugAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BuyCarTime", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyCarTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RunMileage", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunMileage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UseProperty", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UseProperty", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserAttitude", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserAttitude", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BugDescribe", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugDescribe", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ServiceIdea", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceIdea", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProcessMode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessMode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProcessName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProcessTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DiagnoseSituation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DiagnoseSituation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Solution", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Solution", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProcessResult", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessResult", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CheckName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CheckTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RepairQuality", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RepairQuality", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ServiceAttitude", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceAttitude", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsCharge", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsCharge", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Amount", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "Amount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FailureResults", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FailureResults", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReturnName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReturnName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReturnTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReturnTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FKBillID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FKBillID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PY", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WB", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MessageSource", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageSource", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServerType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServerType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ContentType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContentType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AcceptName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AcceptName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AcceptName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AcceptName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AcceptTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AcceptTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AcceptTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AcceptTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SiteName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SiteName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SiteName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SiteName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LinkTel", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkTel", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkTel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkTel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserTel", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserTel", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserTel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserTel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserAddress", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserAddress", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CarModel", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarModel", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CarModel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarModel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CVTCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTCode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CVTCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CVTID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CVTID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ChassisNum", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChassisNum", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ChassisNum", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChassisNum", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BugAddress", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugAddress", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BugAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BuyCarTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyCarTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BuyCarTime", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyCarTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RunMileage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunMileage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RunMileage", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunMileage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UseProperty", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UseProperty", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UseProperty", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UseProperty", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserAttitude", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserAttitude", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserAttitude", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserAttitude", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BugDescribe", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugDescribe", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BugDescribe", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugDescribe", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ServiceIdea", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceIdea", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServiceIdea", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceIdea", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProcessMode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessMode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProcessMode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessMode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProcessName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProcessName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProcessTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProcessTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DiagnoseSituation", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DiagnoseSituation", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DiagnoseSituation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DiagnoseSituation", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Solution", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Solution", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Solution", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Solution", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProcessResult", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessResult", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProcessResult", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessResult", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CheckName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CheckName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CheckTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CheckTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RepairQuality", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RepairQuality", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RepairQuality", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RepairQuality", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ServiceAttitude", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceAttitude", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServiceAttitude", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceAttitude", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IsCharge", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsCharge", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsCharge", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsCharge", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Amount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Amount", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Amount", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "Amount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FailureResults", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FailureResults", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FailureResults", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FailureResults", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ReturnName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReturnName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ReturnName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReturnName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ReturnTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReturnTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ReturnTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReturnTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FKBillID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FKBillID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FKBillID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FKBillID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PY", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PY", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_WB", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WB", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WB", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WB", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT ID, ServiceID, MessageSource, ServerType, ContentType, AcceptName, AcceptTime, SiteName, LinkTel, UserName, UserTel, UserAddress, CarModel, CVTCode, CVTID, ChassisNum, BugAddress, BuyCarTime, RunMileage, UseProperty, UserAttitude, BugDescribe, ServiceIdea, ProcessMode, ProcessName, ProcessTime, DiagnoseSituation, Solution, ProcessResult, CheckName, CheckTime, RepairQuality, ServiceAttitude, IsCharge, Amount, FailureResults, ReturnName, ReturnTime, FKBillID, Status, PY, WB FROM dbo.S_AfterService";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.S_AfterServiceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.S_AfterServiceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.S_AfterServiceDataTable dataTable = new RundarWebServerDataSet.S_AfterServiceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.S_AfterServiceDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "S_AfterService");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_ID, 
                    string Original_ServiceID, 
                    string Original_MessageSource, 
                    string Original_ServerType, 
                    string Original_ContentType, 
                    string Original_AcceptName, 
                    global::System.Nullable<global::System.DateTime> Original_AcceptTime, 
                    string Original_SiteName, 
                    string Original_LinkTel, 
                    string Original_UserName, 
                    string Original_UserTel, 
                    string Original_UserAddress, 
                    string Original_CarModel, 
                    string Original_CVTCode, 
                    string Original_CVTID, 
                    string Original_ChassisNum, 
                    string Original_BugAddress, 
                    string Original_BuyCarTime, 
                    string Original_RunMileage, 
                    string Original_UseProperty, 
                    string Original_UserAttitude, 
                    string Original_BugDescribe, 
                    string Original_ServiceIdea, 
                    string Original_ProcessMode, 
                    string Original_ProcessName, 
                    global::System.Nullable<global::System.DateTime> Original_ProcessTime, 
                    string Original_DiagnoseSituation, 
                    string Original_Solution, 
                    string Original_ProcessResult, 
                    string Original_CheckName, 
                    global::System.Nullable<global::System.DateTime> Original_CheckTime, 
                    string Original_RepairQuality, 
                    string Original_ServiceAttitude, 
                    string Original_IsCharge, 
                    global::System.Nullable<decimal> Original_Amount, 
                    string Original_FailureResults, 
                    string Original_ReturnName, 
                    global::System.Nullable<global::System.DateTime> Original_ReturnTime, 
                    string Original_FKBillID, 
                    string Original_Status, 
                    string Original_PY, 
                    string Original_WB) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_ServiceID == null)) {
                throw new global::System.ArgumentNullException("Original_ServiceID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_ServiceID));
            }
            if ((Original_MessageSource == null)) {
                throw new global::System.ArgumentNullException("Original_MessageSource");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_MessageSource));
            }
            if ((Original_ServerType == null)) {
                throw new global::System.ArgumentNullException("Original_ServerType");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_ServerType));
            }
            if ((Original_ContentType == null)) {
                throw new global::System.ArgumentNullException("Original_ContentType");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_ContentType));
            }
            if ((Original_AcceptName == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_AcceptName));
            }
            if ((Original_AcceptTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_AcceptTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_SiteName == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_SiteName));
            }
            if ((Original_LinkTel == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_LinkTel));
            }
            if ((Original_UserName == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_UserName));
            }
            if ((Original_UserTel == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_UserTel));
            }
            if ((Original_UserAddress == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_UserAddress));
            }
            if ((Original_CarModel == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_CarModel));
            }
            if ((Original_CVTCode == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_CVTCode));
            }
            if ((Original_CVTID == null)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_CVTID));
            }
            if ((Original_ChassisNum == null)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_ChassisNum));
            }
            if ((Original_BugAddress == null)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((string)(Original_BugAddress));
            }
            if ((Original_BuyCarTime == null)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((string)(Original_BuyCarTime));
            }
            if ((Original_RunMileage == null)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((string)(Original_RunMileage));
            }
            if ((Original_UseProperty == null)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((string)(Original_UseProperty));
            }
            if ((Original_UserAttitude == null)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((string)(Original_UserAttitude));
            }
            if ((Original_BugDescribe == null)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((string)(Original_BugDescribe));
            }
            if ((Original_ServiceIdea == null)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((string)(Original_ServiceIdea));
            }
            if ((Original_ProcessMode == null)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((string)(Original_ProcessMode));
            }
            if ((Original_ProcessName == null)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((string)(Original_ProcessName));
            }
            if ((Original_ProcessTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((System.DateTime)(Original_ProcessTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_DiagnoseSituation == null)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((string)(Original_DiagnoseSituation));
            }
            if ((Original_Solution == null)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((string)(Original_Solution));
            }
            if ((Original_ProcessResult == null)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((string)(Original_ProcessResult));
            }
            if ((Original_CheckName == null)) {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[54].Value = ((string)(Original_CheckName));
            }
            if ((Original_CheckTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[56].Value = ((System.DateTime)(Original_CheckTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((Original_RepairQuality == null)) {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[58].Value = ((string)(Original_RepairQuality));
            }
            if ((Original_ServiceAttitude == null)) {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[60].Value = ((string)(Original_ServiceAttitude));
            }
            if ((Original_IsCharge == null)) {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[62].Value = ((string)(Original_IsCharge));
            }
            if ((Original_Amount.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[64].Value = ((decimal)(Original_Amount.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((Original_FailureResults == null)) {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[66].Value = ((string)(Original_FailureResults));
            }
            if ((Original_ReturnName == null)) {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[68].Value = ((string)(Original_ReturnName));
            }
            if ((Original_ReturnTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[70].Value = ((System.DateTime)(Original_ReturnTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            if ((Original_FKBillID == null)) {
                this.Adapter.DeleteCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[72].Value = ((string)(Original_FKBillID));
            }
            if ((Original_Status == null)) {
                throw new global::System.ArgumentNullException("Original_Status");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[73].Value = ((string)(Original_Status));
            }
            if ((Original_PY == null)) {
                this.Adapter.DeleteCommand.Parameters[74].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[75].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[74].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[75].Value = ((string)(Original_PY));
            }
            if ((Original_WB == null)) {
                this.Adapter.DeleteCommand.Parameters[76].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[77].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[76].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[77].Value = ((string)(Original_WB));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string ServiceID, 
                    string MessageSource, 
                    string ServerType, 
                    string ContentType, 
                    string AcceptName, 
                    global::System.Nullable<global::System.DateTime> AcceptTime, 
                    string SiteName, 
                    string LinkTel, 
                    string UserName, 
                    string UserTel, 
                    string UserAddress, 
                    string CarModel, 
                    string CVTCode, 
                    string CVTID, 
                    string ChassisNum, 
                    string BugAddress, 
                    string BuyCarTime, 
                    string RunMileage, 
                    string UseProperty, 
                    string UserAttitude, 
                    string BugDescribe, 
                    string ServiceIdea, 
                    string ProcessMode, 
                    string ProcessName, 
                    global::System.Nullable<global::System.DateTime> ProcessTime, 
                    string DiagnoseSituation, 
                    string Solution, 
                    string ProcessResult, 
                    string CheckName, 
                    global::System.Nullable<global::System.DateTime> CheckTime, 
                    string RepairQuality, 
                    string ServiceAttitude, 
                    string IsCharge, 
                    global::System.Nullable<decimal> Amount, 
                    string FailureResults, 
                    string ReturnName, 
                    global::System.Nullable<global::System.DateTime> ReturnTime, 
                    string FKBillID, 
                    string Status, 
                    string PY, 
                    string WB) {
            if ((ServiceID == null)) {
                throw new global::System.ArgumentNullException("ServiceID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ServiceID));
            }
            if ((MessageSource == null)) {
                throw new global::System.ArgumentNullException("MessageSource");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(MessageSource));
            }
            if ((ServerType == null)) {
                throw new global::System.ArgumentNullException("ServerType");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ServerType));
            }
            if ((ContentType == null)) {
                throw new global::System.ArgumentNullException("ContentType");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ContentType));
            }
            if ((AcceptName == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(AcceptName));
            }
            if ((AcceptTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(AcceptTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((SiteName == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(SiteName));
            }
            if ((LinkTel == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(LinkTel));
            }
            if ((UserName == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(UserName));
            }
            if ((UserTel == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(UserTel));
            }
            if ((UserAddress == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(UserAddress));
            }
            if ((CarModel == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(CarModel));
            }
            if ((CVTCode == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(CVTCode));
            }
            if ((CVTID == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(CVTID));
            }
            if ((ChassisNum == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(ChassisNum));
            }
            if ((BugAddress == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(BugAddress));
            }
            if ((BuyCarTime == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(BuyCarTime));
            }
            if ((RunMileage == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(RunMileage));
            }
            if ((UseProperty == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(UseProperty));
            }
            if ((UserAttitude == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(UserAttitude));
            }
            if ((BugDescribe == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(BugDescribe));
            }
            if ((ServiceIdea == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(ServiceIdea));
            }
            if ((ProcessMode == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(ProcessMode));
            }
            if ((ProcessName == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(ProcessName));
            }
            if ((ProcessTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((System.DateTime)(ProcessTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((DiagnoseSituation == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(DiagnoseSituation));
            }
            if ((Solution == null)) {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = ((string)(Solution));
            }
            if ((ProcessResult == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(ProcessResult));
            }
            if ((CheckName == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(CheckName));
            }
            if ((CheckTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[29].Value = ((System.DateTime)(CheckTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((RepairQuality == null)) {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = ((string)(RepairQuality));
            }
            if ((ServiceAttitude == null)) {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = ((string)(ServiceAttitude));
            }
            if ((IsCharge == null)) {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = ((string)(IsCharge));
            }
            if ((Amount.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[33].Value = ((decimal)(Amount.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((FailureResults == null)) {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = ((string)(FailureResults));
            }
            if ((ReturnName == null)) {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = ((string)(ReturnName));
            }
            if ((ReturnTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[36].Value = ((System.DateTime)(ReturnTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((FKBillID == null)) {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = ((string)(FKBillID));
            }
            if ((Status == null)) {
                throw new global::System.ArgumentNullException("Status");
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = ((string)(Status));
            }
            if ((PY == null)) {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = ((string)(PY));
            }
            if ((WB == null)) {
                this.Adapter.InsertCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[40].Value = ((string)(WB));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ServiceID, 
                    string MessageSource, 
                    string ServerType, 
                    string ContentType, 
                    string AcceptName, 
                    global::System.Nullable<global::System.DateTime> AcceptTime, 
                    string SiteName, 
                    string LinkTel, 
                    string UserName, 
                    string UserTel, 
                    string UserAddress, 
                    string CarModel, 
                    string CVTCode, 
                    string CVTID, 
                    string ChassisNum, 
                    string BugAddress, 
                    string BuyCarTime, 
                    string RunMileage, 
                    string UseProperty, 
                    string UserAttitude, 
                    string BugDescribe, 
                    string ServiceIdea, 
                    string ProcessMode, 
                    string ProcessName, 
                    global::System.Nullable<global::System.DateTime> ProcessTime, 
                    string DiagnoseSituation, 
                    string Solution, 
                    string ProcessResult, 
                    string CheckName, 
                    global::System.Nullable<global::System.DateTime> CheckTime, 
                    string RepairQuality, 
                    string ServiceAttitude, 
                    string IsCharge, 
                    global::System.Nullable<decimal> Amount, 
                    string FailureResults, 
                    string ReturnName, 
                    global::System.Nullable<global::System.DateTime> ReturnTime, 
                    string FKBillID, 
                    string Status, 
                    string PY, 
                    string WB, 
                    int Original_ID, 
                    string Original_ServiceID, 
                    string Original_MessageSource, 
                    string Original_ServerType, 
                    string Original_ContentType, 
                    string Original_AcceptName, 
                    global::System.Nullable<global::System.DateTime> Original_AcceptTime, 
                    string Original_SiteName, 
                    string Original_LinkTel, 
                    string Original_UserName, 
                    string Original_UserTel, 
                    string Original_UserAddress, 
                    string Original_CarModel, 
                    string Original_CVTCode, 
                    string Original_CVTID, 
                    string Original_ChassisNum, 
                    string Original_BugAddress, 
                    string Original_BuyCarTime, 
                    string Original_RunMileage, 
                    string Original_UseProperty, 
                    string Original_UserAttitude, 
                    string Original_BugDescribe, 
                    string Original_ServiceIdea, 
                    string Original_ProcessMode, 
                    string Original_ProcessName, 
                    global::System.Nullable<global::System.DateTime> Original_ProcessTime, 
                    string Original_DiagnoseSituation, 
                    string Original_Solution, 
                    string Original_ProcessResult, 
                    string Original_CheckName, 
                    global::System.Nullable<global::System.DateTime> Original_CheckTime, 
                    string Original_RepairQuality, 
                    string Original_ServiceAttitude, 
                    string Original_IsCharge, 
                    global::System.Nullable<decimal> Original_Amount, 
                    string Original_FailureResults, 
                    string Original_ReturnName, 
                    global::System.Nullable<global::System.DateTime> Original_ReturnTime, 
                    string Original_FKBillID, 
                    string Original_Status, 
                    string Original_PY, 
                    string Original_WB, 
                    int ID) {
            if ((ServiceID == null)) {
                throw new global::System.ArgumentNullException("ServiceID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ServiceID));
            }
            if ((MessageSource == null)) {
                throw new global::System.ArgumentNullException("MessageSource");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(MessageSource));
            }
            if ((ServerType == null)) {
                throw new global::System.ArgumentNullException("ServerType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ServerType));
            }
            if ((ContentType == null)) {
                throw new global::System.ArgumentNullException("ContentType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ContentType));
            }
            if ((AcceptName == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(AcceptName));
            }
            if ((AcceptTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(AcceptTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((SiteName == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(SiteName));
            }
            if ((LinkTel == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(LinkTel));
            }
            if ((UserName == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(UserName));
            }
            if ((UserTel == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(UserTel));
            }
            if ((UserAddress == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(UserAddress));
            }
            if ((CarModel == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(CarModel));
            }
            if ((CVTCode == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(CVTCode));
            }
            if ((CVTID == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(CVTID));
            }
            if ((ChassisNum == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(ChassisNum));
            }
            if ((BugAddress == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(BugAddress));
            }
            if ((BuyCarTime == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(BuyCarTime));
            }
            if ((RunMileage == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(RunMileage));
            }
            if ((UseProperty == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(UseProperty));
            }
            if ((UserAttitude == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(UserAttitude));
            }
            if ((BugDescribe == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(BugDescribe));
            }
            if ((ServiceIdea == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(ServiceIdea));
            }
            if ((ProcessMode == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(ProcessMode));
            }
            if ((ProcessName == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(ProcessName));
            }
            if ((ProcessTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((System.DateTime)(ProcessTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((DiagnoseSituation == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(DiagnoseSituation));
            }
            if ((Solution == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Solution));
            }
            if ((ProcessResult == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(ProcessResult));
            }
            if ((CheckName == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(CheckName));
            }
            if ((CheckTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((System.DateTime)(CheckTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((RepairQuality == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(RepairQuality));
            }
            if ((ServiceAttitude == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(ServiceAttitude));
            }
            if ((IsCharge == null)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(IsCharge));
            }
            if ((Amount.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((decimal)(Amount.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((FailureResults == null)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(FailureResults));
            }
            if ((ReturnName == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(ReturnName));
            }
            if ((ReturnTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((System.DateTime)(ReturnTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((FKBillID == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(FKBillID));
            }
            if ((Status == null)) {
                throw new global::System.ArgumentNullException("Status");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Status));
            }
            if ((PY == null)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((string)(PY));
            }
            if ((WB == null)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(WB));
            }
            this.Adapter.UpdateCommand.Parameters[41].Value = ((int)(Original_ID));
            if ((Original_ServiceID == null)) {
                throw new global::System.ArgumentNullException("Original_ServiceID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_ServiceID));
            }
            if ((Original_MessageSource == null)) {
                throw new global::System.ArgumentNullException("Original_MessageSource");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((string)(Original_MessageSource));
            }
            if ((Original_ServerType == null)) {
                throw new global::System.ArgumentNullException("Original_ServerType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_ServerType));
            }
            if ((Original_ContentType == null)) {
                throw new global::System.ArgumentNullException("Original_ContentType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(Original_ContentType));
            }
            if ((Original_AcceptName == null)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[47].Value = ((string)(Original_AcceptName));
            }
            if ((Original_AcceptTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[49].Value = ((System.DateTime)(Original_AcceptTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((Original_SiteName == null)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[51].Value = ((string)(Original_SiteName));
            }
            if ((Original_LinkTel == null)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[53].Value = ((string)(Original_LinkTel));
            }
            if ((Original_UserName == null)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[55].Value = ((string)(Original_UserName));
            }
            if ((Original_UserTel == null)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[57].Value = ((string)(Original_UserTel));
            }
            if ((Original_UserAddress == null)) {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[59].Value = ((string)(Original_UserAddress));
            }
            if ((Original_CarModel == null)) {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[61].Value = ((string)(Original_CarModel));
            }
            if ((Original_CVTCode == null)) {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[63].Value = ((string)(Original_CVTCode));
            }
            if ((Original_CVTID == null)) {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[65].Value = ((string)(Original_CVTID));
            }
            if ((Original_ChassisNum == null)) {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[67].Value = ((string)(Original_ChassisNum));
            }
            if ((Original_BugAddress == null)) {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[69].Value = ((string)(Original_BugAddress));
            }
            if ((Original_BuyCarTime == null)) {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[71].Value = ((string)(Original_BuyCarTime));
            }
            if ((Original_RunMileage == null)) {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[73].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[73].Value = ((string)(Original_RunMileage));
            }
            if ((Original_UseProperty == null)) {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[75].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[75].Value = ((string)(Original_UseProperty));
            }
            if ((Original_UserAttitude == null)) {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[77].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[77].Value = ((string)(Original_UserAttitude));
            }
            if ((Original_BugDescribe == null)) {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[79].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[79].Value = ((string)(Original_BugDescribe));
            }
            if ((Original_ServiceIdea == null)) {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[81].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[81].Value = ((string)(Original_ServiceIdea));
            }
            if ((Original_ProcessMode == null)) {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[83].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[83].Value = ((string)(Original_ProcessMode));
            }
            if ((Original_ProcessName == null)) {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[85].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[85].Value = ((string)(Original_ProcessName));
            }
            if ((Original_ProcessTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[87].Value = ((System.DateTime)(Original_ProcessTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[87].Value = global::System.DBNull.Value;
            }
            if ((Original_DiagnoseSituation == null)) {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[89].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[89].Value = ((string)(Original_DiagnoseSituation));
            }
            if ((Original_Solution == null)) {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[91].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[91].Value = ((string)(Original_Solution));
            }
            if ((Original_ProcessResult == null)) {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[93].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[93].Value = ((string)(Original_ProcessResult));
            }
            if ((Original_CheckName == null)) {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[95].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[95].Value = ((string)(Original_CheckName));
            }
            if ((Original_CheckTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[96].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[97].Value = ((System.DateTime)(Original_CheckTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[96].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[97].Value = global::System.DBNull.Value;
            }
            if ((Original_RepairQuality == null)) {
                this.Adapter.UpdateCommand.Parameters[98].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[99].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[98].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[99].Value = ((string)(Original_RepairQuality));
            }
            if ((Original_ServiceAttitude == null)) {
                this.Adapter.UpdateCommand.Parameters[100].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[101].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[100].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[101].Value = ((string)(Original_ServiceAttitude));
            }
            if ((Original_IsCharge == null)) {
                this.Adapter.UpdateCommand.Parameters[102].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[103].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[102].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[103].Value = ((string)(Original_IsCharge));
            }
            if ((Original_Amount.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[104].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[105].Value = ((decimal)(Original_Amount.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[104].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[105].Value = global::System.DBNull.Value;
            }
            if ((Original_FailureResults == null)) {
                this.Adapter.UpdateCommand.Parameters[106].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[107].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[106].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[107].Value = ((string)(Original_FailureResults));
            }
            if ((Original_ReturnName == null)) {
                this.Adapter.UpdateCommand.Parameters[108].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[109].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[108].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[109].Value = ((string)(Original_ReturnName));
            }
            if ((Original_ReturnTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[110].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[111].Value = ((System.DateTime)(Original_ReturnTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[110].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[111].Value = global::System.DBNull.Value;
            }
            if ((Original_FKBillID == null)) {
                this.Adapter.UpdateCommand.Parameters[112].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[113].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[112].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[113].Value = ((string)(Original_FKBillID));
            }
            if ((Original_Status == null)) {
                throw new global::System.ArgumentNullException("Original_Status");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[114].Value = ((string)(Original_Status));
            }
            if ((Original_PY == null)) {
                this.Adapter.UpdateCommand.Parameters[115].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[116].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[115].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[116].Value = ((string)(Original_PY));
            }
            if ((Original_WB == null)) {
                this.Adapter.UpdateCommand.Parameters[117].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[118].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[117].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[118].Value = ((string)(Original_WB));
            }
            this.Adapter.UpdateCommand.Parameters[119].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ServiceID, 
                    string MessageSource, 
                    string ServerType, 
                    string ContentType, 
                    string AcceptName, 
                    global::System.Nullable<global::System.DateTime> AcceptTime, 
                    string SiteName, 
                    string LinkTel, 
                    string UserName, 
                    string UserTel, 
                    string UserAddress, 
                    string CarModel, 
                    string CVTCode, 
                    string CVTID, 
                    string ChassisNum, 
                    string BugAddress, 
                    string BuyCarTime, 
                    string RunMileage, 
                    string UseProperty, 
                    string UserAttitude, 
                    string BugDescribe, 
                    string ServiceIdea, 
                    string ProcessMode, 
                    string ProcessName, 
                    global::System.Nullable<global::System.DateTime> ProcessTime, 
                    string DiagnoseSituation, 
                    string Solution, 
                    string ProcessResult, 
                    string CheckName, 
                    global::System.Nullable<global::System.DateTime> CheckTime, 
                    string RepairQuality, 
                    string ServiceAttitude, 
                    string IsCharge, 
                    global::System.Nullable<decimal> Amount, 
                    string FailureResults, 
                    string ReturnName, 
                    global::System.Nullable<global::System.DateTime> ReturnTime, 
                    string FKBillID, 
                    string Status, 
                    string PY, 
                    string WB, 
                    int Original_ID, 
                    string Original_ServiceID, 
                    string Original_MessageSource, 
                    string Original_ServerType, 
                    string Original_ContentType, 
                    string Original_AcceptName, 
                    global::System.Nullable<global::System.DateTime> Original_AcceptTime, 
                    string Original_SiteName, 
                    string Original_LinkTel, 
                    string Original_UserName, 
                    string Original_UserTel, 
                    string Original_UserAddress, 
                    string Original_CarModel, 
                    string Original_CVTCode, 
                    string Original_CVTID, 
                    string Original_ChassisNum, 
                    string Original_BugAddress, 
                    string Original_BuyCarTime, 
                    string Original_RunMileage, 
                    string Original_UseProperty, 
                    string Original_UserAttitude, 
                    string Original_BugDescribe, 
                    string Original_ServiceIdea, 
                    string Original_ProcessMode, 
                    string Original_ProcessName, 
                    global::System.Nullable<global::System.DateTime> Original_ProcessTime, 
                    string Original_DiagnoseSituation, 
                    string Original_Solution, 
                    string Original_ProcessResult, 
                    string Original_CheckName, 
                    global::System.Nullable<global::System.DateTime> Original_CheckTime, 
                    string Original_RepairQuality, 
                    string Original_ServiceAttitude, 
                    string Original_IsCharge, 
                    global::System.Nullable<decimal> Original_Amount, 
                    string Original_FailureResults, 
                    string Original_ReturnName, 
                    global::System.Nullable<global::System.DateTime> Original_ReturnTime, 
                    string Original_FKBillID, 
                    string Original_Status, 
                    string Original_PY, 
                    string Original_WB) {
            return this.Update(ServiceID, MessageSource, ServerType, ContentType, AcceptName, AcceptTime, SiteName, LinkTel, UserName, UserTel, UserAddress, CarModel, CVTCode, CVTID, ChassisNum, BugAddress, BuyCarTime, RunMileage, UseProperty, UserAttitude, BugDescribe, ServiceIdea, ProcessMode, ProcessName, ProcessTime, DiagnoseSituation, Solution, ProcessResult, CheckName, CheckTime, RepairQuality, ServiceAttitude, IsCharge, Amount, FailureResults, ReturnName, ReturnTime, FKBillID, Status, PY, WB, Original_ID, Original_ServiceID, Original_MessageSource, Original_ServerType, Original_ContentType, Original_AcceptName, Original_AcceptTime, Original_SiteName, Original_LinkTel, Original_UserName, Original_UserTel, Original_UserAddress, Original_CarModel, Original_CVTCode, Original_CVTID, Original_ChassisNum, Original_BugAddress, Original_BuyCarTime, Original_RunMileage, Original_UseProperty, Original_UserAttitude, Original_BugDescribe, Original_ServiceIdea, Original_ProcessMode, Original_ProcessName, Original_ProcessTime, Original_DiagnoseSituation, Original_Solution, Original_ProcessResult, Original_CheckName, Original_CheckTime, Original_RepairQuality, Original_ServiceAttitude, Original_IsCharge, Original_Amount, Original_FailureResults, Original_ReturnName, Original_ReturnTime, Original_FKBillID, Original_Status, Original_PY, Original_WB, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class S_CommtionTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public S_CommtionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "S_Commtion";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Type", "Type");
            tableMapping.ColumnMappings.Add("Remarl", "Remarl");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[S_Commtion] WHERE (([ID] = @Original_ID) AND ([Type] = @Origin" +
                "al_Type) AND ((@IsNull_Remarl = 1 AND [Remarl] IS NULL) OR ([Remarl] = @Original" +
                "_Remarl)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Remarl", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remarl", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remarl", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remarl", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[S_Commtion] ([Type], [Remarl]) VALUES (@Type, @Remarl);\r\nSELEC" +
                "T ID, Type, Remarl FROM S_Commtion WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remarl", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remarl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[S_Commtion] SET [Type] = @Type, [Remarl] = @Remarl WHERE (([ID] = @Original_ID) AND ([Type] = @Original_Type) AND ((@IsNull_Remarl = 1 AND [Remarl] IS NULL) OR ([Remarl] = @Original_Remarl)));
SELECT ID, Type, Remarl FROM S_Commtion WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remarl", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remarl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Remarl", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remarl", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remarl", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remarl", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, Type, Remarl FROM dbo.S_Commtion";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.S_CommtionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.S_CommtionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.S_CommtionDataTable dataTable = new RundarWebServerDataSet.S_CommtionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.S_CommtionDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "S_Commtion");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_Type, string Original_Remarl) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_Type == null)) {
                throw new global::System.ArgumentNullException("Original_Type");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Type));
            }
            if ((Original_Remarl == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Remarl));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Type, string Remarl) {
            if ((Type == null)) {
                throw new global::System.ArgumentNullException("Type");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Type));
            }
            if ((Remarl == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Remarl));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Type, string Remarl, int Original_ID, string Original_Type, string Original_Remarl, int ID) {
            if ((Type == null)) {
                throw new global::System.ArgumentNullException("Type");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Type));
            }
            if ((Remarl == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Remarl));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID));
            if ((Original_Type == null)) {
                throw new global::System.ArgumentNullException("Original_Type");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_Type));
            }
            if ((Original_Remarl == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Remarl));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Type, string Remarl, int Original_ID, string Original_Type, string Original_Remarl) {
            return this.Update(Type, Remarl, Original_ID, Original_Type, Original_Remarl, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class S_MessageSourceTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public S_MessageSourceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "S_MessageSource";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("MessageCode", "MessageCode");
            tableMapping.ColumnMappings.Add("MessageName", "MessageName");
            tableMapping.ColumnMappings.Add("Remark", "Remark");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[S_MessageSource] WHERE (([ID] = @Original_ID) AND ([MessageCod" +
                "e] = @Original_MessageCode) AND ([MessageName] = @Original_MessageName) AND ((@I" +
                "sNull_Remark = 1 AND [Remark] IS NULL) OR ([Remark] = @Original_Remark)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MessageCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MessageName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Remark", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[S_MessageSource] ([MessageCode], [MessageName], [Remark]) VALU" +
                "ES (@MessageCode, @MessageName, @Remark);\r\nSELECT ID, MessageCode, MessageName, " +
                "Remark FROM S_MessageSource WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MessageCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MessageName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[S_MessageSource] SET [MessageCode] = @MessageCode, [MessageName] = @MessageName, [Remark] = @Remark WHERE (([ID] = @Original_ID) AND ([MessageCode] = @Original_MessageCode) AND ([MessageName] = @Original_MessageName) AND ((@IsNull_Remark = 1 AND [Remark] IS NULL) OR ([Remark] = @Original_Remark)));
SELECT ID, MessageCode, MessageName, Remark FROM S_MessageSource WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MessageCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MessageName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MessageCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MessageName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Remark", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, MessageCode, MessageName, Remark FROM dbo.S_MessageSource";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.S_MessageSourceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.S_MessageSourceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.S_MessageSourceDataTable dataTable = new RundarWebServerDataSet.S_MessageSourceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.S_MessageSourceDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "S_MessageSource");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_MessageCode, string Original_MessageName, string Original_Remark) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_MessageCode == null)) {
                throw new global::System.ArgumentNullException("Original_MessageCode");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_MessageCode));
            }
            if ((Original_MessageName == null)) {
                throw new global::System.ArgumentNullException("Original_MessageName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_MessageName));
            }
            if ((Original_Remark == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Remark));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string MessageCode, string MessageName, string Remark) {
            if ((MessageCode == null)) {
                throw new global::System.ArgumentNullException("MessageCode");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(MessageCode));
            }
            if ((MessageName == null)) {
                throw new global::System.ArgumentNullException("MessageName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(MessageName));
            }
            if ((Remark == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Remark));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string MessageCode, string MessageName, string Remark, int Original_ID, string Original_MessageCode, string Original_MessageName, string Original_Remark, int ID) {
            if ((MessageCode == null)) {
                throw new global::System.ArgumentNullException("MessageCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(MessageCode));
            }
            if ((MessageName == null)) {
                throw new global::System.ArgumentNullException("MessageName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(MessageName));
            }
            if ((Remark == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Remark));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ID));
            if ((Original_MessageCode == null)) {
                throw new global::System.ArgumentNullException("Original_MessageCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_MessageCode));
            }
            if ((Original_MessageName == null)) {
                throw new global::System.ArgumentNullException("Original_MessageName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_MessageName));
            }
            if ((Original_Remark == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Remark));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string MessageCode, string MessageName, string Remark, int Original_ID, string Original_MessageCode, string Original_MessageName, string Original_Remark) {
            return this.Update(MessageCode, MessageName, Remark, Original_ID, Original_MessageCode, Original_MessageName, Original_Remark, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class S_ReplaceAccessoryTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public S_ReplaceAccessoryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "S_ReplaceAccessory";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("ServiceID", "ServiceID");
            tableMapping.ColumnMappings.Add("OldGoodsName", "OldGoodsName");
            tableMapping.ColumnMappings.Add("OldGoodsCode", "OldGoodsCode");
            tableMapping.ColumnMappings.Add("OldSpec", "OldSpec");
            tableMapping.ColumnMappings.Add("OldCvtID", "OldCvtID");
            tableMapping.ColumnMappings.Add("BackTime", "BackTime");
            tableMapping.ColumnMappings.Add("NewGoodsName", "NewGoodsName");
            tableMapping.ColumnMappings.Add("NewGoodsCode", "NewGoodsCode");
            tableMapping.ColumnMappings.Add("NewSpec", "NewSpec");
            tableMapping.ColumnMappings.Add("NewCvtID", "NewCvtID");
            tableMapping.ColumnMappings.Add("Count", "Count");
            tableMapping.ColumnMappings.Add("Unit", "Unit");
            tableMapping.ColumnMappings.Add("Remark", "Remark");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[S_ReplaceAccessory] WHERE (([ID] = @Original_ID) AND ([ServiceID] = @Original_ServiceID) AND ([OldGoodsName] = @Original_OldGoodsName) AND ([OldGoodsCode] = @Original_OldGoodsCode) AND ((@IsNull_OldSpec = 1 AND [OldSpec] IS NULL) OR ([OldSpec] = @Original_OldSpec)) AND ((@IsNull_OldCvtID = 1 AND [OldCvtID] IS NULL) OR ([OldCvtID] = @Original_OldCvtID)) AND ((@IsNull_BackTime = 1 AND [BackTime] IS NULL) OR ([BackTime] = @Original_BackTime)) AND ((@IsNull_NewGoodsName = 1 AND [NewGoodsName] IS NULL) OR ([NewGoodsName] = @Original_NewGoodsName)) AND ((@IsNull_NewGoodsCode = 1 AND [NewGoodsCode] IS NULL) OR ([NewGoodsCode] = @Original_NewGoodsCode)) AND ((@IsNull_NewSpec = 1 AND [NewSpec] IS NULL) OR ([NewSpec] = @Original_NewSpec)) AND ((@IsNull_NewCvtID = 1 AND [NewCvtID] IS NULL) OR ([NewCvtID] = @Original_NewCvtID)) AND ((@IsNull_Count = 1 AND [Count] IS NULL) OR ([Count] = @Original_Count)) AND ((@IsNull_Unit = 1 AND [Unit] IS NULL) OR ([Unit] = @Original_Unit)) AND ((@IsNull_Remark = 1 AND [Remark] IS NULL) OR ([Remark] = @Original_Remark)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OldGoodsName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OldGoodsName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OldGoodsCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OldGoodsCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OldSpec", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OldSpec", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OldSpec", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OldSpec", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OldCvtID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OldCvtID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OldCvtID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OldCvtID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BackTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BackTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BackTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BackTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NewGoodsName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewGoodsName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewGoodsName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewGoodsName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NewGoodsCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewGoodsCode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewGoodsCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewGoodsCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NewSpec", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewSpec", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewSpec", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewSpec", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NewCvtID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewCvtID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewCvtID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewCvtID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Count", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Count", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Unit", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Unit", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Unit", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Unit", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Remark", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[S_ReplaceAccessory] ([ServiceID], [OldGoodsName], [OldGoodsCode], [OldSpec], [OldCvtID], [BackTime], [NewGoodsName], [NewGoodsCode], [NewSpec], [NewCvtID], [Count], [Unit], [Remark]) VALUES (@ServiceID, @OldGoodsName, @OldGoodsCode, @OldSpec, @OldCvtID, @BackTime, @NewGoodsName, @NewGoodsCode, @NewSpec, @NewCvtID, @Count, @Unit, @Remark);
SELECT ID, ServiceID, OldGoodsName, OldGoodsCode, OldSpec, OldCvtID, BackTime, NewGoodsName, NewGoodsCode, NewSpec, NewCvtID, Count, Unit, Remark FROM S_ReplaceAccessory WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ServiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OldGoodsName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OldGoodsName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OldGoodsCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OldGoodsCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OldSpec", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OldSpec", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OldCvtID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OldCvtID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BackTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BackTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewGoodsName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewGoodsName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewGoodsCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewGoodsCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewSpec", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewSpec", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewCvtID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewCvtID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Count", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Unit", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Unit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[S_ReplaceAccessory] SET [ServiceID] = @ServiceID, [OldGoodsName] = " +
                "@OldGoodsName, [OldGoodsCode] = @OldGoodsCode, [OldSpec] = @OldSpec, [OldCvtID] " +
                "= @OldCvtID, [BackTime] = @BackTime, [NewGoodsName] = @NewGoodsName, [NewGoodsCo" +
                "de] = @NewGoodsCode, [NewSpec] = @NewSpec, [NewCvtID] = @NewCvtID, [Count] = @Co" +
                "unt, [Unit] = @Unit, [Remark] = @Remark WHERE (([ID] = @Original_ID) AND ([Servi" +
                "ceID] = @Original_ServiceID) AND ([OldGoodsName] = @Original_OldGoodsName) AND (" +
                "[OldGoodsCode] = @Original_OldGoodsCode) AND ((@IsNull_OldSpec = 1 AND [OldSpec]" +
                " IS NULL) OR ([OldSpec] = @Original_OldSpec)) AND ((@IsNull_OldCvtID = 1 AND [Ol" +
                "dCvtID] IS NULL) OR ([OldCvtID] = @Original_OldCvtID)) AND ((@IsNull_BackTime = " +
                "1 AND [BackTime] IS NULL) OR ([BackTime] = @Original_BackTime)) AND ((@IsNull_Ne" +
                "wGoodsName = 1 AND [NewGoodsName] IS NULL) OR ([NewGoodsName] = @Original_NewGoo" +
                "dsName)) AND ((@IsNull_NewGoodsCode = 1 AND [NewGoodsCode] IS NULL) OR ([NewGood" +
                "sCode] = @Original_NewGoodsCode)) AND ((@IsNull_NewSpec = 1 AND [NewSpec] IS NUL" +
                "L) OR ([NewSpec] = @Original_NewSpec)) AND ((@IsNull_NewCvtID = 1 AND [NewCvtID]" +
                " IS NULL) OR ([NewCvtID] = @Original_NewCvtID)) AND ((@IsNull_Count = 1 AND [Cou" +
                "nt] IS NULL) OR ([Count] = @Original_Count)) AND ((@IsNull_Unit = 1 AND [Unit] I" +
                "S NULL) OR ([Unit] = @Original_Unit)) AND ((@IsNull_Remark = 1 AND [Remark] IS N" +
                "ULL) OR ([Remark] = @Original_Remark)));\r\nSELECT ID, ServiceID, OldGoodsName, Ol" +
                "dGoodsCode, OldSpec, OldCvtID, BackTime, NewGoodsName, NewGoodsCode, NewSpec, Ne" +
                "wCvtID, Count, Unit, Remark FROM S_ReplaceAccessory WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ServiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OldGoodsName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OldGoodsName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OldGoodsCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OldGoodsCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OldSpec", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OldSpec", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OldCvtID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OldCvtID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BackTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BackTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewGoodsName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewGoodsName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewGoodsCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewGoodsCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewSpec", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewSpec", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewCvtID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewCvtID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Count", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Unit", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Unit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OldGoodsName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OldGoodsName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OldGoodsCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OldGoodsCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OldSpec", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OldSpec", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OldSpec", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OldSpec", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OldCvtID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OldCvtID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OldCvtID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OldCvtID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BackTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BackTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BackTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BackTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NewGoodsName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewGoodsName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewGoodsName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewGoodsName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NewGoodsCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewGoodsCode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewGoodsCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewGoodsCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NewSpec", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewSpec", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewSpec", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewSpec", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NewCvtID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewCvtID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewCvtID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewCvtID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Count", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Count", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Unit", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Unit", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Unit", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Unit", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Remark", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, ServiceID, OldGoodsName, OldGoodsCode, OldSpec, OldCvtID, BackTime, Ne" +
                "wGoodsName, NewGoodsCode, NewSpec, NewCvtID, Count, Unit, Remark FROM dbo.S_Repl" +
                "aceAccessory";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.S_ReplaceAccessoryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.S_ReplaceAccessoryDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.S_ReplaceAccessoryDataTable dataTable = new RundarWebServerDataSet.S_ReplaceAccessoryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.S_ReplaceAccessoryDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "S_ReplaceAccessory");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_ServiceID, string Original_OldGoodsName, string Original_OldGoodsCode, string Original_OldSpec, string Original_OldCvtID, global::System.Nullable<global::System.DateTime> Original_BackTime, string Original_NewGoodsName, string Original_NewGoodsCode, string Original_NewSpec, string Original_NewCvtID, global::System.Nullable<int> Original_Count, string Original_Unit, string Original_Remark) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_ServiceID == null)) {
                throw new global::System.ArgumentNullException("Original_ServiceID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_ServiceID));
            }
            if ((Original_OldGoodsName == null)) {
                throw new global::System.ArgumentNullException("Original_OldGoodsName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_OldGoodsName));
            }
            if ((Original_OldGoodsCode == null)) {
                throw new global::System.ArgumentNullException("Original_OldGoodsCode");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_OldGoodsCode));
            }
            if ((Original_OldSpec == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_OldSpec));
            }
            if ((Original_OldCvtID == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_OldCvtID));
            }
            if ((Original_BackTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((System.DateTime)(Original_BackTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_NewGoodsName == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_NewGoodsName));
            }
            if ((Original_NewGoodsCode == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_NewGoodsCode));
            }
            if ((Original_NewSpec == null)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_NewSpec));
            }
            if ((Original_NewCvtID == null)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_NewCvtID));
            }
            if ((Original_Count.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[19].Value = ((int)(Original_Count.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Original_Unit == null)) {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[21].Value = ((string)(Original_Unit));
            }
            if ((Original_Remark == null)) {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[23].Value = ((string)(Original_Remark));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ServiceID, string OldGoodsName, string OldGoodsCode, string OldSpec, string OldCvtID, global::System.Nullable<global::System.DateTime> BackTime, string NewGoodsName, string NewGoodsCode, string NewSpec, string NewCvtID, global::System.Nullable<int> Count, string Unit, string Remark) {
            if ((ServiceID == null)) {
                throw new global::System.ArgumentNullException("ServiceID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ServiceID));
            }
            if ((OldGoodsName == null)) {
                throw new global::System.ArgumentNullException("OldGoodsName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(OldGoodsName));
            }
            if ((OldGoodsCode == null)) {
                throw new global::System.ArgumentNullException("OldGoodsCode");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(OldGoodsCode));
            }
            if ((OldSpec == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(OldSpec));
            }
            if ((OldCvtID == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(OldCvtID));
            }
            if ((BackTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(BackTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((NewGoodsName == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(NewGoodsName));
            }
            if ((NewGoodsCode == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(NewGoodsCode));
            }
            if ((NewSpec == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(NewSpec));
            }
            if ((NewCvtID == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(NewCvtID));
            }
            if ((Count.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(Count.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Unit == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(Unit));
            }
            if ((Remark == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Remark));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ServiceID, 
                    string OldGoodsName, 
                    string OldGoodsCode, 
                    string OldSpec, 
                    string OldCvtID, 
                    global::System.Nullable<global::System.DateTime> BackTime, 
                    string NewGoodsName, 
                    string NewGoodsCode, 
                    string NewSpec, 
                    string NewCvtID, 
                    global::System.Nullable<int> Count, 
                    string Unit, 
                    string Remark, 
                    int Original_ID, 
                    string Original_ServiceID, 
                    string Original_OldGoodsName, 
                    string Original_OldGoodsCode, 
                    string Original_OldSpec, 
                    string Original_OldCvtID, 
                    global::System.Nullable<global::System.DateTime> Original_BackTime, 
                    string Original_NewGoodsName, 
                    string Original_NewGoodsCode, 
                    string Original_NewSpec, 
                    string Original_NewCvtID, 
                    global::System.Nullable<int> Original_Count, 
                    string Original_Unit, 
                    string Original_Remark, 
                    int ID) {
            if ((ServiceID == null)) {
                throw new global::System.ArgumentNullException("ServiceID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ServiceID));
            }
            if ((OldGoodsName == null)) {
                throw new global::System.ArgumentNullException("OldGoodsName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(OldGoodsName));
            }
            if ((OldGoodsCode == null)) {
                throw new global::System.ArgumentNullException("OldGoodsCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(OldGoodsCode));
            }
            if ((OldSpec == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(OldSpec));
            }
            if ((OldCvtID == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(OldCvtID));
            }
            if ((BackTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(BackTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((NewGoodsName == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(NewGoodsName));
            }
            if ((NewGoodsCode == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(NewGoodsCode));
            }
            if ((NewSpec == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(NewSpec));
            }
            if ((NewCvtID == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(NewCvtID));
            }
            if ((Count.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Count.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Unit == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Unit));
            }
            if ((Remark == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Remark));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_ID));
            if ((Original_ServiceID == null)) {
                throw new global::System.ArgumentNullException("Original_ServiceID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_ServiceID));
            }
            if ((Original_OldGoodsName == null)) {
                throw new global::System.ArgumentNullException("Original_OldGoodsName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_OldGoodsName));
            }
            if ((Original_OldGoodsCode == null)) {
                throw new global::System.ArgumentNullException("Original_OldGoodsCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_OldGoodsCode));
            }
            if ((Original_OldSpec == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_OldSpec));
            }
            if ((Original_OldCvtID == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_OldCvtID));
            }
            if ((Original_BackTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((System.DateTime)(Original_BackTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_NewGoodsName == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_NewGoodsName));
            }
            if ((Original_NewGoodsCode == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_NewGoodsCode));
            }
            if ((Original_NewSpec == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_NewSpec));
            }
            if ((Original_NewCvtID == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_NewCvtID));
            }
            if ((Original_Count.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(Original_Count.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_Unit == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_Unit));
            }
            if ((Original_Remark == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_Remark));
            }
            this.Adapter.UpdateCommand.Parameters[37].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ServiceID, 
                    string OldGoodsName, 
                    string OldGoodsCode, 
                    string OldSpec, 
                    string OldCvtID, 
                    global::System.Nullable<global::System.DateTime> BackTime, 
                    string NewGoodsName, 
                    string NewGoodsCode, 
                    string NewSpec, 
                    string NewCvtID, 
                    global::System.Nullable<int> Count, 
                    string Unit, 
                    string Remark, 
                    int Original_ID, 
                    string Original_ServiceID, 
                    string Original_OldGoodsName, 
                    string Original_OldGoodsCode, 
                    string Original_OldSpec, 
                    string Original_OldCvtID, 
                    global::System.Nullable<global::System.DateTime> Original_BackTime, 
                    string Original_NewGoodsName, 
                    string Original_NewGoodsCode, 
                    string Original_NewSpec, 
                    string Original_NewCvtID, 
                    global::System.Nullable<int> Original_Count, 
                    string Original_Unit, 
                    string Original_Remark) {
            return this.Update(ServiceID, OldGoodsName, OldGoodsCode, OldSpec, OldCvtID, BackTime, NewGoodsName, NewGoodsCode, NewSpec, NewCvtID, Count, Unit, Remark, Original_ID, Original_ServiceID, Original_OldGoodsName, Original_OldGoodsCode, Original_OldSpec, Original_OldCvtID, Original_BackTime, Original_NewGoodsName, Original_NewGoodsCode, Original_NewSpec, Original_NewCvtID, Original_Count, Original_Unit, Original_Remark, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class S_ServiceFeedBackTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public S_ServiceFeedBackTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "S_ServiceFeedBack";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("FK_Bill_ID", "FK_Bill_ID");
            tableMapping.ColumnMappings.Add("ServiceID", "ServiceID");
            tableMapping.ColumnMappings.Add("MessageSource", "MessageSource");
            tableMapping.ColumnMappings.Add("SiteName", "SiteName");
            tableMapping.ColumnMappings.Add("CarModel", "CarModel");
            tableMapping.ColumnMappings.Add("CVTCode", "CVTCode");
            tableMapping.ColumnMappings.Add("CVTID", "CVTID");
            tableMapping.ColumnMappings.Add("ChassisNum", "ChassisNum");
            tableMapping.ColumnMappings.Add("TCUCode", "TCUCode");
            tableMapping.ColumnMappings.Add("NewSoftware", "NewSoftware");
            tableMapping.ColumnMappings.Add("BugCode", "BugCode");
            tableMapping.ColumnMappings.Add("CVTCondition", "CVTCondition");
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            tableMapping.ColumnMappings.Add("Linkman", "Linkman");
            tableMapping.ColumnMappings.Add("LinkTel", "LinkTel");
            tableMapping.ColumnMappings.Add("BugNumber", "BugNumber");
            tableMapping.ColumnMappings.Add("BatchNumber", "BatchNumber");
            tableMapping.ColumnMappings.Add("OutFactoryTime", "OutFactoryTime");
            tableMapping.ColumnMappings.Add("BuyCarTime", "BuyCarTime");
            tableMapping.ColumnMappings.Add("RunMileage", "RunMileage");
            tableMapping.ColumnMappings.Add("ProcessName", "ProcessName");
            tableMapping.ColumnMappings.Add("ProcessTime", "ProcessTime");
            tableMapping.ColumnMappings.Add("ProcessMode", "ProcessMode");
            tableMapping.ColumnMappings.Add("DiagnoseSituation", "DiagnoseSituation");
            tableMapping.ColumnMappings.Add("Solution", "Solution");
            tableMapping.ColumnMappings.Add("IsBack", "IsBack");
            tableMapping.ColumnMappings.Add("YXChargeSuggestion", "YXChargeSuggestion");
            tableMapping.ColumnMappings.Add("ZGChargeSuggestion", "ZGChargeSuggestion");
            tableMapping.ColumnMappings.Add("DutyDept", "DutyDept");
            tableMapping.ColumnMappings.Add("ReplyTime", "ReplyTime");
            tableMapping.ColumnMappings.Add("AppearCount", "AppearCount");
            tableMapping.ColumnMappings.Add("DutyDeptCharge", "DutyDeptCharge");
            tableMapping.ColumnMappings.Add("DutyPerson", "DutyPerson");
            tableMapping.ColumnMappings.Add("FinishClaim", "FinishClaim");
            tableMapping.ColumnMappings.Add("StockSuggestion", "StockSuggestion");
            tableMapping.ColumnMappings.Add("Temporary", "Temporary");
            tableMapping.ColumnMappings.Add("Analyse", "Analyse");
            tableMapping.ColumnMappings.Add("foreverImplement", "foreverImplement");
            tableMapping.ColumnMappings.Add("IsFMEAfile", "IsFMEAfile");
            tableMapping.ColumnMappings.Add("IsOpen", "IsOpen");
            tableMapping.ColumnMappings.Add("ZGCheckName", "ZGCheckName");
            tableMapping.ColumnMappings.Add("IsClose", "IsClose");
            tableMapping.ColumnMappings.Add("Practicable", "Practicable");
            tableMapping.ColumnMappings.Add("Status", "Status");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[S_ServiceFeedBack] WHERE (([ID] = @Original_ID) AND ([FK_Bill_" +
                "ID] = @Original_FK_Bill_ID) AND ((@IsNull_ServiceID = 1 AND [ServiceID] IS NULL)" +
                " OR ([ServiceID] = @Original_ServiceID)) AND ([MessageSource] = @Original_Messag" +
                "eSource) AND ([SiteName] = @Original_SiteName) AND ([CarModel] = @Original_CarMo" +
                "del) AND ([CVTCode] = @Original_CVTCode) AND ([CVTID] = @Original_CVTID) AND ((@" +
                "IsNull_ChassisNum = 1 AND [ChassisNum] IS NULL) OR ([ChassisNum] = @Original_Cha" +
                "ssisNum)) AND ((@IsNull_TCUCode = 1 AND [TCUCode] IS NULL) OR ([TCUCode] = @Orig" +
                "inal_TCUCode)) AND ((@IsNull_NewSoftware = 1 AND [NewSoftware] IS NULL) OR ([New" +
                "Software] = @Original_NewSoftware)) AND ((@IsNull_BugCode = 1 AND [BugCode] IS N" +
                "ULL) OR ([BugCode] = @Original_BugCode)) AND ((@IsNull_CVTCondition = 1 AND [CVT" +
                "Condition] IS NULL) OR ([CVTCondition] = @Original_CVTCondition)) AND ((@IsNull_" +
                "UserName = 1 AND [UserName] IS NULL) OR ([UserName] = @Original_UserName)) AND (" +
                "(@IsNull_Linkman = 1 AND [Linkman] IS NULL) OR ([Linkman] = @Original_Linkman)) " +
                "AND ((@IsNull_LinkTel = 1 AND [LinkTel] IS NULL) OR ([LinkTel] = @Original_LinkT" +
                "el)) AND ((@IsNull_BugNumber = 1 AND [BugNumber] IS NULL) OR ([BugNumber] = @Ori" +
                "ginal_BugNumber)) AND ((@IsNull_BatchNumber = 1 AND [BatchNumber] IS NULL) OR ([" +
                "BatchNumber] = @Original_BatchNumber)) AND ((@IsNull_OutFactoryTime = 1 AND [Out" +
                "FactoryTime] IS NULL) OR ([OutFactoryTime] = @Original_OutFactoryTime)) AND ((@I" +
                "sNull_BuyCarTime = 1 AND [BuyCarTime] IS NULL) OR ([BuyCarTime] = @Original_BuyC" +
                "arTime)) AND ((@IsNull_RunMileage = 1 AND [RunMileage] IS NULL) OR ([RunMileage]" +
                " = @Original_RunMileage)) AND ((@IsNull_ProcessName = 1 AND [ProcessName] IS NUL" +
                "L) OR ([ProcessName] = @Original_ProcessName)) AND ((@IsNull_ProcessTime = 1 AND" +
                " [ProcessTime] IS NULL) OR ([ProcessTime] = @Original_ProcessTime)) AND ((@IsNul" +
                "l_ProcessMode = 1 AND [ProcessMode] IS NULL) OR ([ProcessMode] = @Original_Proce" +
                "ssMode)) AND ((@IsNull_DiagnoseSituation = 1 AND [DiagnoseSituation] IS NULL) OR" +
                " ([DiagnoseSituation] = @Original_DiagnoseSituation)) AND ((@IsNull_Solution = 1" +
                " AND [Solution] IS NULL) OR ([Solution] = @Original_Solution)) AND ((@IsNull_IsB" +
                "ack = 1 AND [IsBack] IS NULL) OR ([IsBack] = @Original_IsBack)) AND ((@IsNull_YX" +
                "ChargeSuggestion = 1 AND [YXChargeSuggestion] IS NULL) OR ([YXChargeSuggestion] " +
                "= @Original_YXChargeSuggestion)) AND ((@IsNull_ZGChargeSuggestion = 1 AND [ZGCha" +
                "rgeSuggestion] IS NULL) OR ([ZGChargeSuggestion] = @Original_ZGChargeSuggestion)" +
                ") AND ((@IsNull_DutyDept = 1 AND [DutyDept] IS NULL) OR ([DutyDept] = @Original_" +
                "DutyDept)) AND ((@IsNull_ReplyTime = 1 AND [ReplyTime] IS NULL) OR ([ReplyTime] " +
                "= @Original_ReplyTime)) AND ((@IsNull_AppearCount = 1 AND [AppearCount] IS NULL)" +
                " OR ([AppearCount] = @Original_AppearCount)) AND ((@IsNull_DutyDeptCharge = 1 AN" +
                "D [DutyDeptCharge] IS NULL) OR ([DutyDeptCharge] = @Original_DutyDeptCharge)) AN" +
                "D ((@IsNull_DutyPerson = 1 AND [DutyPerson] IS NULL) OR ([DutyPerson] = @Origina" +
                "l_DutyPerson)) AND ((@IsNull_FinishClaim = 1 AND [FinishClaim] IS NULL) OR ([Fin" +
                "ishClaim] = @Original_FinishClaim)) AND ((@IsNull_StockSuggestion = 1 AND [Stock" +
                "Suggestion] IS NULL) OR ([StockSuggestion] = @Original_StockSuggestion)) AND ((@" +
                "IsNull_Temporary = 1 AND [Temporary] IS NULL) OR ([Temporary] = @Original_Tempor" +
                "ary)) AND ((@IsNull_Analyse = 1 AND [Analyse] IS NULL) OR ([Analyse] = @Original" +
                "_Analyse)) AND ((@IsNull_foreverImplement = 1 AND [foreverImplement] IS NULL) OR" +
                " ([foreverImplement] = @Original_foreverImplement)) AND ((@IsNull_IsFMEAfile = 1" +
                " AND [IsFMEAfile] IS NULL) OR ([IsFMEAfile] = @Original_IsFMEAfile)) AND ((@IsNu" +
                "ll_IsOpen = 1 AND [IsOpen] IS NULL) OR ([IsOpen] = @Original_IsOpen)) AND ((@IsN" +
                "ull_ZGCheckName = 1 AND [ZGCheckName] IS NULL) OR ([ZGCheckName] = @Original_ZGC" +
                "heckName)) AND ((@IsNull_IsClose = 1 AND [IsClose] IS NULL) OR ([IsClose] = @Ori" +
                "ginal_IsClose)) AND ((@IsNull_Practicable = 1 AND [Practicable] IS NULL) OR ([Pr" +
                "acticable] = @Original_Practicable)) AND ([Status] = @Original_Status))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FK_Bill_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FK_Bill_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ServiceID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MessageSource", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageSource", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SiteName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SiteName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CarModel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarModel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CVTCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CVTID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ChassisNum", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChassisNum", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ChassisNum", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChassisNum", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TCUCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TCUCode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TCUCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TCUCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NewSoftware", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewSoftware", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewSoftware", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewSoftware", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BugCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugCode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BugCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CVTCondition", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTCondition", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CVTCondition", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTCondition", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Linkman", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Linkman", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Linkman", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Linkman", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LinkTel", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkTel", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkTel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkTel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BugNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BugNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BatchNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BatchNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BatchNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BatchNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OutFactoryTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OutFactoryTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OutFactoryTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OutFactoryTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BuyCarTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyCarTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BuyCarTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyCarTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RunMileage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunMileage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RunMileage", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunMileage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProcessName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProcessName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProcessTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProcessTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProcessMode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessMode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProcessMode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessMode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DiagnoseSituation", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DiagnoseSituation", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DiagnoseSituation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DiagnoseSituation", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Solution", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Solution", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Solution", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Solution", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IsBack", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsBack", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsBack", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsBack", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_YXChargeSuggestion", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YXChargeSuggestion", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_YXChargeSuggestion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YXChargeSuggestion", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ZGChargeSuggestion", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZGChargeSuggestion", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ZGChargeSuggestion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZGChargeSuggestion", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DutyDept", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DutyDept", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DutyDept", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DutyDept", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ReplyTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReplyTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ReplyTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReplyTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AppearCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AppearCount", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AppearCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AppearCount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DutyDeptCharge", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DutyDeptCharge", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DutyDeptCharge", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DutyDeptCharge", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DutyPerson", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DutyPerson", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DutyPerson", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DutyPerson", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FinishClaim", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinishClaim", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FinishClaim", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinishClaim", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StockSuggestion", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StockSuggestion", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StockSuggestion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StockSuggestion", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Temporary", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Temporary", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Temporary", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Temporary", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Analyse", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Analyse", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Analyse", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Analyse", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_foreverImplement", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "foreverImplement", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_foreverImplement", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "foreverImplement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IsFMEAfile", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsFMEAfile", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsFMEAfile", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsFMEAfile", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IsOpen", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsOpen", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsOpen", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsOpen", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ZGCheckName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZGCheckName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ZGCheckName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZGCheckName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IsClose", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsClose", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsClose", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsClose", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Practicable", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Practicable", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Practicable", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Practicable", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[S_ServiceFeedBack] ([FK_Bill_ID], [ServiceID], [MessageSource]" +
                ", [SiteName], [CarModel], [CVTCode], [CVTID], [ChassisNum], [TCUCode], [NewSoftw" +
                "are], [BugCode], [CVTCondition], [UserName], [Linkman], [LinkTel], [BugNumber], " +
                "[BatchNumber], [OutFactoryTime], [BuyCarTime], [RunMileage], [ProcessName], [Pro" +
                "cessTime], [ProcessMode], [DiagnoseSituation], [Solution], [IsBack], [YXChargeSu" +
                "ggestion], [ZGChargeSuggestion], [DutyDept], [ReplyTime], [AppearCount], [DutyDe" +
                "ptCharge], [DutyPerson], [FinishClaim], [StockSuggestion], [Temporary], [Analyse" +
                "], [foreverImplement], [IsFMEAfile], [IsOpen], [ZGCheckName], [IsClose], [Practi" +
                "cable], [Status]) VALUES (@FK_Bill_ID, @ServiceID, @MessageSource, @SiteName, @C" +
                "arModel, @CVTCode, @CVTID, @ChassisNum, @TCUCode, @NewSoftware, @BugCode, @CVTCo" +
                "ndition, @UserName, @Linkman, @LinkTel, @BugNumber, @BatchNumber, @OutFactoryTim" +
                "e, @BuyCarTime, @RunMileage, @ProcessName, @ProcessTime, @ProcessMode, @Diagnose" +
                "Situation, @Solution, @IsBack, @YXChargeSuggestion, @ZGChargeSuggestion, @DutyDe" +
                "pt, @ReplyTime, @AppearCount, @DutyDeptCharge, @DutyPerson, @FinishClaim, @Stock" +
                "Suggestion, @Temporary, @Analyse, @foreverImplement, @IsFMEAfile, @IsOpen, @ZGCh" +
                "eckName, @IsClose, @Practicable, @Status);\r\nSELECT ID, FK_Bill_ID, ServiceID, Me" +
                "ssageSource, SiteName, CarModel, CVTCode, CVTID, ChassisNum, TCUCode, NewSoftwar" +
                "e, BugCode, CVTCondition, UserName, Linkman, LinkTel, BugNumber, BatchNumber, Ou" +
                "tFactoryTime, BuyCarTime, RunMileage, ProcessName, ProcessTime, ProcessMode, Dia" +
                "gnoseSituation, Solution, IsBack, YXChargeSuggestion, ZGChargeSuggestion, DutyDe" +
                "pt, ReplyTime, AppearCount, DutyDeptCharge, DutyPerson, FinishClaim, StockSugges" +
                "tion, Temporary, Analyse, foreverImplement, IsFMEAfile, IsOpen, ZGCheckName, IsC" +
                "lose, Practicable, Status FROM S_ServiceFeedBack WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FK_Bill_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FK_Bill_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ServiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MessageSource", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageSource", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SiteName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SiteName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CarModel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarModel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CVTCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CVTID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ChassisNum", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChassisNum", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TCUCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TCUCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewSoftware", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewSoftware", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BugCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CVTCondition", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTCondition", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Linkman", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Linkman", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkTel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkTel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BugNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BatchNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BatchNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OutFactoryTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OutFactoryTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BuyCarTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyCarTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RunMileage", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunMileage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProcessName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProcessTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProcessMode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessMode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DiagnoseSituation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DiagnoseSituation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Solution", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Solution", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsBack", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsBack", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YXChargeSuggestion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YXChargeSuggestion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ZGChargeSuggestion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZGChargeSuggestion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DutyDept", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DutyDept", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReplyTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReplyTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AppearCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AppearCount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DutyDeptCharge", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DutyDeptCharge", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DutyPerson", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DutyPerson", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FinishClaim", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinishClaim", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StockSuggestion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StockSuggestion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Temporary", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Temporary", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Analyse", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Analyse", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@foreverImplement", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "foreverImplement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsFMEAfile", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsFMEAfile", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsOpen", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsOpen", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ZGCheckName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZGCheckName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsClose", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsClose", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Practicable", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Practicable", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[S_ServiceFeedBack] SET [FK_Bill_ID] = @FK_Bill_ID, [ServiceID] = @S" +
                "erviceID, [MessageSource] = @MessageSource, [SiteName] = @SiteName, [CarModel] =" +
                " @CarModel, [CVTCode] = @CVTCode, [CVTID] = @CVTID, [ChassisNum] = @ChassisNum, " +
                "[TCUCode] = @TCUCode, [NewSoftware] = @NewSoftware, [BugCode] = @BugCode, [CVTCo" +
                "ndition] = @CVTCondition, [UserName] = @UserName, [Linkman] = @Linkman, [LinkTel" +
                "] = @LinkTel, [BugNumber] = @BugNumber, [BatchNumber] = @BatchNumber, [OutFactor" +
                "yTime] = @OutFactoryTime, [BuyCarTime] = @BuyCarTime, [RunMileage] = @RunMileage" +
                ", [ProcessName] = @ProcessName, [ProcessTime] = @ProcessTime, [ProcessMode] = @P" +
                "rocessMode, [DiagnoseSituation] = @DiagnoseSituation, [Solution] = @Solution, [I" +
                "sBack] = @IsBack, [YXChargeSuggestion] = @YXChargeSuggestion, [ZGChargeSuggestio" +
                "n] = @ZGChargeSuggestion, [DutyDept] = @DutyDept, [ReplyTime] = @ReplyTime, [App" +
                "earCount] = @AppearCount, [DutyDeptCharge] = @DutyDeptCharge, [DutyPerson] = @Du" +
                "tyPerson, [FinishClaim] = @FinishClaim, [StockSuggestion] = @StockSuggestion, [T" +
                "emporary] = @Temporary, [Analyse] = @Analyse, [foreverImplement] = @foreverImple" +
                "ment, [IsFMEAfile] = @IsFMEAfile, [IsOpen] = @IsOpen, [ZGCheckName] = @ZGCheckNa" +
                "me, [IsClose] = @IsClose, [Practicable] = @Practicable, [Status] = @Status WHERE" +
                " (([ID] = @Original_ID) AND ([FK_Bill_ID] = @Original_FK_Bill_ID) AND ((@IsNull_" +
                "ServiceID = 1 AND [ServiceID] IS NULL) OR ([ServiceID] = @Original_ServiceID)) A" +
                "ND ([MessageSource] = @Original_MessageSource) AND ([SiteName] = @Original_SiteN" +
                "ame) AND ([CarModel] = @Original_CarModel) AND ([CVTCode] = @Original_CVTCode) A" +
                "ND ([CVTID] = @Original_CVTID) AND ((@IsNull_ChassisNum = 1 AND [ChassisNum] IS " +
                "NULL) OR ([ChassisNum] = @Original_ChassisNum)) AND ((@IsNull_TCUCode = 1 AND [T" +
                "CUCode] IS NULL) OR ([TCUCode] = @Original_TCUCode)) AND ((@IsNull_NewSoftware =" +
                " 1 AND [NewSoftware] IS NULL) OR ([NewSoftware] = @Original_NewSoftware)) AND ((" +
                "@IsNull_BugCode = 1 AND [BugCode] IS NULL) OR ([BugCode] = @Original_BugCode)) A" +
                "ND ((@IsNull_CVTCondition = 1 AND [CVTCondition] IS NULL) OR ([CVTCondition] = @" +
                "Original_CVTCondition)) AND ((@IsNull_UserName = 1 AND [UserName] IS NULL) OR ([" +
                "UserName] = @Original_UserName)) AND ((@IsNull_Linkman = 1 AND [Linkman] IS NULL" +
                ") OR ([Linkman] = @Original_Linkman)) AND ((@IsNull_LinkTel = 1 AND [LinkTel] IS" +
                " NULL) OR ([LinkTel] = @Original_LinkTel)) AND ((@IsNull_BugNumber = 1 AND [BugN" +
                "umber] IS NULL) OR ([BugNumber] = @Original_BugNumber)) AND ((@IsNull_BatchNumbe" +
                "r = 1 AND [BatchNumber] IS NULL) OR ([BatchNumber] = @Original_BatchNumber)) AND" +
                " ((@IsNull_OutFactoryTime = 1 AND [OutFactoryTime] IS NULL) OR ([OutFactoryTime]" +
                " = @Original_OutFactoryTime)) AND ((@IsNull_BuyCarTime = 1 AND [BuyCarTime] IS N" +
                "ULL) OR ([BuyCarTime] = @Original_BuyCarTime)) AND ((@IsNull_RunMileage = 1 AND " +
                "[RunMileage] IS NULL) OR ([RunMileage] = @Original_RunMileage)) AND ((@IsNull_Pr" +
                "ocessName = 1 AND [ProcessName] IS NULL) OR ([ProcessName] = @Original_ProcessNa" +
                "me)) AND ((@IsNull_ProcessTime = 1 AND [ProcessTime] IS NULL) OR ([ProcessTime] " +
                "= @Original_ProcessTime)) AND ((@IsNull_ProcessMode = 1 AND [ProcessMode] IS NUL" +
                "L) OR ([ProcessMode] = @Original_ProcessMode)) AND ((@IsNull_DiagnoseSituation =" +
                " 1 AND [DiagnoseSituation] IS NULL) OR ([DiagnoseSituation] = @Original_Diagnose" +
                "Situation)) AND ((@IsNull_Solution = 1 AND [Solution] IS NULL) OR ([Solution] = " +
                "@Original_Solution)) AND ((@IsNull_IsBack = 1 AND [IsBack] IS NULL) OR ([IsBack]" +
                " = @Original_IsBack)) AND ((@IsNull_YXChargeSuggestion = 1 AND [YXChargeSuggesti" +
                "on] IS NULL) OR ([YXChargeSuggestion] = @Original_YXChargeSuggestion)) AND ((@Is" +
                "Null_ZGChargeSuggestion = 1 AND [ZGChargeSuggestion] IS NULL) OR ([ZGChargeSugge" +
                "stion] = @Original_ZGChargeSuggestion)) AND ((@IsNull_DutyDept = 1 AND [DutyDept" +
                "] IS NULL) OR ([DutyDept] = @Original_DutyDept)) AND ((@IsNull_ReplyTime = 1 AND" +
                " [ReplyTime] IS NULL) OR ([ReplyTime] = @Original_ReplyTime)) AND ((@IsNull_Appe" +
                "arCount = 1 AND [AppearCount] IS NULL) OR ([AppearCount] = @Original_AppearCount" +
                ")) AND ((@IsNull_DutyDeptCharge = 1 AND [DutyDeptCharge] IS NULL) OR ([DutyDeptC" +
                "harge] = @Original_DutyDeptCharge)) AND ((@IsNull_DutyPerson = 1 AND [DutyPerson" +
                "] IS NULL) OR ([DutyPerson] = @Original_DutyPerson)) AND ((@IsNull_FinishClaim =" +
                " 1 AND [FinishClaim] IS NULL) OR ([FinishClaim] = @Original_FinishClaim)) AND ((" +
                "@IsNull_StockSuggestion = 1 AND [StockSuggestion] IS NULL) OR ([StockSuggestion]" +
                " = @Original_StockSuggestion)) AND ((@IsNull_Temporary = 1 AND [Temporary] IS NU" +
                "LL) OR ([Temporary] = @Original_Temporary)) AND ((@IsNull_Analyse = 1 AND [Analy" +
                "se] IS NULL) OR ([Analyse] = @Original_Analyse)) AND ((@IsNull_foreverImplement " +
                "= 1 AND [foreverImplement] IS NULL) OR ([foreverImplement] = @Original_foreverIm" +
                "plement)) AND ((@IsNull_IsFMEAfile = 1 AND [IsFMEAfile] IS NULL) OR ([IsFMEAfile" +
                "] = @Original_IsFMEAfile)) AND ((@IsNull_IsOpen = 1 AND [IsOpen] IS NULL) OR ([I" +
                "sOpen] = @Original_IsOpen)) AND ((@IsNull_ZGCheckName = 1 AND [ZGCheckName] IS N" +
                "ULL) OR ([ZGCheckName] = @Original_ZGCheckName)) AND ((@IsNull_IsClose = 1 AND [" +
                "IsClose] IS NULL) OR ([IsClose] = @Original_IsClose)) AND ((@IsNull_Practicable " +
                "= 1 AND [Practicable] IS NULL) OR ([Practicable] = @Original_Practicable)) AND (" +
                "[Status] = @Original_Status));\r\nSELECT ID, FK_Bill_ID, ServiceID, MessageSource," +
                " SiteName, CarModel, CVTCode, CVTID, ChassisNum, TCUCode, NewSoftware, BugCode, " +
                "CVTCondition, UserName, Linkman, LinkTel, BugNumber, BatchNumber, OutFactoryTime" +
                ", BuyCarTime, RunMileage, ProcessName, ProcessTime, ProcessMode, DiagnoseSituati" +
                "on, Solution, IsBack, YXChargeSuggestion, ZGChargeSuggestion, DutyDept, ReplyTim" +
                "e, AppearCount, DutyDeptCharge, DutyPerson, FinishClaim, StockSuggestion, Tempor" +
                "ary, Analyse, foreverImplement, IsFMEAfile, IsOpen, ZGCheckName, IsClose, Practi" +
                "cable, Status FROM S_ServiceFeedBack WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FK_Bill_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FK_Bill_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ServiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MessageSource", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageSource", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SiteName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SiteName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CarModel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarModel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CVTCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CVTID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ChassisNum", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChassisNum", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TCUCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TCUCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewSoftware", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewSoftware", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BugCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CVTCondition", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTCondition", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Linkman", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Linkman", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkTel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkTel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BugNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BatchNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BatchNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OutFactoryTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OutFactoryTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BuyCarTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyCarTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RunMileage", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunMileage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProcessName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProcessTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProcessMode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessMode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DiagnoseSituation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DiagnoseSituation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Solution", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Solution", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsBack", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsBack", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@YXChargeSuggestion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YXChargeSuggestion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ZGChargeSuggestion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZGChargeSuggestion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DutyDept", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DutyDept", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReplyTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReplyTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AppearCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AppearCount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DutyDeptCharge", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DutyDeptCharge", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DutyPerson", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DutyPerson", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FinishClaim", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinishClaim", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StockSuggestion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StockSuggestion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Temporary", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Temporary", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Analyse", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Analyse", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@foreverImplement", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "foreverImplement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsFMEAfile", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsFMEAfile", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsOpen", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsOpen", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ZGCheckName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZGCheckName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsClose", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsClose", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Practicable", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Practicable", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FK_Bill_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FK_Bill_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ServiceID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MessageSource", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageSource", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SiteName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SiteName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CarModel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CarModel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CVTCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CVTID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ChassisNum", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChassisNum", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ChassisNum", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChassisNum", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TCUCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TCUCode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TCUCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TCUCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NewSoftware", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewSoftware", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NewSoftware", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewSoftware", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BugCode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugCode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BugCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CVTCondition", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTCondition", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CVTCondition", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CVTCondition", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Linkman", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Linkman", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Linkman", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Linkman", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LinkTel", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkTel", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkTel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkTel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BugNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BugNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BugNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BatchNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BatchNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BatchNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BatchNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OutFactoryTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OutFactoryTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OutFactoryTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OutFactoryTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BuyCarTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyCarTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BuyCarTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuyCarTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RunMileage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunMileage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RunMileage", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RunMileage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProcessName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProcessName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProcessTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProcessTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ProcessMode", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessMode", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProcessMode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProcessMode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DiagnoseSituation", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DiagnoseSituation", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DiagnoseSituation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DiagnoseSituation", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Solution", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Solution", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Solution", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Solution", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IsBack", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsBack", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsBack", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsBack", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_YXChargeSuggestion", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YXChargeSuggestion", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_YXChargeSuggestion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "YXChargeSuggestion", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ZGChargeSuggestion", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZGChargeSuggestion", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ZGChargeSuggestion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZGChargeSuggestion", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DutyDept", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DutyDept", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DutyDept", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DutyDept", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ReplyTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReplyTime", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ReplyTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ReplyTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AppearCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AppearCount", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AppearCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AppearCount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DutyDeptCharge", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DutyDeptCharge", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DutyDeptCharge", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DutyDeptCharge", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DutyPerson", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DutyPerson", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DutyPerson", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DutyPerson", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FinishClaim", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinishClaim", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FinishClaim", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinishClaim", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StockSuggestion", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StockSuggestion", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StockSuggestion", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StockSuggestion", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Temporary", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Temporary", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Temporary", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Temporary", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Analyse", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Analyse", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Analyse", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Analyse", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_foreverImplement", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "foreverImplement", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_foreverImplement", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "foreverImplement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IsFMEAfile", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsFMEAfile", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsFMEAfile", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsFMEAfile", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IsOpen", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsOpen", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsOpen", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsOpen", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ZGCheckName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZGCheckName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ZGCheckName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZGCheckName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IsClose", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsClose", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsClose", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsClose", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Practicable", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Practicable", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Practicable", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Practicable", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT ID, FK_Bill_ID, ServiceID, MessageSource, SiteName, CarModel, CVTCode, CVTID, ChassisNum, TCUCode, NewSoftware, BugCode, CVTCondition, UserName, Linkman, LinkTel, BugNumber, BatchNumber, OutFactoryTime, BuyCarTime, RunMileage, ProcessName, ProcessTime, ProcessMode, DiagnoseSituation, Solution, IsBack, YXChargeSuggestion, ZGChargeSuggestion, DutyDept, ReplyTime, AppearCount, DutyDeptCharge, DutyPerson, FinishClaim, StockSuggestion, Temporary, Analyse, foreverImplement, IsFMEAfile, IsOpen, ZGCheckName, IsClose, Practicable, Status FROM dbo.S_ServiceFeedBack";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.S_ServiceFeedBackDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.S_ServiceFeedBackDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.S_ServiceFeedBackDataTable dataTable = new RundarWebServerDataSet.S_ServiceFeedBackDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.S_ServiceFeedBackDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "S_ServiceFeedBack");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_ID, 
                    string Original_FK_Bill_ID, 
                    string Original_ServiceID, 
                    string Original_MessageSource, 
                    string Original_SiteName, 
                    string Original_CarModel, 
                    string Original_CVTCode, 
                    string Original_CVTID, 
                    string Original_ChassisNum, 
                    string Original_TCUCode, 
                    string Original_NewSoftware, 
                    string Original_BugCode, 
                    string Original_CVTCondition, 
                    string Original_UserName, 
                    string Original_Linkman, 
                    string Original_LinkTel, 
                    string Original_BugNumber, 
                    string Original_BatchNumber, 
                    global::System.Nullable<global::System.DateTime> Original_OutFactoryTime, 
                    global::System.Nullable<global::System.DateTime> Original_BuyCarTime, 
                    string Original_RunMileage, 
                    string Original_ProcessName, 
                    global::System.Nullable<global::System.DateTime> Original_ProcessTime, 
                    string Original_ProcessMode, 
                    string Original_DiagnoseSituation, 
                    string Original_Solution, 
                    string Original_IsBack, 
                    string Original_YXChargeSuggestion, 
                    string Original_ZGChargeSuggestion, 
                    string Original_DutyDept, 
                    global::System.Nullable<global::System.DateTime> Original_ReplyTime, 
                    global::System.Nullable<int> Original_AppearCount, 
                    string Original_DutyDeptCharge, 
                    string Original_DutyPerson, 
                    string Original_FinishClaim, 
                    string Original_StockSuggestion, 
                    string Original_Temporary, 
                    string Original_Analyse, 
                    string Original_foreverImplement, 
                    string Original_IsFMEAfile, 
                    string Original_IsOpen, 
                    string Original_ZGCheckName, 
                    string Original_IsClose, 
                    string Original_Practicable, 
                    string Original_Status) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_FK_Bill_ID == null)) {
                throw new global::System.ArgumentNullException("Original_FK_Bill_ID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_FK_Bill_ID));
            }
            if ((Original_ServiceID == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_ServiceID));
            }
            if ((Original_MessageSource == null)) {
                throw new global::System.ArgumentNullException("Original_MessageSource");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_MessageSource));
            }
            if ((Original_SiteName == null)) {
                throw new global::System.ArgumentNullException("Original_SiteName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_SiteName));
            }
            if ((Original_CarModel == null)) {
                throw new global::System.ArgumentNullException("Original_CarModel");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_CarModel));
            }
            if ((Original_CVTCode == null)) {
                throw new global::System.ArgumentNullException("Original_CVTCode");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_CVTCode));
            }
            if ((Original_CVTID == null)) {
                throw new global::System.ArgumentNullException("Original_CVTID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_CVTID));
            }
            if ((Original_ChassisNum == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_ChassisNum));
            }
            if ((Original_TCUCode == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_TCUCode));
            }
            if ((Original_NewSoftware == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_NewSoftware));
            }
            if ((Original_BugCode == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_BugCode));
            }
            if ((Original_CVTCondition == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_CVTCondition));
            }
            if ((Original_UserName == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_UserName));
            }
            if ((Original_Linkman == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_Linkman));
            }
            if ((Original_LinkTel == null)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_LinkTel));
            }
            if ((Original_BugNumber == null)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_BugNumber));
            }
            if ((Original_BatchNumber == null)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((string)(Original_BatchNumber));
            }
            if ((Original_OutFactoryTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((System.DateTime)(Original_OutFactoryTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_BuyCarTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((System.DateTime)(Original_BuyCarTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_RunMileage == null)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((string)(Original_RunMileage));
            }
            if ((Original_ProcessName == null)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((string)(Original_ProcessName));
            }
            if ((Original_ProcessTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((System.DateTime)(Original_ProcessTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_ProcessMode == null)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((string)(Original_ProcessMode));
            }
            if ((Original_DiagnoseSituation == null)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((string)(Original_DiagnoseSituation));
            }
            if ((Original_Solution == null)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((string)(Original_Solution));
            }
            if ((Original_IsBack == null)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((string)(Original_IsBack));
            }
            if ((Original_YXChargeSuggestion == null)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((string)(Original_YXChargeSuggestion));
            }
            if ((Original_ZGChargeSuggestion == null)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((string)(Original_ZGChargeSuggestion));
            }
            if ((Original_DutyDept == null)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((string)(Original_DutyDept));
            }
            if ((Original_ReplyTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[54].Value = ((System.DateTime)(Original_ReplyTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((Original_AppearCount.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[56].Value = ((int)(Original_AppearCount.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((Original_DutyDeptCharge == null)) {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[58].Value = ((string)(Original_DutyDeptCharge));
            }
            if ((Original_DutyPerson == null)) {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[60].Value = ((string)(Original_DutyPerson));
            }
            if ((Original_FinishClaim == null)) {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[62].Value = ((string)(Original_FinishClaim));
            }
            if ((Original_StockSuggestion == null)) {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[64].Value = ((string)(Original_StockSuggestion));
            }
            if ((Original_Temporary == null)) {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[66].Value = ((string)(Original_Temporary));
            }
            if ((Original_Analyse == null)) {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[68].Value = ((string)(Original_Analyse));
            }
            if ((Original_foreverImplement == null)) {
                this.Adapter.DeleteCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[70].Value = ((string)(Original_foreverImplement));
            }
            if ((Original_IsFMEAfile == null)) {
                this.Adapter.DeleteCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[72].Value = ((string)(Original_IsFMEAfile));
            }
            if ((Original_IsOpen == null)) {
                this.Adapter.DeleteCommand.Parameters[73].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[73].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[74].Value = ((string)(Original_IsOpen));
            }
            if ((Original_ZGCheckName == null)) {
                this.Adapter.DeleteCommand.Parameters[75].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[75].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[76].Value = ((string)(Original_ZGCheckName));
            }
            if ((Original_IsClose == null)) {
                this.Adapter.DeleteCommand.Parameters[77].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[77].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[78].Value = ((string)(Original_IsClose));
            }
            if ((Original_Practicable == null)) {
                this.Adapter.DeleteCommand.Parameters[79].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[79].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[80].Value = ((string)(Original_Practicable));
            }
            if ((Original_Status == null)) {
                throw new global::System.ArgumentNullException("Original_Status");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[81].Value = ((string)(Original_Status));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string FK_Bill_ID, 
                    string ServiceID, 
                    string MessageSource, 
                    string SiteName, 
                    string CarModel, 
                    string CVTCode, 
                    string CVTID, 
                    string ChassisNum, 
                    string TCUCode, 
                    string NewSoftware, 
                    string BugCode, 
                    string CVTCondition, 
                    string UserName, 
                    string Linkman, 
                    string LinkTel, 
                    string BugNumber, 
                    string BatchNumber, 
                    global::System.Nullable<global::System.DateTime> OutFactoryTime, 
                    global::System.Nullable<global::System.DateTime> BuyCarTime, 
                    string RunMileage, 
                    string ProcessName, 
                    global::System.Nullable<global::System.DateTime> ProcessTime, 
                    string ProcessMode, 
                    string DiagnoseSituation, 
                    string Solution, 
                    string IsBack, 
                    string YXChargeSuggestion, 
                    string ZGChargeSuggestion, 
                    string DutyDept, 
                    global::System.Nullable<global::System.DateTime> ReplyTime, 
                    global::System.Nullable<int> AppearCount, 
                    string DutyDeptCharge, 
                    string DutyPerson, 
                    string FinishClaim, 
                    string StockSuggestion, 
                    string Temporary, 
                    string Analyse, 
                    string foreverImplement, 
                    string IsFMEAfile, 
                    string IsOpen, 
                    string ZGCheckName, 
                    string IsClose, 
                    string Practicable, 
                    string Status) {
            if ((FK_Bill_ID == null)) {
                throw new global::System.ArgumentNullException("FK_Bill_ID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(FK_Bill_ID));
            }
            if ((ServiceID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ServiceID));
            }
            if ((MessageSource == null)) {
                throw new global::System.ArgumentNullException("MessageSource");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(MessageSource));
            }
            if ((SiteName == null)) {
                throw new global::System.ArgumentNullException("SiteName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(SiteName));
            }
            if ((CarModel == null)) {
                throw new global::System.ArgumentNullException("CarModel");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(CarModel));
            }
            if ((CVTCode == null)) {
                throw new global::System.ArgumentNullException("CVTCode");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(CVTCode));
            }
            if ((CVTID == null)) {
                throw new global::System.ArgumentNullException("CVTID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(CVTID));
            }
            if ((ChassisNum == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(ChassisNum));
            }
            if ((TCUCode == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(TCUCode));
            }
            if ((NewSoftware == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(NewSoftware));
            }
            if ((BugCode == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(BugCode));
            }
            if ((CVTCondition == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(CVTCondition));
            }
            if ((UserName == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(UserName));
            }
            if ((Linkman == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(Linkman));
            }
            if ((LinkTel == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(LinkTel));
            }
            if ((BugNumber == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(BugNumber));
            }
            if ((BatchNumber == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(BatchNumber));
            }
            if ((OutFactoryTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((System.DateTime)(OutFactoryTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((BuyCarTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((System.DateTime)(BuyCarTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((RunMileage == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(RunMileage));
            }
            if ((ProcessName == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(ProcessName));
            }
            if ((ProcessTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((System.DateTime)(ProcessTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((ProcessMode == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(ProcessMode));
            }
            if ((DiagnoseSituation == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(DiagnoseSituation));
            }
            if ((Solution == null)) {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((string)(Solution));
            }
            if ((IsBack == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(IsBack));
            }
            if ((YXChargeSuggestion == null)) {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = ((string)(YXChargeSuggestion));
            }
            if ((ZGChargeSuggestion == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(ZGChargeSuggestion));
            }
            if ((DutyDept == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(DutyDept));
            }
            if ((ReplyTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[29].Value = ((System.DateTime)(ReplyTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((AppearCount.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((int)(AppearCount.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((DutyDeptCharge == null)) {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = ((string)(DutyDeptCharge));
            }
            if ((DutyPerson == null)) {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = ((string)(DutyPerson));
            }
            if ((FinishClaim == null)) {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = ((string)(FinishClaim));
            }
            if ((StockSuggestion == null)) {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = ((string)(StockSuggestion));
            }
            if ((Temporary == null)) {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = ((string)(Temporary));
            }
            if ((Analyse == null)) {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = ((string)(Analyse));
            }
            if ((foreverImplement == null)) {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = ((string)(foreverImplement));
            }
            if ((IsFMEAfile == null)) {
                this.Adapter.InsertCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = ((string)(IsFMEAfile));
            }
            if ((IsOpen == null)) {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = ((string)(IsOpen));
            }
            if ((ZGCheckName == null)) {
                this.Adapter.InsertCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[40].Value = ((string)(ZGCheckName));
            }
            if ((IsClose == null)) {
                this.Adapter.InsertCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[41].Value = ((string)(IsClose));
            }
            if ((Practicable == null)) {
                this.Adapter.InsertCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[42].Value = ((string)(Practicable));
            }
            if ((Status == null)) {
                throw new global::System.ArgumentNullException("Status");
            }
            else {
                this.Adapter.InsertCommand.Parameters[43].Value = ((string)(Status));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string FK_Bill_ID, 
                    string ServiceID, 
                    string MessageSource, 
                    string SiteName, 
                    string CarModel, 
                    string CVTCode, 
                    string CVTID, 
                    string ChassisNum, 
                    string TCUCode, 
                    string NewSoftware, 
                    string BugCode, 
                    string CVTCondition, 
                    string UserName, 
                    string Linkman, 
                    string LinkTel, 
                    string BugNumber, 
                    string BatchNumber, 
                    global::System.Nullable<global::System.DateTime> OutFactoryTime, 
                    global::System.Nullable<global::System.DateTime> BuyCarTime, 
                    string RunMileage, 
                    string ProcessName, 
                    global::System.Nullable<global::System.DateTime> ProcessTime, 
                    string ProcessMode, 
                    string DiagnoseSituation, 
                    string Solution, 
                    string IsBack, 
                    string YXChargeSuggestion, 
                    string ZGChargeSuggestion, 
                    string DutyDept, 
                    global::System.Nullable<global::System.DateTime> ReplyTime, 
                    global::System.Nullable<int> AppearCount, 
                    string DutyDeptCharge, 
                    string DutyPerson, 
                    string FinishClaim, 
                    string StockSuggestion, 
                    string Temporary, 
                    string Analyse, 
                    string foreverImplement, 
                    string IsFMEAfile, 
                    string IsOpen, 
                    string ZGCheckName, 
                    string IsClose, 
                    string Practicable, 
                    string Status, 
                    int Original_ID, 
                    string Original_FK_Bill_ID, 
                    string Original_ServiceID, 
                    string Original_MessageSource, 
                    string Original_SiteName, 
                    string Original_CarModel, 
                    string Original_CVTCode, 
                    string Original_CVTID, 
                    string Original_ChassisNum, 
                    string Original_TCUCode, 
                    string Original_NewSoftware, 
                    string Original_BugCode, 
                    string Original_CVTCondition, 
                    string Original_UserName, 
                    string Original_Linkman, 
                    string Original_LinkTel, 
                    string Original_BugNumber, 
                    string Original_BatchNumber, 
                    global::System.Nullable<global::System.DateTime> Original_OutFactoryTime, 
                    global::System.Nullable<global::System.DateTime> Original_BuyCarTime, 
                    string Original_RunMileage, 
                    string Original_ProcessName, 
                    global::System.Nullable<global::System.DateTime> Original_ProcessTime, 
                    string Original_ProcessMode, 
                    string Original_DiagnoseSituation, 
                    string Original_Solution, 
                    string Original_IsBack, 
                    string Original_YXChargeSuggestion, 
                    string Original_ZGChargeSuggestion, 
                    string Original_DutyDept, 
                    global::System.Nullable<global::System.DateTime> Original_ReplyTime, 
                    global::System.Nullable<int> Original_AppearCount, 
                    string Original_DutyDeptCharge, 
                    string Original_DutyPerson, 
                    string Original_FinishClaim, 
                    string Original_StockSuggestion, 
                    string Original_Temporary, 
                    string Original_Analyse, 
                    string Original_foreverImplement, 
                    string Original_IsFMEAfile, 
                    string Original_IsOpen, 
                    string Original_ZGCheckName, 
                    string Original_IsClose, 
                    string Original_Practicable, 
                    string Original_Status, 
                    int ID) {
            if ((FK_Bill_ID == null)) {
                throw new global::System.ArgumentNullException("FK_Bill_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(FK_Bill_ID));
            }
            if ((ServiceID == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ServiceID));
            }
            if ((MessageSource == null)) {
                throw new global::System.ArgumentNullException("MessageSource");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(MessageSource));
            }
            if ((SiteName == null)) {
                throw new global::System.ArgumentNullException("SiteName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(SiteName));
            }
            if ((CarModel == null)) {
                throw new global::System.ArgumentNullException("CarModel");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(CarModel));
            }
            if ((CVTCode == null)) {
                throw new global::System.ArgumentNullException("CVTCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(CVTCode));
            }
            if ((CVTID == null)) {
                throw new global::System.ArgumentNullException("CVTID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(CVTID));
            }
            if ((ChassisNum == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(ChassisNum));
            }
            if ((TCUCode == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(TCUCode));
            }
            if ((NewSoftware == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(NewSoftware));
            }
            if ((BugCode == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(BugCode));
            }
            if ((CVTCondition == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(CVTCondition));
            }
            if ((UserName == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(UserName));
            }
            if ((Linkman == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Linkman));
            }
            if ((LinkTel == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(LinkTel));
            }
            if ((BugNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(BugNumber));
            }
            if ((BatchNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(BatchNumber));
            }
            if ((OutFactoryTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(OutFactoryTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((BuyCarTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(BuyCarTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((RunMileage == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(RunMileage));
            }
            if ((ProcessName == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(ProcessName));
            }
            if ((ProcessTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(ProcessTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((ProcessMode == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(ProcessMode));
            }
            if ((DiagnoseSituation == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(DiagnoseSituation));
            }
            if ((Solution == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Solution));
            }
            if ((IsBack == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(IsBack));
            }
            if ((YXChargeSuggestion == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(YXChargeSuggestion));
            }
            if ((ZGChargeSuggestion == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(ZGChargeSuggestion));
            }
            if ((DutyDept == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(DutyDept));
            }
            if ((ReplyTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((System.DateTime)(ReplyTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((AppearCount.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((int)(AppearCount.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((DutyDeptCharge == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(DutyDeptCharge));
            }
            if ((DutyPerson == null)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(DutyPerson));
            }
            if ((FinishClaim == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(FinishClaim));
            }
            if ((StockSuggestion == null)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(StockSuggestion));
            }
            if ((Temporary == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Temporary));
            }
            if ((Analyse == null)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Analyse));
            }
            if ((foreverImplement == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(foreverImplement));
            }
            if ((IsFMEAfile == null)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(IsFMEAfile));
            }
            if ((IsOpen == null)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((string)(IsOpen));
            }
            if ((ZGCheckName == null)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(ZGCheckName));
            }
            if ((IsClose == null)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(IsClose));
            }
            if ((Practicable == null)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Practicable));
            }
            if ((Status == null)) {
                throw new global::System.ArgumentNullException("Status");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((string)(Status));
            }
            this.Adapter.UpdateCommand.Parameters[44].Value = ((int)(Original_ID));
            if ((Original_FK_Bill_ID == null)) {
                throw new global::System.ArgumentNullException("Original_FK_Bill_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(Original_FK_Bill_ID));
            }
            if ((Original_ServiceID == null)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[47].Value = ((string)(Original_ServiceID));
            }
            if ((Original_MessageSource == null)) {
                throw new global::System.ArgumentNullException("Original_MessageSource");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((string)(Original_MessageSource));
            }
            if ((Original_SiteName == null)) {
                throw new global::System.ArgumentNullException("Original_SiteName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((string)(Original_SiteName));
            }
            if ((Original_CarModel == null)) {
                throw new global::System.ArgumentNullException("Original_CarModel");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((string)(Original_CarModel));
            }
            if ((Original_CVTCode == null)) {
                throw new global::System.ArgumentNullException("Original_CVTCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((string)(Original_CVTCode));
            }
            if ((Original_CVTID == null)) {
                throw new global::System.ArgumentNullException("Original_CVTID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((string)(Original_CVTID));
            }
            if ((Original_ChassisNum == null)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[54].Value = ((string)(Original_ChassisNum));
            }
            if ((Original_TCUCode == null)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[56].Value = ((string)(Original_TCUCode));
            }
            if ((Original_NewSoftware == null)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[58].Value = ((string)(Original_NewSoftware));
            }
            if ((Original_BugCode == null)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[60].Value = ((string)(Original_BugCode));
            }
            if ((Original_CVTCondition == null)) {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[62].Value = ((string)(Original_CVTCondition));
            }
            if ((Original_UserName == null)) {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[64].Value = ((string)(Original_UserName));
            }
            if ((Original_Linkman == null)) {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[66].Value = ((string)(Original_Linkman));
            }
            if ((Original_LinkTel == null)) {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[68].Value = ((string)(Original_LinkTel));
            }
            if ((Original_BugNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[70].Value = ((string)(Original_BugNumber));
            }
            if ((Original_BatchNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[72].Value = ((string)(Original_BatchNumber));
            }
            if ((Original_OutFactoryTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[74].Value = ((System.DateTime)(Original_OutFactoryTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            if ((Original_BuyCarTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[76].Value = ((System.DateTime)(Original_BuyCarTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            if ((Original_RunMileage == null)) {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[78].Value = ((string)(Original_RunMileage));
            }
            if ((Original_ProcessName == null)) {
                this.Adapter.UpdateCommand.Parameters[79].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[79].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[80].Value = ((string)(Original_ProcessName));
            }
            if ((Original_ProcessTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[81].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[82].Value = ((System.DateTime)(Original_ProcessTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[81].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[82].Value = global::System.DBNull.Value;
            }
            if ((Original_ProcessMode == null)) {
                this.Adapter.UpdateCommand.Parameters[83].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[84].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[83].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[84].Value = ((string)(Original_ProcessMode));
            }
            if ((Original_DiagnoseSituation == null)) {
                this.Adapter.UpdateCommand.Parameters[85].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[86].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[85].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[86].Value = ((string)(Original_DiagnoseSituation));
            }
            if ((Original_Solution == null)) {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[88].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[88].Value = ((string)(Original_Solution));
            }
            if ((Original_IsBack == null)) {
                this.Adapter.UpdateCommand.Parameters[89].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[90].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[89].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[90].Value = ((string)(Original_IsBack));
            }
            if ((Original_YXChargeSuggestion == null)) {
                this.Adapter.UpdateCommand.Parameters[91].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[92].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[91].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[92].Value = ((string)(Original_YXChargeSuggestion));
            }
            if ((Original_ZGChargeSuggestion == null)) {
                this.Adapter.UpdateCommand.Parameters[93].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[94].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[93].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[94].Value = ((string)(Original_ZGChargeSuggestion));
            }
            if ((Original_DutyDept == null)) {
                this.Adapter.UpdateCommand.Parameters[95].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[96].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[95].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[96].Value = ((string)(Original_DutyDept));
            }
            if ((Original_ReplyTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[97].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[98].Value = ((System.DateTime)(Original_ReplyTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[97].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[98].Value = global::System.DBNull.Value;
            }
            if ((Original_AppearCount.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[99].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[100].Value = ((int)(Original_AppearCount.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[99].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[100].Value = global::System.DBNull.Value;
            }
            if ((Original_DutyDeptCharge == null)) {
                this.Adapter.UpdateCommand.Parameters[101].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[102].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[101].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[102].Value = ((string)(Original_DutyDeptCharge));
            }
            if ((Original_DutyPerson == null)) {
                this.Adapter.UpdateCommand.Parameters[103].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[104].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[103].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[104].Value = ((string)(Original_DutyPerson));
            }
            if ((Original_FinishClaim == null)) {
                this.Adapter.UpdateCommand.Parameters[105].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[106].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[105].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[106].Value = ((string)(Original_FinishClaim));
            }
            if ((Original_StockSuggestion == null)) {
                this.Adapter.UpdateCommand.Parameters[107].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[108].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[107].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[108].Value = ((string)(Original_StockSuggestion));
            }
            if ((Original_Temporary == null)) {
                this.Adapter.UpdateCommand.Parameters[109].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[110].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[109].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[110].Value = ((string)(Original_Temporary));
            }
            if ((Original_Analyse == null)) {
                this.Adapter.UpdateCommand.Parameters[111].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[112].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[111].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[112].Value = ((string)(Original_Analyse));
            }
            if ((Original_foreverImplement == null)) {
                this.Adapter.UpdateCommand.Parameters[113].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[114].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[113].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[114].Value = ((string)(Original_foreverImplement));
            }
            if ((Original_IsFMEAfile == null)) {
                this.Adapter.UpdateCommand.Parameters[115].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[116].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[115].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[116].Value = ((string)(Original_IsFMEAfile));
            }
            if ((Original_IsOpen == null)) {
                this.Adapter.UpdateCommand.Parameters[117].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[118].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[117].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[118].Value = ((string)(Original_IsOpen));
            }
            if ((Original_ZGCheckName == null)) {
                this.Adapter.UpdateCommand.Parameters[119].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[120].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[119].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[120].Value = ((string)(Original_ZGCheckName));
            }
            if ((Original_IsClose == null)) {
                this.Adapter.UpdateCommand.Parameters[121].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[122].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[121].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[122].Value = ((string)(Original_IsClose));
            }
            if ((Original_Practicable == null)) {
                this.Adapter.UpdateCommand.Parameters[123].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[124].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[123].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[124].Value = ((string)(Original_Practicable));
            }
            if ((Original_Status == null)) {
                throw new global::System.ArgumentNullException("Original_Status");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[125].Value = ((string)(Original_Status));
            }
            this.Adapter.UpdateCommand.Parameters[126].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string FK_Bill_ID, 
                    string ServiceID, 
                    string MessageSource, 
                    string SiteName, 
                    string CarModel, 
                    string CVTCode, 
                    string CVTID, 
                    string ChassisNum, 
                    string TCUCode, 
                    string NewSoftware, 
                    string BugCode, 
                    string CVTCondition, 
                    string UserName, 
                    string Linkman, 
                    string LinkTel, 
                    string BugNumber, 
                    string BatchNumber, 
                    global::System.Nullable<global::System.DateTime> OutFactoryTime, 
                    global::System.Nullable<global::System.DateTime> BuyCarTime, 
                    string RunMileage, 
                    string ProcessName, 
                    global::System.Nullable<global::System.DateTime> ProcessTime, 
                    string ProcessMode, 
                    string DiagnoseSituation, 
                    string Solution, 
                    string IsBack, 
                    string YXChargeSuggestion, 
                    string ZGChargeSuggestion, 
                    string DutyDept, 
                    global::System.Nullable<global::System.DateTime> ReplyTime, 
                    global::System.Nullable<int> AppearCount, 
                    string DutyDeptCharge, 
                    string DutyPerson, 
                    string FinishClaim, 
                    string StockSuggestion, 
                    string Temporary, 
                    string Analyse, 
                    string foreverImplement, 
                    string IsFMEAfile, 
                    string IsOpen, 
                    string ZGCheckName, 
                    string IsClose, 
                    string Practicable, 
                    string Status, 
                    int Original_ID, 
                    string Original_FK_Bill_ID, 
                    string Original_ServiceID, 
                    string Original_MessageSource, 
                    string Original_SiteName, 
                    string Original_CarModel, 
                    string Original_CVTCode, 
                    string Original_CVTID, 
                    string Original_ChassisNum, 
                    string Original_TCUCode, 
                    string Original_NewSoftware, 
                    string Original_BugCode, 
                    string Original_CVTCondition, 
                    string Original_UserName, 
                    string Original_Linkman, 
                    string Original_LinkTel, 
                    string Original_BugNumber, 
                    string Original_BatchNumber, 
                    global::System.Nullable<global::System.DateTime> Original_OutFactoryTime, 
                    global::System.Nullable<global::System.DateTime> Original_BuyCarTime, 
                    string Original_RunMileage, 
                    string Original_ProcessName, 
                    global::System.Nullable<global::System.DateTime> Original_ProcessTime, 
                    string Original_ProcessMode, 
                    string Original_DiagnoseSituation, 
                    string Original_Solution, 
                    string Original_IsBack, 
                    string Original_YXChargeSuggestion, 
                    string Original_ZGChargeSuggestion, 
                    string Original_DutyDept, 
                    global::System.Nullable<global::System.DateTime> Original_ReplyTime, 
                    global::System.Nullable<int> Original_AppearCount, 
                    string Original_DutyDeptCharge, 
                    string Original_DutyPerson, 
                    string Original_FinishClaim, 
                    string Original_StockSuggestion, 
                    string Original_Temporary, 
                    string Original_Analyse, 
                    string Original_foreverImplement, 
                    string Original_IsFMEAfile, 
                    string Original_IsOpen, 
                    string Original_ZGCheckName, 
                    string Original_IsClose, 
                    string Original_Practicable, 
                    string Original_Status) {
            return this.Update(FK_Bill_ID, ServiceID, MessageSource, SiteName, CarModel, CVTCode, CVTID, ChassisNum, TCUCode, NewSoftware, BugCode, CVTCondition, UserName, Linkman, LinkTel, BugNumber, BatchNumber, OutFactoryTime, BuyCarTime, RunMileage, ProcessName, ProcessTime, ProcessMode, DiagnoseSituation, Solution, IsBack, YXChargeSuggestion, ZGChargeSuggestion, DutyDept, ReplyTime, AppearCount, DutyDeptCharge, DutyPerson, FinishClaim, StockSuggestion, Temporary, Analyse, foreverImplement, IsFMEAfile, IsOpen, ZGCheckName, IsClose, Practicable, Status, Original_ID, Original_FK_Bill_ID, Original_ServiceID, Original_MessageSource, Original_SiteName, Original_CarModel, Original_CVTCode, Original_CVTID, Original_ChassisNum, Original_TCUCode, Original_NewSoftware, Original_BugCode, Original_CVTCondition, Original_UserName, Original_Linkman, Original_LinkTel, Original_BugNumber, Original_BatchNumber, Original_OutFactoryTime, Original_BuyCarTime, Original_RunMileage, Original_ProcessName, Original_ProcessTime, Original_ProcessMode, Original_DiagnoseSituation, Original_Solution, Original_IsBack, Original_YXChargeSuggestion, Original_ZGChargeSuggestion, Original_DutyDept, Original_ReplyTime, Original_AppearCount, Original_DutyDeptCharge, Original_DutyPerson, Original_FinishClaim, Original_StockSuggestion, Original_Temporary, Original_Analyse, Original_foreverImplement, Original_IsFMEAfile, Original_IsOpen, Original_ZGCheckName, Original_IsClose, Original_Practicable, Original_Status, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class S_ServiceFileDownTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public S_ServiceFileDownTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "S_ServiceFileDown";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("ServiceID", "ServiceID");
            tableMapping.ColumnMappings.Add("FileNames", "FileNames");
            tableMapping.ColumnMappings.Add("FileAddress", "FileAddress");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[S_ServiceFileDown] WHERE (([ID] = @Original_ID) AND ([ServiceI" +
                "D] = @Original_ServiceID) AND ([FileNames] = @Original_FileNames) AND ([FileAddr" +
                "ess] = @Original_FileAddress))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FileNames", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileNames", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FileAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[S_ServiceFileDown] ([ServiceID], [FileNames], [FileAddress]) V" +
                "ALUES (@ServiceID, @FileNames, @FileAddress);\r\nSELECT ID, ServiceID, FileNames, " +
                "FileAddress FROM S_ServiceFileDown WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ServiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileNames", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileNames", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[S_ServiceFileDown] SET [ServiceID] = @ServiceID, [FileNames] = @FileNames, [FileAddress] = @FileAddress WHERE (([ID] = @Original_ID) AND ([ServiceID] = @Original_ServiceID) AND ([FileNames] = @Original_FileNames) AND ([FileAddress] = @Original_FileAddress));
SELECT ID, ServiceID, FileNames, FileAddress FROM S_ServiceFileDown WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ServiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileNames", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileNames", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ServiceID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ServiceID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FileNames", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileNames", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FileAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, ServiceID, FileNames, FileAddress FROM dbo.S_ServiceFileDown";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.S_ServiceFileDownDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.S_ServiceFileDownDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.S_ServiceFileDownDataTable dataTable = new RundarWebServerDataSet.S_ServiceFileDownDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.S_ServiceFileDownDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "S_ServiceFileDown");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_ServiceID, string Original_FileNames, string Original_FileAddress) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_ServiceID == null)) {
                throw new global::System.ArgumentNullException("Original_ServiceID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_ServiceID));
            }
            if ((Original_FileNames == null)) {
                throw new global::System.ArgumentNullException("Original_FileNames");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_FileNames));
            }
            if ((Original_FileAddress == null)) {
                throw new global::System.ArgumentNullException("Original_FileAddress");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_FileAddress));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ServiceID, string FileNames, string FileAddress) {
            if ((ServiceID == null)) {
                throw new global::System.ArgumentNullException("ServiceID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ServiceID));
            }
            if ((FileNames == null)) {
                throw new global::System.ArgumentNullException("FileNames");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(FileNames));
            }
            if ((FileAddress == null)) {
                throw new global::System.ArgumentNullException("FileAddress");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(FileAddress));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ServiceID, string FileNames, string FileAddress, int Original_ID, string Original_ServiceID, string Original_FileNames, string Original_FileAddress, int ID) {
            if ((ServiceID == null)) {
                throw new global::System.ArgumentNullException("ServiceID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ServiceID));
            }
            if ((FileNames == null)) {
                throw new global::System.ArgumentNullException("FileNames");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(FileNames));
            }
            if ((FileAddress == null)) {
                throw new global::System.ArgumentNullException("FileAddress");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(FileAddress));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ID));
            if ((Original_ServiceID == null)) {
                throw new global::System.ArgumentNullException("Original_ServiceID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_ServiceID));
            }
            if ((Original_FileNames == null)) {
                throw new global::System.ArgumentNullException("Original_FileNames");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_FileNames));
            }
            if ((Original_FileAddress == null)) {
                throw new global::System.ArgumentNullException("Original_FileAddress");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_FileAddress));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ServiceID, string FileNames, string FileAddress, int Original_ID, string Original_ServiceID, string Original_FileNames, string Original_FileAddress) {
            return this.Update(ServiceID, FileNames, FileAddress, Original_ID, Original_ServiceID, Original_FileNames, Original_FileAddress, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TCU_UP_DownloadLogTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TCU_UP_DownloadLogTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TCU_UP_DownloadLog";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("MachineCode", "MachineCode");
            tableMapping.ColumnMappings.Add("ProgramType", "ProgramType");
            tableMapping.ColumnMappings.Add("ProgramVersion", "ProgramVersion");
            tableMapping.ColumnMappings.Add("DownloadDate", "DownloadDate");
            tableMapping.ColumnMappings.Add("IpAddress", "IpAddress");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TCU_UP_DownloadLog] WHERE (([ID] = @Original_ID) AND ([MachineCode] = @Original_MachineCode) AND ([ProgramType] = @Original_ProgramType) AND ([ProgramVersion] = @Original_ProgramVersion) AND ([DownloadDate] = @Original_DownloadDate) AND ([IpAddress] = @Original_IpAddress))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MachineCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MachineCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProgramType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProgramVersion", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramVersion", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DownloadDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DownloadDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IpAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IpAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TCU_UP_DownloadLog] ([MachineCode], [ProgramType], [ProgramVersion], [DownloadDate], [IpAddress]) VALUES (@MachineCode, @ProgramType, @ProgramVersion, @DownloadDate, @IpAddress);
SELECT ID, MachineCode, ProgramType, ProgramVersion, DownloadDate, IpAddress FROM TCU_UP_DownloadLog WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MachineCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MachineCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProgramType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProgramVersion", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramVersion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DownloadDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DownloadDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IpAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IpAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TCU_UP_DownloadLog] SET [MachineCode] = @MachineCode, [ProgramType] = @ProgramType, [ProgramVersion] = @ProgramVersion, [DownloadDate] = @DownloadDate, [IpAddress] = @IpAddress WHERE (([ID] = @Original_ID) AND ([MachineCode] = @Original_MachineCode) AND ([ProgramType] = @Original_ProgramType) AND ([ProgramVersion] = @Original_ProgramVersion) AND ([DownloadDate] = @Original_DownloadDate) AND ([IpAddress] = @Original_IpAddress));
SELECT ID, MachineCode, ProgramType, ProgramVersion, DownloadDate, IpAddress FROM TCU_UP_DownloadLog WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MachineCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MachineCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProgramType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProgramVersion", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramVersion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DownloadDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DownloadDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IpAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IpAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MachineCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MachineCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProgramType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProgramVersion", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramVersion", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DownloadDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DownloadDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IpAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IpAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, MachineCode, ProgramType, ProgramVersion, DownloadDate, IpAddress FROM" +
                " dbo.TCU_UP_DownloadLog";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.TCU_UP_DownloadLogDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.TCU_UP_DownloadLogDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.TCU_UP_DownloadLogDataTable dataTable = new RundarWebServerDataSet.TCU_UP_DownloadLogDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.TCU_UP_DownloadLogDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TCU_UP_DownloadLog");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_MachineCode, int Original_ProgramType, double Original_ProgramVersion, string Original_DownloadDate, string Original_IpAddress) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_MachineCode == null)) {
                throw new global::System.ArgumentNullException("Original_MachineCode");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_MachineCode));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ProgramType));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((double)(Original_ProgramVersion));
            if ((Original_DownloadDate == null)) {
                throw new global::System.ArgumentNullException("Original_DownloadDate");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_DownloadDate));
            }
            if ((Original_IpAddress == null)) {
                throw new global::System.ArgumentNullException("Original_IpAddress");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_IpAddress));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string MachineCode, int ProgramType, double ProgramVersion, string DownloadDate, string IpAddress) {
            if ((MachineCode == null)) {
                throw new global::System.ArgumentNullException("MachineCode");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(MachineCode));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ProgramType));
            this.Adapter.InsertCommand.Parameters[2].Value = ((double)(ProgramVersion));
            if ((DownloadDate == null)) {
                throw new global::System.ArgumentNullException("DownloadDate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(DownloadDate));
            }
            if ((IpAddress == null)) {
                throw new global::System.ArgumentNullException("IpAddress");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(IpAddress));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string MachineCode, int ProgramType, double ProgramVersion, string DownloadDate, string IpAddress, int Original_ID, string Original_MachineCode, int Original_ProgramType, double Original_ProgramVersion, string Original_DownloadDate, string Original_IpAddress, int ID) {
            if ((MachineCode == null)) {
                throw new global::System.ArgumentNullException("MachineCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(MachineCode));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ProgramType));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((double)(ProgramVersion));
            if ((DownloadDate == null)) {
                throw new global::System.ArgumentNullException("DownloadDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(DownloadDate));
            }
            if ((IpAddress == null)) {
                throw new global::System.ArgumentNullException("IpAddress");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(IpAddress));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_ID));
            if ((Original_MachineCode == null)) {
                throw new global::System.ArgumentNullException("Original_MachineCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_MachineCode));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_ProgramType));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((double)(Original_ProgramVersion));
            if ((Original_DownloadDate == null)) {
                throw new global::System.ArgumentNullException("Original_DownloadDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_DownloadDate));
            }
            if ((Original_IpAddress == null)) {
                throw new global::System.ArgumentNullException("Original_IpAddress");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_IpAddress));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string MachineCode, int ProgramType, double ProgramVersion, string DownloadDate, string IpAddress, int Original_ID, string Original_MachineCode, int Original_ProgramType, double Original_ProgramVersion, string Original_DownloadDate, string Original_IpAddress) {
            return this.Update(MachineCode, ProgramType, ProgramVersion, DownloadDate, IpAddress, Original_ID, Original_MachineCode, Original_ProgramType, Original_ProgramVersion, Original_DownloadDate, Original_IpAddress, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TCU_UP_FILETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TCU_UP_FILETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TCU_UP_FILE";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("ProgramType", "ProgramType");
            tableMapping.ColumnMappings.Add("ProgramVersion", "ProgramVersion");
            tableMapping.ColumnMappings.Add("VersionDetail", "VersionDetail");
            tableMapping.ColumnMappings.Add("FileName", "FileName");
            tableMapping.ColumnMappings.Add("FileContent", "FileContent");
            tableMapping.ColumnMappings.Add("FileLength", "FileLength");
            tableMapping.ColumnMappings.Add("FileLengthDetail", "FileLengthDetail");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("Remark", "Remark");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TCU_UP_FILE] WHERE (([ID] = @Original_ID) AND ([ProgramType] = @Original_ProgramType) AND ([ProgramVersion] = @Original_ProgramVersion) AND ([VersionDetail] = @Original_VersionDetail) AND ([FileName] = @Original_FileName) AND ([FileLength] = @Original_FileLength) AND ([FileLengthDetail] = @Original_FileLengthDetail) AND ([Date] = @Original_Date))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProgramType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProgramVersion", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramVersion", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VersionDetail", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VersionDetail", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FileName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FileLength", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileLength", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FileLengthDetail", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileLengthDetail", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TCU_UP_FILE] ([ProgramType], [ProgramVersion], [VersionDetail], [FileName], [FileContent], [FileLength], [FileLengthDetail], [Date], [Remark]) VALUES (@ProgramType, @ProgramVersion, @VersionDetail, @FileName, @FileContent, @FileLength, @FileLengthDetail, @Date, @Remark);
SELECT ID, ProgramType, ProgramVersion, VersionDetail, FileName, FileContent, FileLength, FileLengthDetail, Date, Remark FROM TCU_UP_FILE WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProgramType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProgramVersion", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramVersion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VersionDetail", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VersionDetail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileContent", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileContent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileLength", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileLengthDetail", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileLengthDetail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TCU_UP_FILE] SET [ProgramType] = @ProgramType, [ProgramVersion] = @ProgramVersion, [VersionDetail] = @VersionDetail, [FileName] = @FileName, [FileContent] = @FileContent, [FileLength] = @FileLength, [FileLengthDetail] = @FileLengthDetail, [Date] = @Date, [Remark] = @Remark WHERE (([ID] = @Original_ID) AND ([ProgramType] = @Original_ProgramType) AND ([ProgramVersion] = @Original_ProgramVersion) AND ([VersionDetail] = @Original_VersionDetail) AND ([FileName] = @Original_FileName) AND ([FileLength] = @Original_FileLength) AND ([FileLengthDetail] = @Original_FileLengthDetail) AND ([Date] = @Original_Date));
SELECT ID, ProgramType, ProgramVersion, VersionDetail, FileName, FileContent, FileLength, FileLengthDetail, Date, Remark FROM TCU_UP_FILE WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProgramType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProgramVersion", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramVersion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VersionDetail", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VersionDetail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileContent", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileContent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileLength", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileLengthDetail", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileLengthDetail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProgramType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProgramVersion", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramVersion", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VersionDetail", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VersionDetail", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FileName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FileLength", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileLength", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FileLengthDetail", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileLengthDetail", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, ProgramType, ProgramVersion, VersionDetail, FileName, FileContent, Fil" +
                "eLength, FileLengthDetail, Date, Remark FROM dbo.TCU_UP_FILE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.TCU_UP_FILEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.TCU_UP_FILEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.TCU_UP_FILEDataTable dataTable = new RundarWebServerDataSet.TCU_UP_FILEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.TCU_UP_FILEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TCU_UP_FILE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, int Original_ProgramType, double Original_ProgramVersion, string Original_VersionDetail, string Original_FileName, int Original_FileLength, string Original_FileLengthDetail, System.DateTime Original_Date) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ProgramType));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((double)(Original_ProgramVersion));
            if ((Original_VersionDetail == null)) {
                throw new global::System.ArgumentNullException("Original_VersionDetail");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_VersionDetail));
            }
            if ((Original_FileName == null)) {
                throw new global::System.ArgumentNullException("Original_FileName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_FileName));
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_FileLength));
            if ((Original_FileLengthDetail == null)) {
                throw new global::System.ArgumentNullException("Original_FileLengthDetail");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_FileLengthDetail));
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_Date));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ProgramType, double ProgramVersion, string VersionDetail, string FileName, byte[] FileContent, int FileLength, string FileLengthDetail, System.DateTime Date, string Remark) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ProgramType));
            this.Adapter.InsertCommand.Parameters[1].Value = ((double)(ProgramVersion));
            if ((VersionDetail == null)) {
                throw new global::System.ArgumentNullException("VersionDetail");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(VersionDetail));
            }
            if ((FileName == null)) {
                throw new global::System.ArgumentNullException("FileName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(FileName));
            }
            if ((FileContent == null)) {
                throw new global::System.ArgumentNullException("FileContent");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((byte[])(FileContent));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(FileLength));
            if ((FileLengthDetail == null)) {
                throw new global::System.ArgumentNullException("FileLengthDetail");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(FileLengthDetail));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((System.DateTime)(Date));
            if ((Remark == null)) {
                throw new global::System.ArgumentNullException("Remark");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Remark));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int ProgramType, 
                    double ProgramVersion, 
                    string VersionDetail, 
                    string FileName, 
                    byte[] FileContent, 
                    int FileLength, 
                    string FileLengthDetail, 
                    System.DateTime Date, 
                    string Remark, 
                    int Original_ID, 
                    int Original_ProgramType, 
                    double Original_ProgramVersion, 
                    string Original_VersionDetail, 
                    string Original_FileName, 
                    int Original_FileLength, 
                    string Original_FileLengthDetail, 
                    System.DateTime Original_Date, 
                    int ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ProgramType));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((double)(ProgramVersion));
            if ((VersionDetail == null)) {
                throw new global::System.ArgumentNullException("VersionDetail");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(VersionDetail));
            }
            if ((FileName == null)) {
                throw new global::System.ArgumentNullException("FileName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(FileName));
            }
            if ((FileContent == null)) {
                throw new global::System.ArgumentNullException("FileContent");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((byte[])(FileContent));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(FileLength));
            if ((FileLengthDetail == null)) {
                throw new global::System.ArgumentNullException("FileLengthDetail");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(FileLengthDetail));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((System.DateTime)(Date));
            if ((Remark == null)) {
                throw new global::System.ArgumentNullException("Remark");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Remark));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_ID));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_ProgramType));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((double)(Original_ProgramVersion));
            if ((Original_VersionDetail == null)) {
                throw new global::System.ArgumentNullException("Original_VersionDetail");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_VersionDetail));
            }
            if ((Original_FileName == null)) {
                throw new global::System.ArgumentNullException("Original_FileName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_FileName));
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_FileLength));
            if ((Original_FileLengthDetail == null)) {
                throw new global::System.ArgumentNullException("Original_FileLengthDetail");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_FileLengthDetail));
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(Original_Date));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int ProgramType, 
                    double ProgramVersion, 
                    string VersionDetail, 
                    string FileName, 
                    byte[] FileContent, 
                    int FileLength, 
                    string FileLengthDetail, 
                    System.DateTime Date, 
                    string Remark, 
                    int Original_ID, 
                    int Original_ProgramType, 
                    double Original_ProgramVersion, 
                    string Original_VersionDetail, 
                    string Original_FileName, 
                    int Original_FileLength, 
                    string Original_FileLengthDetail, 
                    System.DateTime Original_Date) {
            return this.Update(ProgramType, ProgramVersion, VersionDetail, FileName, FileContent, FileLength, FileLengthDetail, Date, Remark, Original_ID, Original_ProgramType, Original_ProgramVersion, Original_VersionDetail, Original_FileName, Original_FileLength, Original_FileLengthDetail, Original_Date, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TCU_UP_LOGTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TCU_UP_LOGTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TCU_UP_LOG";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("MachineCode", "MachineCode");
            tableMapping.ColumnMappings.Add("TcuNumber", "TcuNumber");
            tableMapping.ColumnMappings.Add("VehicleModel", "VehicleModel");
            tableMapping.ColumnMappings.Add("Version", "Version");
            tableMapping.ColumnMappings.Add("WriteCount", "WriteCount");
            tableMapping.ColumnMappings.Add("WriteDate", "WriteDate");
            tableMapping.ColumnMappings.Add("Remark", "Remark");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TCU_UP_LOG] WHERE (([ID] = @Original_ID) AND ([MachineCode] = @Original_MachineCode) AND ([TcuNumber] = @Original_TcuNumber) AND ([VehicleModel] = @Original_VehicleModel) AND ([Version] = @Original_Version) AND ([WriteCount] = @Original_WriteCount) AND ([WriteDate] = @Original_WriteDate))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MachineCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MachineCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TcuNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TcuNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VehicleModel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VehicleModel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Version", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Version", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WriteCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WriteCount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WriteDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WriteDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TCU_UP_LOG] ([MachineCode], [TcuNumber], [VehicleModel], [Version], [WriteCount], [WriteDate], [Remark]) VALUES (@MachineCode, @TcuNumber, @VehicleModel, @Version, @WriteCount, @WriteDate, @Remark);
SELECT ID, MachineCode, TcuNumber, VehicleModel, Version, WriteCount, WriteDate, Remark FROM TCU_UP_LOG WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MachineCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MachineCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TcuNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TcuNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VehicleModel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VehicleModel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Version", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Version", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WriteCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WriteCount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WriteDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WriteDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TCU_UP_LOG] SET [MachineCode] = @MachineCode, [TcuNumber] = @TcuNumber, [VehicleModel] = @VehicleModel, [Version] = @Version, [WriteCount] = @WriteCount, [WriteDate] = @WriteDate, [Remark] = @Remark WHERE (([ID] = @Original_ID) AND ([MachineCode] = @Original_MachineCode) AND ([TcuNumber] = @Original_TcuNumber) AND ([VehicleModel] = @Original_VehicleModel) AND ([Version] = @Original_Version) AND ([WriteCount] = @Original_WriteCount) AND ([WriteDate] = @Original_WriteDate));
SELECT ID, MachineCode, TcuNumber, VehicleModel, Version, WriteCount, WriteDate, Remark FROM TCU_UP_LOG WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MachineCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MachineCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TcuNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TcuNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VehicleModel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VehicleModel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Version", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Version", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WriteCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WriteCount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WriteDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WriteDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MachineCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MachineCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TcuNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TcuNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VehicleModel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VehicleModel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Version", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Version", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WriteCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WriteCount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WriteDate", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WriteDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, MachineCode, TcuNumber, VehicleModel, Version, WriteCount, WriteDate, " +
                "Remark FROM dbo.TCU_UP_LOG";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.TCU_UP_LOGDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.TCU_UP_LOGDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.TCU_UP_LOGDataTable dataTable = new RundarWebServerDataSet.TCU_UP_LOGDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.TCU_UP_LOGDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TCU_UP_LOG");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_MachineCode, string Original_TcuNumber, string Original_VehicleModel, string Original_Version, int Original_WriteCount, string Original_WriteDate) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_MachineCode == null)) {
                throw new global::System.ArgumentNullException("Original_MachineCode");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_MachineCode));
            }
            if ((Original_TcuNumber == null)) {
                throw new global::System.ArgumentNullException("Original_TcuNumber");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_TcuNumber));
            }
            if ((Original_VehicleModel == null)) {
                throw new global::System.ArgumentNullException("Original_VehicleModel");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_VehicleModel));
            }
            if ((Original_Version == null)) {
                throw new global::System.ArgumentNullException("Original_Version");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Version));
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_WriteCount));
            if ((Original_WriteDate == null)) {
                throw new global::System.ArgumentNullException("Original_WriteDate");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_WriteDate));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string MachineCode, string TcuNumber, string VehicleModel, string Version, int WriteCount, string WriteDate, string Remark) {
            if ((MachineCode == null)) {
                throw new global::System.ArgumentNullException("MachineCode");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(MachineCode));
            }
            if ((TcuNumber == null)) {
                throw new global::System.ArgumentNullException("TcuNumber");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TcuNumber));
            }
            if ((VehicleModel == null)) {
                throw new global::System.ArgumentNullException("VehicleModel");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(VehicleModel));
            }
            if ((Version == null)) {
                throw new global::System.ArgumentNullException("Version");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Version));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(WriteCount));
            if ((WriteDate == null)) {
                throw new global::System.ArgumentNullException("WriteDate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(WriteDate));
            }
            if ((Remark == null)) {
                throw new global::System.ArgumentNullException("Remark");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Remark));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string MachineCode, string TcuNumber, string VehicleModel, string Version, int WriteCount, string WriteDate, string Remark, int Original_ID, string Original_MachineCode, string Original_TcuNumber, string Original_VehicleModel, string Original_Version, int Original_WriteCount, string Original_WriteDate, int ID) {
            if ((MachineCode == null)) {
                throw new global::System.ArgumentNullException("MachineCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(MachineCode));
            }
            if ((TcuNumber == null)) {
                throw new global::System.ArgumentNullException("TcuNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TcuNumber));
            }
            if ((VehicleModel == null)) {
                throw new global::System.ArgumentNullException("VehicleModel");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(VehicleModel));
            }
            if ((Version == null)) {
                throw new global::System.ArgumentNullException("Version");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Version));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(WriteCount));
            if ((WriteDate == null)) {
                throw new global::System.ArgumentNullException("WriteDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(WriteDate));
            }
            if ((Remark == null)) {
                throw new global::System.ArgumentNullException("Remark");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Remark));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_ID));
            if ((Original_MachineCode == null)) {
                throw new global::System.ArgumentNullException("Original_MachineCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_MachineCode));
            }
            if ((Original_TcuNumber == null)) {
                throw new global::System.ArgumentNullException("Original_TcuNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_TcuNumber));
            }
            if ((Original_VehicleModel == null)) {
                throw new global::System.ArgumentNullException("Original_VehicleModel");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_VehicleModel));
            }
            if ((Original_Version == null)) {
                throw new global::System.ArgumentNullException("Original_Version");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_Version));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_WriteCount));
            if ((Original_WriteDate == null)) {
                throw new global::System.ArgumentNullException("Original_WriteDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_WriteDate));
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string MachineCode, string TcuNumber, string VehicleModel, string Version, int WriteCount, string WriteDate, string Remark, int Original_ID, string Original_MachineCode, string Original_TcuNumber, string Original_VehicleModel, string Original_Version, int Original_WriteCount, string Original_WriteDate) {
            return this.Update(MachineCode, TcuNumber, VehicleModel, Version, WriteCount, WriteDate, Remark, Original_ID, Original_MachineCode, Original_TcuNumber, Original_VehicleModel, Original_Version, Original_WriteCount, Original_WriteDate, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TCU_UP_Program_Update_LogTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TCU_UP_Program_Update_LogTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TCU_UP_Program_Update_Log";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("VehicleModel", "VehicleModel");
            tableMapping.ColumnMappings.Add("ProgramVersion", "ProgramVersion");
            tableMapping.ColumnMappings.Add("UpdateDetail", "UpdateDetail");
            tableMapping.ColumnMappings.Add("UpdateDate", "UpdateDate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TCU_UP_Program_Update_Log] WHERE (([ID] = @Original_ID) AND ([VehicleModel] = @Original_VehicleModel) AND ([ProgramVersion] = @Original_ProgramVersion) AND ([UpdateDetail] = @Original_UpdateDetail) AND ([UpdateDate] = @Original_UpdateDate))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VehicleModel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VehicleModel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProgramVersion", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramVersion", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UpdateDetail", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDetail", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UpdateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TCU_UP_Program_Update_Log] ([VehicleModel], [ProgramVersion], [UpdateDetail], [UpdateDate]) VALUES (@VehicleModel, @ProgramVersion, @UpdateDetail, @UpdateDate);
SELECT ID, VehicleModel, ProgramVersion, UpdateDetail, UpdateDate FROM TCU_UP_Program_Update_Log WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VehicleModel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VehicleModel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProgramVersion", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramVersion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateDetail", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDetail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TCU_UP_Program_Update_Log] SET [VehicleModel] = @VehicleModel, [ProgramVersion] = @ProgramVersion, [UpdateDetail] = @UpdateDetail, [UpdateDate] = @UpdateDate WHERE (([ID] = @Original_ID) AND ([VehicleModel] = @Original_VehicleModel) AND ([ProgramVersion] = @Original_ProgramVersion) AND ([UpdateDetail] = @Original_UpdateDetail) AND ([UpdateDate] = @Original_UpdateDate));
SELECT ID, VehicleModel, ProgramVersion, UpdateDetail, UpdateDate FROM TCU_UP_Program_Update_Log WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VehicleModel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VehicleModel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProgramVersion", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramVersion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateDetail", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDetail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VehicleModel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VehicleModel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProgramVersion", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramVersion", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UpdateDetail", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDetail", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UpdateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, VehicleModel, ProgramVersion, UpdateDetail, UpdateDate FROM dbo.TCU_UP" +
                "_Program_Update_Log";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.TCU_UP_Program_Update_LogDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.TCU_UP_Program_Update_LogDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.TCU_UP_Program_Update_LogDataTable dataTable = new RundarWebServerDataSet.TCU_UP_Program_Update_LogDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.TCU_UP_Program_Update_LogDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TCU_UP_Program_Update_Log");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, string Original_VehicleModel, double Original_ProgramVersion, string Original_UpdateDetail, System.DateTime Original_UpdateDate) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_VehicleModel == null)) {
                throw new global::System.ArgumentNullException("Original_VehicleModel");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_VehicleModel));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((double)(Original_ProgramVersion));
            if ((Original_UpdateDetail == null)) {
                throw new global::System.ArgumentNullException("Original_UpdateDetail");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_UpdateDetail));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_UpdateDate));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string VehicleModel, double ProgramVersion, string UpdateDetail, System.DateTime UpdateDate) {
            if ((VehicleModel == null)) {
                throw new global::System.ArgumentNullException("VehicleModel");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(VehicleModel));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((double)(ProgramVersion));
            if ((UpdateDetail == null)) {
                throw new global::System.ArgumentNullException("UpdateDetail");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(UpdateDetail));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(UpdateDate));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string VehicleModel, double ProgramVersion, string UpdateDetail, System.DateTime UpdateDate, int Original_ID, string Original_VehicleModel, double Original_ProgramVersion, string Original_UpdateDetail, System.DateTime Original_UpdateDate, int ID) {
            if ((VehicleModel == null)) {
                throw new global::System.ArgumentNullException("VehicleModel");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(VehicleModel));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((double)(ProgramVersion));
            if ((UpdateDetail == null)) {
                throw new global::System.ArgumentNullException("UpdateDetail");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(UpdateDetail));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(UpdateDate));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID));
            if ((Original_VehicleModel == null)) {
                throw new global::System.ArgumentNullException("Original_VehicleModel");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_VehicleModel));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(Original_ProgramVersion));
            if ((Original_UpdateDetail == null)) {
                throw new global::System.ArgumentNullException("Original_UpdateDetail");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_UpdateDetail));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(Original_UpdateDate));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string VehicleModel, double ProgramVersion, string UpdateDetail, System.DateTime UpdateDate, int Original_ID, string Original_VehicleModel, double Original_ProgramVersion, string Original_UpdateDetail, System.DateTime Original_UpdateDate) {
            return this.Update(VehicleModel, ProgramVersion, UpdateDetail, UpdateDate, Original_ID, Original_VehicleModel, Original_ProgramVersion, Original_UpdateDetail, Original_UpdateDate, Original_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TCU_UP_ProgramTypeTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TCU_UP_ProgramTypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TCU_UP_ProgramType";
            tableMapping.ColumnMappings.Add("ProgramType", "ProgramType");
            tableMapping.ColumnMappings.Add("ProgramTypeName", "ProgramTypeName");
            tableMapping.ColumnMappings.Add("Remark", "Remark");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TCU_UP_ProgramType] WHERE (([ProgramType] = @Original_ProgramT" +
                "ype) AND ([ProgramTypeName] = @Original_ProgramTypeName) AND ([Remark] = @Origin" +
                "al_Remark))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProgramType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProgramTypeName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramTypeName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TCU_UP_ProgramType] ([ProgramType], [ProgramTypeName], [Remark" +
                "]) VALUES (@ProgramType, @ProgramTypeName, @Remark);\r\nSELECT ProgramType, Progra" +
                "mTypeName, Remark FROM TCU_UP_ProgramType WHERE (ProgramType = @ProgramType)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProgramType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProgramTypeName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramTypeName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TCU_UP_ProgramType] SET [ProgramType] = @ProgramType, [ProgramTypeName] = @ProgramTypeName, [Remark] = @Remark WHERE (([ProgramType] = @Original_ProgramType) AND ([ProgramTypeName] = @Original_ProgramTypeName) AND ([Remark] = @Original_Remark));
SELECT ProgramType, ProgramTypeName, Remark FROM TCU_UP_ProgramType WHERE (ProgramType = @ProgramType)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProgramType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProgramTypeName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramTypeName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProgramType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProgramTypeName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProgramTypeName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ProgramType, ProgramTypeName, Remark FROM dbo.TCU_UP_ProgramType";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.TCU_UP_ProgramTypeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.TCU_UP_ProgramTypeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.TCU_UP_ProgramTypeDataTable dataTable = new RundarWebServerDataSet.TCU_UP_ProgramTypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.TCU_UP_ProgramTypeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TCU_UP_ProgramType");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ProgramType, string Original_ProgramTypeName, string Original_Remark) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ProgramType));
            if ((Original_ProgramTypeName == null)) {
                throw new global::System.ArgumentNullException("Original_ProgramTypeName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_ProgramTypeName));
            }
            if ((Original_Remark == null)) {
                throw new global::System.ArgumentNullException("Original_Remark");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Remark));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ProgramType, string ProgramTypeName, string Remark) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ProgramType));
            if ((ProgramTypeName == null)) {
                throw new global::System.ArgumentNullException("ProgramTypeName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ProgramTypeName));
            }
            if ((Remark == null)) {
                throw new global::System.ArgumentNullException("Remark");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Remark));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ProgramType, string ProgramTypeName, string Remark, int Original_ProgramType, string Original_ProgramTypeName, string Original_Remark) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ProgramType));
            if ((ProgramTypeName == null)) {
                throw new global::System.ArgumentNullException("ProgramTypeName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ProgramTypeName));
            }
            if ((Remark == null)) {
                throw new global::System.ArgumentNullException("Remark");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Remark));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ProgramType));
            if ((Original_ProgramTypeName == null)) {
                throw new global::System.ArgumentNullException("Original_ProgramTypeName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_ProgramTypeName));
            }
            if ((Original_Remark == null)) {
                throw new global::System.ArgumentNullException("Original_Remark");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Remark));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ProgramTypeName, string Remark, int Original_ProgramType, string Original_ProgramTypeName, string Original_Remark) {
            return this.Update(Original_ProgramType, ProgramTypeName, Remark, Original_ProgramType, Original_ProgramTypeName, Original_Remark);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TCU_UP_UserInfoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TCU_UP_UserInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TCU_UP_UserInfo";
            tableMapping.ColumnMappings.Add("MachineCode", "MachineCode");
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            tableMapping.ColumnMappings.Add("Company", "Company");
            tableMapping.ColumnMappings.Add("Contact", "Contact");
            tableMapping.ColumnMappings.Add("ContactAddress", "ContactAddress");
            tableMapping.ColumnMappings.Add("IsEnable", "IsEnable");
            tableMapping.ColumnMappings.Add("CheckType", "CheckType");
            tableMapping.ColumnMappings.Add("AllowCount", "AllowCount");
            tableMapping.ColumnMappings.Add("EndDate", "EndDate");
            tableMapping.ColumnMappings.Add("AllowProgramType", "AllowProgramType");
            tableMapping.ColumnMappings.Add("Remark", "Remark");
            tableMapping.ColumnMappings.Add("UpdateDate", "UpdateDate");
            tableMapping.ColumnMappings.Add("UpdateLog", "UpdateLog");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TCU_UP_UserInfo] WHERE (([MachineCode] = @Original_MachineCode) AND ([UserName] = @Original_UserName) AND ([Company] = @Original_Company) AND ([Contact] = @Original_Contact) AND ([ContactAddress] = @Original_ContactAddress) AND ([IsEnable] = @Original_IsEnable) AND ([CheckType] = @Original_CheckType) AND ([AllowCount] = @Original_AllowCount) AND ([EndDate] = @Original_EndDate) AND ([AllowProgramType] = @Original_AllowProgramType) AND ([UpdateDate] = @Original_UpdateDate))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MachineCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MachineCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Company", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Company", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Contact", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Contact", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ContactAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContactAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsEnable", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsEnable", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CheckType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AllowCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AllowCount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AllowProgramType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AllowProgramType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UpdateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TCU_UP_UserInfo] ([MachineCode], [UserName], [Company], [Contact], [ContactAddress], [IsEnable], [CheckType], [AllowCount], [EndDate], [AllowProgramType], [Remark], [UpdateDate], [UpdateLog]) VALUES (@MachineCode, @UserName, @Company, @Contact, @ContactAddress, @IsEnable, @CheckType, @AllowCount, @EndDate, @AllowProgramType, @Remark, @UpdateDate, @UpdateLog);
SELECT MachineCode, UserName, Company, Contact, ContactAddress, IsEnable, CheckType, AllowCount, EndDate, AllowProgramType, Remark, UpdateDate, UpdateLog FROM TCU_UP_UserInfo WHERE (MachineCode = @MachineCode)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MachineCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MachineCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Company", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Company", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Contact", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Contact", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContactAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContactAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsEnable", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsEnable", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CheckType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AllowCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AllowCount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AllowProgramType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AllowProgramType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateLog", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateLog", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TCU_UP_UserInfo] SET [MachineCode] = @MachineCode, [UserName] = @UserName, [Company] = @Company, [Contact] = @Contact, [ContactAddress] = @ContactAddress, [IsEnable] = @IsEnable, [CheckType] = @CheckType, [AllowCount] = @AllowCount, [EndDate] = @EndDate, [AllowProgramType] = @AllowProgramType, [Remark] = @Remark, [UpdateDate] = @UpdateDate, [UpdateLog] = @UpdateLog WHERE (([MachineCode] = @Original_MachineCode) AND ([UserName] = @Original_UserName) AND ([Company] = @Original_Company) AND ([Contact] = @Original_Contact) AND ([ContactAddress] = @Original_ContactAddress) AND ([IsEnable] = @Original_IsEnable) AND ([CheckType] = @Original_CheckType) AND ([AllowCount] = @Original_AllowCount) AND ([EndDate] = @Original_EndDate) AND ([AllowProgramType] = @Original_AllowProgramType) AND ([UpdateDate] = @Original_UpdateDate));
SELECT MachineCode, UserName, Company, Contact, ContactAddress, IsEnable, CheckType, AllowCount, EndDate, AllowProgramType, Remark, UpdateDate, UpdateLog FROM TCU_UP_UserInfo WHERE (MachineCode = @MachineCode)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MachineCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MachineCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Company", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Company", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Contact", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Contact", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContactAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContactAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsEnable", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsEnable", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CheckType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AllowCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AllowCount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AllowProgramType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AllowProgramType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateLog", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateLog", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MachineCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MachineCode", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Company", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Company", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Contact", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Contact", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ContactAddress", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContactAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsEnable", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsEnable", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CheckType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AllowCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AllowCount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AllowProgramType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AllowProgramType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UpdateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MachineCode, UserName, Company, Contact, ContactAddress, IsEnable, CheckTy" +
                "pe, AllowCount, EndDate, AllowProgramType, Remark, UpdateDate, UpdateLog FROM db" +
                "o.TCU_UP_UserInfo";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.TCU_UP_UserInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.TCU_UP_UserInfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.TCU_UP_UserInfoDataTable dataTable = new RundarWebServerDataSet.TCU_UP_UserInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.TCU_UP_UserInfoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TCU_UP_UserInfo");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_MachineCode, string Original_UserName, string Original_Company, string Original_Contact, string Original_ContactAddress, bool Original_IsEnable, int Original_CheckType, int Original_AllowCount, System.DateTime Original_EndDate, int Original_AllowProgramType, System.DateTime Original_UpdateDate) {
            if ((Original_MachineCode == null)) {
                throw new global::System.ArgumentNullException("Original_MachineCode");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_MachineCode));
            }
            if ((Original_UserName == null)) {
                throw new global::System.ArgumentNullException("Original_UserName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_UserName));
            }
            if ((Original_Company == null)) {
                throw new global::System.ArgumentNullException("Original_Company");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Company));
            }
            if ((Original_Contact == null)) {
                throw new global::System.ArgumentNullException("Original_Contact");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Contact));
            }
            if ((Original_ContactAddress == null)) {
                throw new global::System.ArgumentNullException("Original_ContactAddress");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_ContactAddress));
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_IsEnable));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_CheckType));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_AllowCount));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_EndDate));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((int)(Original_AllowProgramType));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_UpdateDate));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string MachineCode, string UserName, string Company, string Contact, string ContactAddress, bool IsEnable, int CheckType, int AllowCount, System.DateTime EndDate, int AllowProgramType, string Remark, System.DateTime UpdateDate, string UpdateLog) {
            if ((MachineCode == null)) {
                throw new global::System.ArgumentNullException("MachineCode");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(MachineCode));
            }
            if ((UserName == null)) {
                throw new global::System.ArgumentNullException("UserName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(UserName));
            }
            if ((Company == null)) {
                throw new global::System.ArgumentNullException("Company");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Company));
            }
            if ((Contact == null)) {
                throw new global::System.ArgumentNullException("Contact");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Contact));
            }
            if ((ContactAddress == null)) {
                throw new global::System.ArgumentNullException("ContactAddress");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ContactAddress));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(IsEnable));
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(CheckType));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(AllowCount));
            this.Adapter.InsertCommand.Parameters[8].Value = ((System.DateTime)(EndDate));
            this.Adapter.InsertCommand.Parameters[9].Value = ((int)(AllowProgramType));
            if ((Remark == null)) {
                throw new global::System.ArgumentNullException("Remark");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Remark));
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((System.DateTime)(UpdateDate));
            if ((UpdateLog == null)) {
                throw new global::System.ArgumentNullException("UpdateLog");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(UpdateLog));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string MachineCode, 
                    string UserName, 
                    string Company, 
                    string Contact, 
                    string ContactAddress, 
                    bool IsEnable, 
                    int CheckType, 
                    int AllowCount, 
                    System.DateTime EndDate, 
                    int AllowProgramType, 
                    string Remark, 
                    System.DateTime UpdateDate, 
                    string UpdateLog, 
                    string Original_MachineCode, 
                    string Original_UserName, 
                    string Original_Company, 
                    string Original_Contact, 
                    string Original_ContactAddress, 
                    bool Original_IsEnable, 
                    int Original_CheckType, 
                    int Original_AllowCount, 
                    System.DateTime Original_EndDate, 
                    int Original_AllowProgramType, 
                    System.DateTime Original_UpdateDate) {
            if ((MachineCode == null)) {
                throw new global::System.ArgumentNullException("MachineCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(MachineCode));
            }
            if ((UserName == null)) {
                throw new global::System.ArgumentNullException("UserName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(UserName));
            }
            if ((Company == null)) {
                throw new global::System.ArgumentNullException("Company");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Company));
            }
            if ((Contact == null)) {
                throw new global::System.ArgumentNullException("Contact");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Contact));
            }
            if ((ContactAddress == null)) {
                throw new global::System.ArgumentNullException("ContactAddress");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(ContactAddress));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(IsEnable));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(CheckType));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(AllowCount));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(EndDate));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(AllowProgramType));
            if ((Remark == null)) {
                throw new global::System.ArgumentNullException("Remark");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Remark));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(UpdateDate));
            if ((UpdateLog == null)) {
                throw new global::System.ArgumentNullException("UpdateLog");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(UpdateLog));
            }
            if ((Original_MachineCode == null)) {
                throw new global::System.ArgumentNullException("Original_MachineCode");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_MachineCode));
            }
            if ((Original_UserName == null)) {
                throw new global::System.ArgumentNullException("Original_UserName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_UserName));
            }
            if ((Original_Company == null)) {
                throw new global::System.ArgumentNullException("Original_Company");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_Company));
            }
            if ((Original_Contact == null)) {
                throw new global::System.ArgumentNullException("Original_Contact");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_Contact));
            }
            if ((Original_ContactAddress == null)) {
                throw new global::System.ArgumentNullException("Original_ContactAddress");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_ContactAddress));
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((bool)(Original_IsEnable));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_CheckType));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_AllowCount));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(Original_EndDate));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_AllowProgramType));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((System.DateTime)(Original_UpdateDate));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string UserName, 
                    string Company, 
                    string Contact, 
                    string ContactAddress, 
                    bool IsEnable, 
                    int CheckType, 
                    int AllowCount, 
                    System.DateTime EndDate, 
                    int AllowProgramType, 
                    string Remark, 
                    System.DateTime UpdateDate, 
                    string UpdateLog, 
                    string Original_MachineCode, 
                    string Original_UserName, 
                    string Original_Company, 
                    string Original_Contact, 
                    string Original_ContactAddress, 
                    bool Original_IsEnable, 
                    int Original_CheckType, 
                    int Original_AllowCount, 
                    System.DateTime Original_EndDate, 
                    int Original_AllowProgramType, 
                    System.DateTime Original_UpdateDate) {
            return this.Update(Original_MachineCode, UserName, Company, Contact, ContactAddress, IsEnable, CheckType, AllowCount, EndDate, AllowProgramType, Remark, UpdateDate, UpdateLog, Original_MachineCode, Original_UserName, Original_Company, Original_Contact, Original_ContactAddress, Original_IsEnable, Original_CheckType, Original_AllowCount, Original_EndDate, Original_AllowProgramType, Original_UpdateDate);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TCU_UP_VehicleModelTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TCU_UP_VehicleModelTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TCU_UP_VehicleModel";
            tableMapping.ColumnMappings.Add("VehicleModel", "VehicleModel");
            tableMapping.ColumnMappings.Add("Remark", "Remark");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TCU_UP_VehicleModel] WHERE (([VehicleModel] = @Original_Vehicl" +
                "eModel))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VehicleModel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VehicleModel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TCU_UP_VehicleModel] ([VehicleModel], [Remark]) VALUES (@Vehic" +
                "leModel, @Remark);\r\nSELECT VehicleModel, Remark FROM TCU_UP_VehicleModel WHERE (" +
                "VehicleModel = @VehicleModel)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VehicleModel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VehicleModel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TCU_UP_VehicleModel] SET [VehicleModel] = @VehicleModel, [Remark] =" +
                " @Remark WHERE (([VehicleModel] = @Original_VehicleModel));\r\nSELECT VehicleModel" +
                ", Remark FROM TCU_UP_VehicleModel WHERE (VehicleModel = @VehicleModel)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VehicleModel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VehicleModel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VehicleModel", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VehicleModel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT VehicleModel, Remark FROM dbo.TCU_UP_VehicleModel";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.TCU_UP_VehicleModelDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.TCU_UP_VehicleModelDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.TCU_UP_VehicleModelDataTable dataTable = new RundarWebServerDataSet.TCU_UP_VehicleModelDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet.TCU_UP_VehicleModelDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(RundarWebServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TCU_UP_VehicleModel");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_VehicleModel) {
            if ((Original_VehicleModel == null)) {
                throw new global::System.ArgumentNullException("Original_VehicleModel");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_VehicleModel));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string VehicleModel, string Remark) {
            if ((VehicleModel == null)) {
                throw new global::System.ArgumentNullException("VehicleModel");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(VehicleModel));
            }
            if ((Remark == null)) {
                throw new global::System.ArgumentNullException("Remark");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Remark));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string VehicleModel, string Remark, string Original_VehicleModel) {
            if ((VehicleModel == null)) {
                throw new global::System.ArgumentNullException("VehicleModel");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(VehicleModel));
            }
            if ((Remark == null)) {
                throw new global::System.ArgumentNullException("Remark");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Remark));
            }
            if ((Original_VehicleModel == null)) {
                throw new global::System.ArgumentNullException("Original_VehicleModel");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_VehicleModel));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Remark, string Original_VehicleModel) {
            return this.Update(Original_VehicleModel, Remark, Original_VehicleModel);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View_CCAR_QuestionTrackListTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View_CCAR_QuestionTrackListTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View_CCAR_QuestionTrackList";
            tableMapping.ColumnMappings.Add("序号", "序号");
            tableMapping.ColumnMappings.Add("父级编号", "父级编号");
            tableMapping.ColumnMappings.Add("供应商负责人", "供应商负责人");
            tableMapping.ColumnMappings.Add("零件名称", "零件名称");
            tableMapping.ColumnMappings.Add("图形型号", "图形型号");
            tableMapping.ColumnMappings.Add("规格", "规格");
            tableMapping.ColumnMappings.Add("问题描述", "问题描述");
            tableMapping.ColumnMappings.Add("供应商接受时间", "供应商接受时间");
            tableMapping.ColumnMappings.Add("解决方案", "解决方案");
            tableMapping.ColumnMappings.Add("发现时间", "发现时间");
            tableMapping.ColumnMappings.Add("进行状态", "进行状态");
            tableMapping.ColumnMappings.Add("供应商结束时间", "供应商结束时间");
            tableMapping.ColumnMappings.Add("最后审核时间", "最后审核时间");
            tableMapping.ColumnMappings.Add("备注", "备注");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT 序号, 父级编号, 供应商负责人, 零件名称, 图形型号, 规格, 问题描述, 供应商接受时间, 解决方案, 发现时间, 进行状态, 供应商结束时间" +
                ", 最后审核时间, 备注 FROM dbo.View_CCAR_QuestionTrackList";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.View_CCAR_QuestionTrackListDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.View_CCAR_QuestionTrackListDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.View_CCAR_QuestionTrackListDataTable dataTable = new RundarWebServerDataSet.View_CCAR_QuestionTrackListDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View_OF_LoginLogTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View_OF_LoginLogTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View_OF_LoginLog";
            tableMapping.ColumnMappings.Add("序号", "序号");
            tableMapping.ColumnMappings.Add("用户编码", "用户编码");
            tableMapping.ColumnMappings.Add("用户姓名", "用户姓名");
            tableMapping.ColumnMappings.Add("最近登录日期", "最近登录日期");
            tableMapping.ColumnMappings.Add("登录IP地址", "登录IP地址");
            tableMapping.ColumnMappings.Add("登录次数", "登录次数");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT 序号, 用户编码, 用户姓名, 最近登录日期, 登录IP地址, 登录次数 FROM dbo.View_OF_LoginLog";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.View_OF_LoginLogDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.View_OF_LoginLogDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.View_OF_LoginLogDataTable dataTable = new RundarWebServerDataSet.View_OF_LoginLogDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View_OF_NewsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View_OF_NewsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View_OF_News";
            tableMapping.ColumnMappings.Add("新闻ID", "新闻ID");
            tableMapping.ColumnMappings.Add("新闻标题", "新闻标题");
            tableMapping.ColumnMappings.Add("新闻URL", "新闻URL");
            tableMapping.ColumnMappings.Add("发布时间", "发布时间");
            tableMapping.ColumnMappings.Add("新闻类别", "新闻类别");
            tableMapping.ColumnMappings.Add("新闻类别名称", "新闻类别名称");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT 新闻ID, 新闻标题, 新闻URL, 发布时间, 新闻类别, 新闻类别名称 FROM dbo.View_OF_News";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.View_OF_NewsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.View_OF_NewsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.View_OF_NewsDataTable dataTable = new RundarWebServerDataSet.View_OF_NewsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View_OF_OrderForm_ArrivalInfoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View_OF_OrderForm_ArrivalInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View_OF_OrderForm_ArrivalInfo";
            tableMapping.ColumnMappings.Add("订单物品列表ID", "订单物品列表ID");
            tableMapping.ColumnMappings.Add("入库单号", "入库单号");
            tableMapping.ColumnMappings.Add("批次号", "批次号");
            tableMapping.ColumnMappings.Add("实际到货日期", "实际到货日期");
            tableMapping.ColumnMappings.Add("实际到货数", "实际到货数");
            tableMapping.ColumnMappings.Add("合格数", "合格数");
            tableMapping.ColumnMappings.Add("让步数", "让步数");
            tableMapping.ColumnMappings.Add("检验破坏数", "检验破坏数");
            tableMapping.ColumnMappings.Add("退货数", "退货数");
            tableMapping.ColumnMappings.Add("质量信息", "质量信息");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT 订单物品列表ID, 入库单号, 批次号, 实际到货日期, 实际到货数, 合格数, 让步数, 检验破坏数, 退货数, 质量信息 FROM dbo.Vi" +
                "ew_OF_OrderForm_ArrivalInfo";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.View_OF_OrderForm_ArrivalInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.View_OF_OrderForm_ArrivalInfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.View_OF_OrderForm_ArrivalInfoDataTable dataTable = new RundarWebServerDataSet.View_OF_OrderForm_ArrivalInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View_OF_OrderForm_IntegratedArrivalInfoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View_OF_OrderForm_IntegratedArrivalInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View_OF_OrderForm_IntegratedArrivalInfo";
            tableMapping.ColumnMappings.Add("订单号", "订单号");
            tableMapping.ColumnMappings.Add("图号型号", "图号型号");
            tableMapping.ColumnMappings.Add("物品名称", "物品名称");
            tableMapping.ColumnMappings.Add("规格", "规格");
            tableMapping.ColumnMappings.Add("要求到货日期", "要求到货日期");
            tableMapping.ColumnMappings.Add("订货数量", "订货数量");
            tableMapping.ColumnMappings.Add("入库单号", "入库单号");
            tableMapping.ColumnMappings.Add("批次号", "批次号");
            tableMapping.ColumnMappings.Add("实际到货日期", "实际到货日期");
            tableMapping.ColumnMappings.Add("实际到货数", "实际到货数");
            tableMapping.ColumnMappings.Add("合格数", "合格数");
            tableMapping.ColumnMappings.Add("让步数", "让步数");
            tableMapping.ColumnMappings.Add("检验破坏数", "检验破坏数");
            tableMapping.ColumnMappings.Add("退货数", "退货数");
            tableMapping.ColumnMappings.Add("质量信息", "质量信息");
            tableMapping.ColumnMappings.Add("供货单位", "供货单位");
            tableMapping.ColumnMappings.Add("采购员", "采购员");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT 订单号, 图号型号, 物品名称, 规格, 要求到货日期, 订货数量, 入库单号, 批次号, 实际到货日期, 实际到货数, 合格数, 让步数, 检验破" +
                "坏数, 退货数, 质量信息, 供货单位, 采购员 FROM dbo.View_OF_OrderForm_IntegratedArrivalInfo";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.View_OF_OrderForm_IntegratedArrivalInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.View_OF_OrderForm_IntegratedArrivalInfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.View_OF_OrderForm_IntegratedArrivalInfoDataTable dataTable = new RundarWebServerDataSet.View_OF_OrderForm_IntegratedArrivalInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View_OF_OrderFormInfoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View_OF_OrderFormInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View_OF_OrderFormInfo";
            tableMapping.ColumnMappings.Add("订单号", "订单号");
            tableMapping.ColumnMappings.Add("供应商", "供应商");
            tableMapping.ColumnMappings.Add("确认订单", "确认订单");
            tableMapping.ColumnMappings.Add("供应商处理状态", "供应商处理状态");
            tableMapping.ColumnMappings.Add("物品列表ID", "物品列表ID");
            tableMapping.ColumnMappings.Add("图号型号", "图号型号");
            tableMapping.ColumnMappings.Add("物品名称", "物品名称");
            tableMapping.ColumnMappings.Add("规格", "规格");
            tableMapping.ColumnMappings.Add("订货数量", "订货数量");
            tableMapping.ColumnMappings.Add("要求到货日期", "要求到货日期");
            tableMapping.ColumnMappings.Add("入库数", "入库数");
            tableMapping.ColumnMappings.Add("让步数", "让步数");
            tableMapping.ColumnMappings.Add("退货数", "退货数");
            tableMapping.ColumnMappings.Add("检验破坏数", "检验破坏数");
            tableMapping.ColumnMappings.Add("订货人编号", "订货人编号");
            tableMapping.ColumnMappings.Add("订货人", "订货人");
            tableMapping.ColumnMappings.Add("创建日期", "创建日期");
            tableMapping.ColumnMappings.Add("供应商联系人", "供应商联系人");
            tableMapping.ColumnMappings.Add("供应商联系方式", "供应商联系方式");
            tableMapping.ColumnMappings.Add("备注", "备注");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT 订单号, 供应商, 确认订单, 供应商处理状态, 物品列表ID, 图号型号, 物品名称, 规格, 订货数量, 要求到货日期, 入库数, 让步数, 退" +
                "货数, 检验破坏数, 订货人编号, 订货人, 创建日期, 供应商联系人, 供应商联系方式, 备注 FROM dbo.View_OF_OrderFormInfo";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.View_OF_OrderFormInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.View_OF_OrderFormInfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.View_OF_OrderFormInfoDataTable dataTable = new RundarWebServerDataSet.View_OF_OrderFormInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View_S_AfterServiceTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View_S_AfterServiceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View_S_AfterService";
            tableMapping.ColumnMappings.Add("序号", "序号");
            tableMapping.ColumnMappings.Add("单据号", "单据号");
            tableMapping.ColumnMappings.Add("单据状态", "单据状态");
            tableMapping.ColumnMappings.Add("信息来源", "信息来源");
            tableMapping.ColumnMappings.Add("函电类别", "函电类别");
            tableMapping.ColumnMappings.Add("内容类别", "内容类别");
            tableMapping.ColumnMappings.Add("接函电人", "接函电人");
            tableMapping.ColumnMappings.Add("接函电时间", "接函电时间");
            tableMapping.ColumnMappings.Add("服务站名称", "服务站名称");
            tableMapping.ColumnMappings.Add("联系电话", "联系电话");
            tableMapping.ColumnMappings.Add("用户姓名", "用户姓名");
            tableMapping.ColumnMappings.Add("用户电话", "用户电话");
            tableMapping.ColumnMappings.Add("用户住址", "用户住址");
            tableMapping.ColumnMappings.Add("车型", "车型");
            tableMapping.ColumnMappings.Add("变速箱型号", "变速箱型号");
            tableMapping.ColumnMappings.Add("变速箱编号", "变速箱编号");
            tableMapping.ColumnMappings.Add("车架号", "车架号");
            tableMapping.ColumnMappings.Add("故障地点", "故障地点");
            tableMapping.ColumnMappings.Add("购车时间", "购车时间");
            tableMapping.ColumnMappings.Add("行驶里程", "行驶里程");
            tableMapping.ColumnMappings.Add("使用性质", "使用性质");
            tableMapping.ColumnMappings.Add("用户态度", "用户态度");
            tableMapping.ColumnMappings.Add("故障简叙", "故障简叙");
            tableMapping.ColumnMappings.Add("客服中心处理意见", "客服中心处理意见");
            tableMapping.ColumnMappings.Add("处理方式", "处理方式");
            tableMapping.ColumnMappings.Add("接单处理人", "接单处理人");
            tableMapping.ColumnMappings.Add("接单时间", "接单时间");
            tableMapping.ColumnMappings.Add("诊断及测试情况", "诊断及测试情况");
            tableMapping.ColumnMappings.Add("处理方案", "处理方案");
            tableMapping.ColumnMappings.Add("处理结果", "处理结果");
            tableMapping.ColumnMappings.Add("审核人", "审核人");
            tableMapping.ColumnMappings.Add("审核回访时间", "审核回访时间");
            tableMapping.ColumnMappings.Add("维修质量", "维修质量");
            tableMapping.ColumnMappings.Add("服务态度", "服务态度");
            tableMapping.ColumnMappings.Add("是否收费", "是否收费");
            tableMapping.ColumnMappings.Add("金额", "金额");
            tableMapping.ColumnMappings.Add("故障处理效果确认", "故障处理效果确认");
            tableMapping.ColumnMappings.Add("回访人", "回访人");
            tableMapping.ColumnMappings.Add("回访时间", "回访时间");
            tableMapping.ColumnMappings.Add("反馈单号", "反馈单号");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT 序号, 单据号, 单据状态, 信息来源, 函电类别, 内容类别, 接函电人, 接函电时间, 服务站名称, 联系电话, 用户姓名, 用户电话, 用户住址, 车型, 变速箱型号, 变速箱编号, 车架号, 故障地点, 购车时间, 行驶里程, 使用性质, 用户态度, 故障简叙, 客服中心处理意见, 处理方式, 接单处理人, 接单时间, 诊断及测试情况, 处理方案, 处理结果, 审核人, 审核回访时间, 维修质量, 服务态度, 是否收费, 金额, 故障处理效果确认, 回访人, 回访时间, 反馈单号 FROM dbo.View_S_AfterService";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.View_S_AfterServiceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.View_S_AfterServiceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.View_S_AfterServiceDataTable dataTable = new RundarWebServerDataSet.View_S_AfterServiceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View_S_MessageSourceTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View_S_MessageSourceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View_S_MessageSource";
            tableMapping.ColumnMappings.Add("来源编号", "来源编号");
            tableMapping.ColumnMappings.Add("来源", "来源");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT 来源编号, 来源 FROM dbo.View_S_MessageSource";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.View_S_MessageSourceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.View_S_MessageSourceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.View_S_MessageSourceDataTable dataTable = new RundarWebServerDataSet.View_S_MessageSourceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View_S_ServiceFeedBackTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View_S_ServiceFeedBackTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View_S_ServiceFeedBack";
            tableMapping.ColumnMappings.Add("反馈单号", "反馈单号");
            tableMapping.ColumnMappings.Add("单据状态", "单据状态");
            tableMapping.ColumnMappings.Add("关联号", "关联号");
            tableMapping.ColumnMappings.Add("信息来源", "信息来源");
            tableMapping.ColumnMappings.Add("服务站名", "服务站名");
            tableMapping.ColumnMappings.Add("车型", "车型");
            tableMapping.ColumnMappings.Add("CVT型号", "CVT型号");
            tableMapping.ColumnMappings.Add("CVT编号", "CVT编号");
            tableMapping.ColumnMappings.Add("车架号", "车架号");
            tableMapping.ColumnMappings.Add("客户姓名", "客户姓名");
            tableMapping.ColumnMappings.Add("反馈人", "反馈人");
            tableMapping.ColumnMappings.Add("反馈日期", "反馈日期");
            tableMapping.ColumnMappings.Add("责任部门", "责任部门");
            tableMapping.ColumnMappings.Add("责任人", "责任人");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT 反馈单号, 单据状态, 关联号, 信息来源, 服务站名, 车型, CVT型号, CVT编号, 车架号, 客户姓名, 反馈人, 反馈日期, 责任部门," +
                " 责任人 FROM dbo.View_S_ServiceFeedBack";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.View_S_ServiceFeedBackDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.View_S_ServiceFeedBackDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.View_S_ServiceFeedBackDataTable dataTable = new RundarWebServerDataSet.View_S_ServiceFeedBackDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View_TCU_UP_DownloadLogTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View_TCU_UP_DownloadLogTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View_TCU_UP_DownloadLog";
            tableMapping.ColumnMappings.Add("序号", "序号");
            tableMapping.ColumnMappings.Add("用户名", "用户名");
            tableMapping.ColumnMappings.Add("公司名称", "公司名称");
            tableMapping.ColumnMappings.Add("联系方式", "联系方式");
            tableMapping.ColumnMappings.Add("联系地址", "联系地址");
            tableMapping.ColumnMappings.Add("备注", "备注");
            tableMapping.ColumnMappings.Add("数据包类型名称", "数据包类型名称");
            tableMapping.ColumnMappings.Add("数据包版本", "数据包版本");
            tableMapping.ColumnMappings.Add("下载日期", "下载日期");
            tableMapping.ColumnMappings.Add("IP地址", "IP地址");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT 序号, 用户名, 公司名称, 联系方式, 联系地址, 备注, 数据包类型名称, 数据包版本, 下载日期, IP地址 FROM dbo.View_TC" +
                "U_UP_DownloadLog";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.View_TCU_UP_DownloadLogDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.View_TCU_UP_DownloadLogDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.View_TCU_UP_DownloadLogDataTable dataTable = new RundarWebServerDataSet.View_TCU_UP_DownloadLogDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View_TCU_UP_FILETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View_TCU_UP_FILETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View_TCU_UP_FILE";
            tableMapping.ColumnMappings.Add("序号", "序号");
            tableMapping.ColumnMappings.Add("数据包类型编号", "数据包类型编号");
            tableMapping.ColumnMappings.Add("数据包类型名称", "数据包类型名称");
            tableMapping.ColumnMappings.Add("程序版本", "程序版本");
            tableMapping.ColumnMappings.Add("版本说明", "版本说明");
            tableMapping.ColumnMappings.Add("文件名称", "文件名称");
            tableMapping.ColumnMappings.Add("文件内容", "文件内容");
            tableMapping.ColumnMappings.Add("文件大小", "文件大小");
            tableMapping.ColumnMappings.Add("文件大小说明", "文件大小说明");
            tableMapping.ColumnMappings.Add("上传日期", "上传日期");
            tableMapping.ColumnMappings.Add("备注", "备注");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT 序号, 数据包类型编号, 数据包类型名称, 程序版本, 版本说明, 文件名称, 文件内容, 文件大小, 文件大小说明, 上传日期, 备注 FROM " +
                "dbo.View_TCU_UP_FILE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.View_TCU_UP_FILEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.View_TCU_UP_FILEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.View_TCU_UP_FILEDataTable dataTable = new RundarWebServerDataSet.View_TCU_UP_FILEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View_TCU_UP_PROGRAM_UPDATE_LOGTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View_TCU_UP_PROGRAM_UPDATE_LOGTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View_TCU_UP_PROGRAM_UPDATE_LOG";
            tableMapping.ColumnMappings.Add("序号", "序号");
            tableMapping.ColumnMappings.Add("车型", "车型");
            tableMapping.ColumnMappings.Add("程序版本", "程序版本");
            tableMapping.ColumnMappings.Add("更新日期", "更新日期");
            tableMapping.ColumnMappings.Add("更新说明", "更新说明");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT 序号, 车型, 程序版本, 更新日期, 更新说明 FROM dbo.View_TCU_UP_PROGRAM_UPDATE_LOG";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.View_TCU_UP_PROGRAM_UPDATE_LOGDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.View_TCU_UP_PROGRAM_UPDATE_LOGDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.View_TCU_UP_PROGRAM_UPDATE_LOGDataTable dataTable = new RundarWebServerDataSet.View_TCU_UP_PROGRAM_UPDATE_LOGDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View_TCU_UP_ProgramTypeTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View_TCU_UP_ProgramTypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View_TCU_UP_ProgramType";
            tableMapping.ColumnMappings.Add("数据包类型编号", "数据包类型编号");
            tableMapping.ColumnMappings.Add("数据包类型名称", "数据包类型名称");
            tableMapping.ColumnMappings.Add("备注", "备注");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT 数据包类型编号, 数据包类型名称, 备注 FROM dbo.View_TCU_UP_ProgramType";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.View_TCU_UP_ProgramTypeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.View_TCU_UP_ProgramTypeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.View_TCU_UP_ProgramTypeDataTable dataTable = new RundarWebServerDataSet.View_TCU_UP_ProgramTypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View_TCU_UP_UserInfoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View_TCU_UP_UserInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View_TCU_UP_UserInfo";
            tableMapping.ColumnMappings.Add("MachineCode", "MachineCode");
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            tableMapping.ColumnMappings.Add("IsEnable", "IsEnable");
            tableMapping.ColumnMappings.Add("CheckType", "CheckType");
            tableMapping.ColumnMappings.Add("AllowCount", "AllowCount");
            tableMapping.ColumnMappings.Add("EndDate", "EndDate");
            tableMapping.ColumnMappings.Add("AllowProgramType", "AllowProgramType");
            tableMapping.ColumnMappings.Add("ProgramTypeName", "ProgramTypeName");
            tableMapping.ColumnMappings.Add("Company", "Company");
            tableMapping.ColumnMappings.Add("Contact", "Contact");
            tableMapping.ColumnMappings.Add("ContactAddress", "ContactAddress");
            tableMapping.ColumnMappings.Add("Remark", "Remark");
            tableMapping.ColumnMappings.Add("UpdateDate", "UpdateDate");
            tableMapping.ColumnMappings.Add("UpdateLog", "UpdateLog");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MachineCode, UserName, IsEnable, CheckType, AllowCount, EndDate, AllowProg" +
                "ramType, ProgramTypeName, Company, Contact, ContactAddress, Remark, UpdateDate, " +
                "UpdateLog FROM dbo.View_TCU_UP_UserInfo";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.View_TCU_UP_UserInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.View_TCU_UP_UserInfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.View_TCU_UP_UserInfoDataTable dataTable = new RundarWebServerDataSet.View_TCU_UP_UserInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View_TCU_UP_VehicleModelTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View_TCU_UP_VehicleModelTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View_TCU_UP_VehicleModel";
            tableMapping.ColumnMappings.Add("车型", "车型");
            tableMapping.ColumnMappings.Add("备注", "备注");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT 车型, 备注 FROM dbo.View_TCU_UP_VehicleModel";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.View_TCU_UP_VehicleModelDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.View_TCU_UP_VehicleModelDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.View_TCU_UP_VehicleModelDataTable dataTable = new RundarWebServerDataSet.View_TCU_UP_VehicleModelDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View_TCU_UP_WRITE_LOGTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View_TCU_UP_WRITE_LOGTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View_TCU_UP_WRITE_LOG";
            tableMapping.ColumnMappings.Add("序号", "序号");
            tableMapping.ColumnMappings.Add("TCU编号", "TCU编号");
            tableMapping.ColumnMappings.Add("车型", "车型");
            tableMapping.ColumnMappings.Add("烧写版本", "烧写版本");
            tableMapping.ColumnMappings.Add("烧写次数", "烧写次数");
            tableMapping.ColumnMappings.Add("烧写日期", "烧写日期");
            tableMapping.ColumnMappings.Add("烧写备注", "烧写备注");
            tableMapping.ColumnMappings.Add("用户名", "用户名");
            tableMapping.ColumnMappings.Add("数据包类别", "数据包类别");
            tableMapping.ColumnMappings.Add("公司名称", "公司名称");
            tableMapping.ColumnMappings.Add("联系方式", "联系方式");
            tableMapping.ColumnMappings.Add("联系地址", "联系地址");
            tableMapping.ColumnMappings.Add("用户备注", "用户备注");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT 序号, TCU编号, 车型, 烧写版本, 烧写次数, 烧写日期, 烧写备注, 用户名, 数据包类别, 公司名称, 联系方式, 联系地址, 用户备注 " +
                "FROM dbo.View_TCU_UP_WRITE_LOG";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.View_TCU_UP_WRITE_LOGDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.View_TCU_UP_WRITE_LOGDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.View_TCU_UP_WRITE_LOGDataTable dataTable = new RundarWebServerDataSet.View_TCU_UP_WRITE_LOGDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetNewsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetNewsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetNews";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Title", "Title");
            tableMapping.ColumnMappings.Add("NewsUrl", "NewsUrl");
            tableMapping.ColumnMappings.Add("NewsDate", "NewsDate");
            tableMapping.ColumnMappings.Add("NewsType", "NewsType");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetNews";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.GetNewsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.GetNewsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.GetNewsDataTable dataTable = new RundarWebServerDataSet.GetNewsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetServerTimeTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetServerTimeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetServerTime";
            tableMapping.ColumnMappings.Add("Column1", "Column1");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetServerTime";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.GetServerTimeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.GetServerTimeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RundarWebServerDataSet.GetServerTimeDataTable dataTable = new RundarWebServerDataSet.GetServerTimeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TCU_UP_GetFileTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TCU_UP_GetFileTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TCU_UP_GetFile";
            tableMapping.ColumnMappings.Add("FileContent", "FileContent");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.TCU_UP_GetFile";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MachineCode", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.TCU_UP_GetFileDataTable dataTable, string MachineCode) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((MachineCode == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MachineCode));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.TCU_UP_GetFileDataTable GetData(string MachineCode) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((MachineCode == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MachineCode));
            }
            RundarWebServerDataSet.TCU_UP_GetFileDataTable dataTable = new RundarWebServerDataSet.TCU_UP_GetFileDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TCU_UP_GetFileNoteInfoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TCU_UP_GetFileNoteInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TCU_UP_GetFileNoteInfo";
            tableMapping.ColumnMappings.Add("ProgramType", "ProgramType");
            tableMapping.ColumnMappings.Add("ProgramVersion", "ProgramVersion");
            tableMapping.ColumnMappings.Add("VersionDetail", "VersionDetail");
            tableMapping.ColumnMappings.Add("FileLength", "FileLength");
            tableMapping.ColumnMappings.Add("FileLengthDetail", "FileLengthDetail");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("Remark", "Remark");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.TCU_UP_GetFileNoteInfo";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MachineCode", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.TCU_UP_GetFileNoteInfoDataTable dataTable, string MachineCode) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((MachineCode == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MachineCode));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.TCU_UP_GetFileNoteInfoDataTable GetData(string MachineCode) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((MachineCode == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MachineCode));
            }
            RundarWebServerDataSet.TCU_UP_GetFileNoteInfoDataTable dataTable = new RundarWebServerDataSet.TCU_UP_GetFileNoteInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TCU_UP_GetUserInfoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TCU_UP_GetUserInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TCU_UP_GetUserInfo";
            tableMapping.ColumnMappings.Add("MachineCode", "MachineCode");
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            tableMapping.ColumnMappings.Add("Company", "Company");
            tableMapping.ColumnMappings.Add("Contact", "Contact");
            tableMapping.ColumnMappings.Add("ContactAddress", "ContactAddress");
            tableMapping.ColumnMappings.Add("IsEnable", "IsEnable");
            tableMapping.ColumnMappings.Add("CheckType", "CheckType");
            tableMapping.ColumnMappings.Add("AllowCount", "AllowCount");
            tableMapping.ColumnMappings.Add("EndDate", "EndDate");
            tableMapping.ColumnMappings.Add("AllowProgramType", "AllowProgramType");
            tableMapping.ColumnMappings.Add("Remark", "Remark");
            tableMapping.ColumnMappings.Add("UpdateDate", "UpdateDate");
            tableMapping.ColumnMappings.Add("UpdateLog", "UpdateLog");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.RundarWebServerConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.TCU_UP_GetUserInfo";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MachineCode", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RundarWebServerDataSet.TCU_UP_GetUserInfoDataTable dataTable, string MachineCode) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((MachineCode == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MachineCode));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RundarWebServerDataSet.TCU_UP_GetUserInfoDataTable GetData(string MachineCode) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((MachineCode == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(MachineCode));
            }
            RundarWebServerDataSet.TCU_UP_GetUserInfoDataTable dataTable = new RundarWebServerDataSet.TCU_UP_GetUserInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class QueriesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.IDbCommand[] _commandCollection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.IDbCommand[4];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Connection = new global::System.Data.SqlClient.SqlConnection(global::Expression.Properties.Settings.Default.RundarWebServerConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).CommandText = "dbo.TCU_UP_SaveDownloadLog";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MachineCode", global::System.Data.SqlDbType.VarChar, 200, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProgramType", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProgramVersion", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 18, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IpAddress", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Connection = new global::System.Data.SqlClient.SqlConnection(global::Expression.Properties.Settings.Default.RundarWebServerConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).CommandText = "dbo.TCU_UP_SaveTcuLog";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MachineCode", global::System.Data.SqlDbType.VarChar, 200, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TcuNumber", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VehicleModel", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Version", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WriteCount", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WriteDate", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Remark", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Connection = new global::System.Data.SqlClient.SqlConnection(global::Expression.Properties.Settings.Default.RundarWebServerConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).CommandText = "dbo.TCU_UP_UpdateMachineCode";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MachineCode", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewMachineCode", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Connection = new global::System.Data.SqlClient.SqlConnection(global::Expression.Properties.Settings.Default.RundarWebServerConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).CommandText = "dbo.TCU_UP_UpdateValidDateForUsers";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int TCU_UP_SaveDownloadLog(string MachineCode, global::System.Nullable<int> ProgramType, global::System.Nullable<decimal> ProgramVersion, string IpAddress) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            if ((MachineCode == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(MachineCode));
            }
            if ((ProgramType.HasValue == true)) {
                command.Parameters[2].Value = ((int)(ProgramType.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((ProgramVersion.HasValue == true)) {
                command.Parameters[3].Value = ((decimal)(ProgramVersion.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((IpAddress == null)) {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(IpAddress));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int TCU_UP_SaveTcuLog(string MachineCode, string TcuNumber, string VehicleModel, string Version, global::System.Nullable<int> WriteCount, string WriteDate, string Remark) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[1]));
            if ((MachineCode == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(MachineCode));
            }
            if ((TcuNumber == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(TcuNumber));
            }
            if ((VehicleModel == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(VehicleModel));
            }
            if ((Version == null)) {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(Version));
            }
            if ((WriteCount.HasValue == true)) {
                command.Parameters[5].Value = ((int)(WriteCount.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((WriteDate == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(WriteDate));
            }
            if ((Remark == null)) {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(Remark));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int TCU_UP_UpdateMachineCode(string MachineCode, string NewMachineCode) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[2]));
            if ((MachineCode == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(MachineCode));
            }
            if ((NewMachineCode == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(NewMachineCode));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int TCU_UP_UpdateValidDateForUsers() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[3]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private CCAR_QuestionTrackBillTableAdapter _cCAR_QuestionTrackBillTableAdapter;
        
        private CCAR_QuestionTrackListTableAdapter _cCAR_QuestionTrackListTableAdapter;
        
        private OF_AnswerTableAdapter _oF_AnswerTableAdapter;
        
        private OF_BillID_StatusTableAdapter _oF_BillID_StatusTableAdapter;
        
        private OF_BugCodeTableAdapter _oF_BugCodeTableAdapter;
        
        private OF_BugMessageInfoTableAdapter _oF_BugMessageInfoTableAdapter;
        
        private OF_CarBugStatusTableAdapter _oF_CarBugStatusTableAdapter;
        
        private OF_DownRecordTableAdapter _oF_DownRecordTableAdapter;
        
        private OF_LoginLogTableAdapter _oF_LoginLogTableAdapter;
        
        private OF_NewsTableAdapter _oF_NewsTableAdapter;
        
        private OF_NewsAudienceTableAdapter _oF_NewsAudienceTableAdapter;
        
        private OF_NewsFileTableAdapter _oF_NewsFileTableAdapter;
        
        private OF_NewsTypeTableAdapter _oF_NewsTypeTableAdapter;
        
        private OF_OrderForm_ArrivalInfoTableAdapter _oF_OrderForm_ArrivalInfoTableAdapter;
        
        private OF_OrderFormGoodsTableAdapter _oF_OrderFormGoodsTableAdapter;
        
        private OF_OrderFormInfoTableAdapter _oF_OrderFormInfoTableAdapter;
        
        private S_AfterServiceTableAdapter _s_AfterServiceTableAdapter;
        
        private S_CommtionTableAdapter _s_CommtionTableAdapter;
        
        private S_MessageSourceTableAdapter _s_MessageSourceTableAdapter;
        
        private S_ReplaceAccessoryTableAdapter _s_ReplaceAccessoryTableAdapter;
        
        private S_ServiceFeedBackTableAdapter _s_ServiceFeedBackTableAdapter;
        
        private S_ServiceFileDownTableAdapter _s_ServiceFileDownTableAdapter;
        
        private TCU_UP_DownloadLogTableAdapter _tCU_UP_DownloadLogTableAdapter;
        
        private TCU_UP_FILETableAdapter _tCU_UP_FILETableAdapter;
        
        private TCU_UP_LOGTableAdapter _tCU_UP_LOGTableAdapter;
        
        private TCU_UP_Program_Update_LogTableAdapter _tCU_UP_Program_Update_LogTableAdapter;
        
        private TCU_UP_ProgramTypeTableAdapter _tCU_UP_ProgramTypeTableAdapter;
        
        private TCU_UP_UserInfoTableAdapter _tCU_UP_UserInfoTableAdapter;
        
        private TCU_UP_VehicleModelTableAdapter _tCU_UP_VehicleModelTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public CCAR_QuestionTrackBillTableAdapter CCAR_QuestionTrackBillTableAdapter {
            get {
                return this._cCAR_QuestionTrackBillTableAdapter;
            }
            set {
                if (((this._cCAR_QuestionTrackBillTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._cCAR_QuestionTrackBillTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._cCAR_QuestionTrackBillTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public CCAR_QuestionTrackListTableAdapter CCAR_QuestionTrackListTableAdapter {
            get {
                return this._cCAR_QuestionTrackListTableAdapter;
            }
            set {
                if (((this._cCAR_QuestionTrackListTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._cCAR_QuestionTrackListTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._cCAR_QuestionTrackListTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public OF_AnswerTableAdapter OF_AnswerTableAdapter {
            get {
                return this._oF_AnswerTableAdapter;
            }
            set {
                if (((this._oF_AnswerTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._oF_AnswerTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._oF_AnswerTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public OF_BillID_StatusTableAdapter OF_BillID_StatusTableAdapter {
            get {
                return this._oF_BillID_StatusTableAdapter;
            }
            set {
                if (((this._oF_BillID_StatusTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._oF_BillID_StatusTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._oF_BillID_StatusTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public OF_BugCodeTableAdapter OF_BugCodeTableAdapter {
            get {
                return this._oF_BugCodeTableAdapter;
            }
            set {
                if (((this._oF_BugCodeTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._oF_BugCodeTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._oF_BugCodeTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public OF_BugMessageInfoTableAdapter OF_BugMessageInfoTableAdapter {
            get {
                return this._oF_BugMessageInfoTableAdapter;
            }
            set {
                if (((this._oF_BugMessageInfoTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._oF_BugMessageInfoTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._oF_BugMessageInfoTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public OF_CarBugStatusTableAdapter OF_CarBugStatusTableAdapter {
            get {
                return this._oF_CarBugStatusTableAdapter;
            }
            set {
                if (((this._oF_CarBugStatusTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._oF_CarBugStatusTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._oF_CarBugStatusTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public OF_DownRecordTableAdapter OF_DownRecordTableAdapter {
            get {
                return this._oF_DownRecordTableAdapter;
            }
            set {
                if (((this._oF_DownRecordTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._oF_DownRecordTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._oF_DownRecordTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public OF_LoginLogTableAdapter OF_LoginLogTableAdapter {
            get {
                return this._oF_LoginLogTableAdapter;
            }
            set {
                if (((this._oF_LoginLogTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._oF_LoginLogTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._oF_LoginLogTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public OF_NewsTableAdapter OF_NewsTableAdapter {
            get {
                return this._oF_NewsTableAdapter;
            }
            set {
                if (((this._oF_NewsTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._oF_NewsTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._oF_NewsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public OF_NewsAudienceTableAdapter OF_NewsAudienceTableAdapter {
            get {
                return this._oF_NewsAudienceTableAdapter;
            }
            set {
                if (((this._oF_NewsAudienceTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._oF_NewsAudienceTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._oF_NewsAudienceTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public OF_NewsFileTableAdapter OF_NewsFileTableAdapter {
            get {
                return this._oF_NewsFileTableAdapter;
            }
            set {
                if (((this._oF_NewsFileTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._oF_NewsFileTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._oF_NewsFileTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public OF_NewsTypeTableAdapter OF_NewsTypeTableAdapter {
            get {
                return this._oF_NewsTypeTableAdapter;
            }
            set {
                if (((this._oF_NewsTypeTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._oF_NewsTypeTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._oF_NewsTypeTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public OF_OrderForm_ArrivalInfoTableAdapter OF_OrderForm_ArrivalInfoTableAdapter {
            get {
                return this._oF_OrderForm_ArrivalInfoTableAdapter;
            }
            set {
                if (((this._oF_OrderForm_ArrivalInfoTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._oF_OrderForm_ArrivalInfoTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._oF_OrderForm_ArrivalInfoTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public OF_OrderFormGoodsTableAdapter OF_OrderFormGoodsTableAdapter {
            get {
                return this._oF_OrderFormGoodsTableAdapter;
            }
            set {
                if (((this._oF_OrderFormGoodsTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._oF_OrderFormGoodsTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._oF_OrderFormGoodsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public OF_OrderFormInfoTableAdapter OF_OrderFormInfoTableAdapter {
            get {
                return this._oF_OrderFormInfoTableAdapter;
            }
            set {
                if (((this._oF_OrderFormInfoTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._oF_OrderFormInfoTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._oF_OrderFormInfoTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public S_AfterServiceTableAdapter S_AfterServiceTableAdapter {
            get {
                return this._s_AfterServiceTableAdapter;
            }
            set {
                if (((this._s_AfterServiceTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._s_AfterServiceTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._s_AfterServiceTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public S_CommtionTableAdapter S_CommtionTableAdapter {
            get {
                return this._s_CommtionTableAdapter;
            }
            set {
                if (((this._s_CommtionTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._s_CommtionTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._s_CommtionTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public S_MessageSourceTableAdapter S_MessageSourceTableAdapter {
            get {
                return this._s_MessageSourceTableAdapter;
            }
            set {
                if (((this._s_MessageSourceTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._s_MessageSourceTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._s_MessageSourceTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public S_ReplaceAccessoryTableAdapter S_ReplaceAccessoryTableAdapter {
            get {
                return this._s_ReplaceAccessoryTableAdapter;
            }
            set {
                if (((this._s_ReplaceAccessoryTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._s_ReplaceAccessoryTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._s_ReplaceAccessoryTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public S_ServiceFeedBackTableAdapter S_ServiceFeedBackTableAdapter {
            get {
                return this._s_ServiceFeedBackTableAdapter;
            }
            set {
                if (((this._s_ServiceFeedBackTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._s_ServiceFeedBackTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._s_ServiceFeedBackTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public S_ServiceFileDownTableAdapter S_ServiceFileDownTableAdapter {
            get {
                return this._s_ServiceFileDownTableAdapter;
            }
            set {
                if (((this._s_ServiceFileDownTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._s_ServiceFileDownTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._s_ServiceFileDownTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TCU_UP_DownloadLogTableAdapter TCU_UP_DownloadLogTableAdapter {
            get {
                return this._tCU_UP_DownloadLogTableAdapter;
            }
            set {
                if (((this._tCU_UP_DownloadLogTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._tCU_UP_DownloadLogTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._tCU_UP_DownloadLogTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TCU_UP_FILETableAdapter TCU_UP_FILETableAdapter {
            get {
                return this._tCU_UP_FILETableAdapter;
            }
            set {
                if (((this._tCU_UP_FILETableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._tCU_UP_FILETableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._tCU_UP_FILETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TCU_UP_LOGTableAdapter TCU_UP_LOGTableAdapter {
            get {
                return this._tCU_UP_LOGTableAdapter;
            }
            set {
                if (((this._tCU_UP_LOGTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._tCU_UP_LOGTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._tCU_UP_LOGTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TCU_UP_Program_Update_LogTableAdapter TCU_UP_Program_Update_LogTableAdapter {
            get {
                return this._tCU_UP_Program_Update_LogTableAdapter;
            }
            set {
                if (((this._tCU_UP_Program_Update_LogTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._tCU_UP_Program_Update_LogTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._tCU_UP_Program_Update_LogTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TCU_UP_ProgramTypeTableAdapter TCU_UP_ProgramTypeTableAdapter {
            get {
                return this._tCU_UP_ProgramTypeTableAdapter;
            }
            set {
                if (((this._tCU_UP_ProgramTypeTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._tCU_UP_ProgramTypeTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._tCU_UP_ProgramTypeTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TCU_UP_UserInfoTableAdapter TCU_UP_UserInfoTableAdapter {
            get {
                return this._tCU_UP_UserInfoTableAdapter;
            }
            set {
                if (((this._tCU_UP_UserInfoTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._tCU_UP_UserInfoTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._tCU_UP_UserInfoTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TCU_UP_VehicleModelTableAdapter TCU_UP_VehicleModelTableAdapter {
            get {
                return this._tCU_UP_VehicleModelTableAdapter;
            }
            set {
                if (((this._tCU_UP_VehicleModelTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._tCU_UP_VehicleModelTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
                }
                this._tCU_UP_VehicleModelTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._cCAR_QuestionTrackBillTableAdapter != null) 
                            && (this._cCAR_QuestionTrackBillTableAdapter.Connection != null))) {
                    return this._cCAR_QuestionTrackBillTableAdapter.Connection;
                }
                if (((this._cCAR_QuestionTrackListTableAdapter != null) 
                            && (this._cCAR_QuestionTrackListTableAdapter.Connection != null))) {
                    return this._cCAR_QuestionTrackListTableAdapter.Connection;
                }
                if (((this._oF_AnswerTableAdapter != null) 
                            && (this._oF_AnswerTableAdapter.Connection != null))) {
                    return this._oF_AnswerTableAdapter.Connection;
                }
                if (((this._oF_BillID_StatusTableAdapter != null) 
                            && (this._oF_BillID_StatusTableAdapter.Connection != null))) {
                    return this._oF_BillID_StatusTableAdapter.Connection;
                }
                if (((this._oF_BugCodeTableAdapter != null) 
                            && (this._oF_BugCodeTableAdapter.Connection != null))) {
                    return this._oF_BugCodeTableAdapter.Connection;
                }
                if (((this._oF_BugMessageInfoTableAdapter != null) 
                            && (this._oF_BugMessageInfoTableAdapter.Connection != null))) {
                    return this._oF_BugMessageInfoTableAdapter.Connection;
                }
                if (((this._oF_CarBugStatusTableAdapter != null) 
                            && (this._oF_CarBugStatusTableAdapter.Connection != null))) {
                    return this._oF_CarBugStatusTableAdapter.Connection;
                }
                if (((this._oF_DownRecordTableAdapter != null) 
                            && (this._oF_DownRecordTableAdapter.Connection != null))) {
                    return this._oF_DownRecordTableAdapter.Connection;
                }
                if (((this._oF_LoginLogTableAdapter != null) 
                            && (this._oF_LoginLogTableAdapter.Connection != null))) {
                    return this._oF_LoginLogTableAdapter.Connection;
                }
                if (((this._oF_NewsTableAdapter != null) 
                            && (this._oF_NewsTableAdapter.Connection != null))) {
                    return this._oF_NewsTableAdapter.Connection;
                }
                if (((this._oF_NewsAudienceTableAdapter != null) 
                            && (this._oF_NewsAudienceTableAdapter.Connection != null))) {
                    return this._oF_NewsAudienceTableAdapter.Connection;
                }
                if (((this._oF_NewsFileTableAdapter != null) 
                            && (this._oF_NewsFileTableAdapter.Connection != null))) {
                    return this._oF_NewsFileTableAdapter.Connection;
                }
                if (((this._oF_NewsTypeTableAdapter != null) 
                            && (this._oF_NewsTypeTableAdapter.Connection != null))) {
                    return this._oF_NewsTypeTableAdapter.Connection;
                }
                if (((this._oF_OrderForm_ArrivalInfoTableAdapter != null) 
                            && (this._oF_OrderForm_ArrivalInfoTableAdapter.Connection != null))) {
                    return this._oF_OrderForm_ArrivalInfoTableAdapter.Connection;
                }
                if (((this._oF_OrderFormGoodsTableAdapter != null) 
                            && (this._oF_OrderFormGoodsTableAdapter.Connection != null))) {
                    return this._oF_OrderFormGoodsTableAdapter.Connection;
                }
                if (((this._oF_OrderFormInfoTableAdapter != null) 
                            && (this._oF_OrderFormInfoTableAdapter.Connection != null))) {
                    return this._oF_OrderFormInfoTableAdapter.Connection;
                }
                if (((this._s_AfterServiceTableAdapter != null) 
                            && (this._s_AfterServiceTableAdapter.Connection != null))) {
                    return this._s_AfterServiceTableAdapter.Connection;
                }
                if (((this._s_CommtionTableAdapter != null) 
                            && (this._s_CommtionTableAdapter.Connection != null))) {
                    return this._s_CommtionTableAdapter.Connection;
                }
                if (((this._s_MessageSourceTableAdapter != null) 
                            && (this._s_MessageSourceTableAdapter.Connection != null))) {
                    return this._s_MessageSourceTableAdapter.Connection;
                }
                if (((this._s_ReplaceAccessoryTableAdapter != null) 
                            && (this._s_ReplaceAccessoryTableAdapter.Connection != null))) {
                    return this._s_ReplaceAccessoryTableAdapter.Connection;
                }
                if (((this._s_ServiceFeedBackTableAdapter != null) 
                            && (this._s_ServiceFeedBackTableAdapter.Connection != null))) {
                    return this._s_ServiceFeedBackTableAdapter.Connection;
                }
                if (((this._s_ServiceFileDownTableAdapter != null) 
                            && (this._s_ServiceFileDownTableAdapter.Connection != null))) {
                    return this._s_ServiceFileDownTableAdapter.Connection;
                }
                if (((this._tCU_UP_DownloadLogTableAdapter != null) 
                            && (this._tCU_UP_DownloadLogTableAdapter.Connection != null))) {
                    return this._tCU_UP_DownloadLogTableAdapter.Connection;
                }
                if (((this._tCU_UP_FILETableAdapter != null) 
                            && (this._tCU_UP_FILETableAdapter.Connection != null))) {
                    return this._tCU_UP_FILETableAdapter.Connection;
                }
                if (((this._tCU_UP_LOGTableAdapter != null) 
                            && (this._tCU_UP_LOGTableAdapter.Connection != null))) {
                    return this._tCU_UP_LOGTableAdapter.Connection;
                }
                if (((this._tCU_UP_Program_Update_LogTableAdapter != null) 
                            && (this._tCU_UP_Program_Update_LogTableAdapter.Connection != null))) {
                    return this._tCU_UP_Program_Update_LogTableAdapter.Connection;
                }
                if (((this._tCU_UP_ProgramTypeTableAdapter != null) 
                            && (this._tCU_UP_ProgramTypeTableAdapter.Connection != null))) {
                    return this._tCU_UP_ProgramTypeTableAdapter.Connection;
                }
                if (((this._tCU_UP_UserInfoTableAdapter != null) 
                            && (this._tCU_UP_UserInfoTableAdapter.Connection != null))) {
                    return this._tCU_UP_UserInfoTableAdapter.Connection;
                }
                if (((this._tCU_UP_VehicleModelTableAdapter != null) 
                            && (this._tCU_UP_VehicleModelTableAdapter.Connection != null))) {
                    return this._tCU_UP_VehicleModelTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._cCAR_QuestionTrackBillTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._cCAR_QuestionTrackListTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._oF_AnswerTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._oF_BillID_StatusTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._oF_BugCodeTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._oF_BugMessageInfoTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._oF_CarBugStatusTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._oF_DownRecordTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._oF_LoginLogTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._oF_NewsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._oF_NewsAudienceTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._oF_NewsFileTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._oF_NewsTypeTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._oF_OrderForm_ArrivalInfoTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._oF_OrderFormGoodsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._oF_OrderFormInfoTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._s_AfterServiceTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._s_CommtionTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._s_MessageSourceTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._s_ReplaceAccessoryTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._s_ServiceFeedBackTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._s_ServiceFileDownTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tCU_UP_DownloadLogTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tCU_UP_FILETableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tCU_UP_LOGTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tCU_UP_Program_Update_LogTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tCU_UP_ProgramTypeTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tCU_UP_UserInfoTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tCU_UP_VehicleModelTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(RundarWebServerDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._oF_OrderFormInfoTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.OF_OrderFormInfo.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._oF_OrderFormInfoTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._oF_NewsTypeTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.OF_NewsType.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._oF_NewsTypeTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tCU_UP_ProgramTypeTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TCU_UP_ProgramType.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tCU_UP_ProgramTypeTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._oF_OrderFormGoodsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.OF_OrderFormGoods.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._oF_OrderFormGoodsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._cCAR_QuestionTrackBillTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CCAR_QuestionTrackBill.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._cCAR_QuestionTrackBillTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tCU_UP_VehicleModelTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TCU_UP_VehicleModel.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tCU_UP_VehicleModelTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tCU_UP_UserInfoTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TCU_UP_UserInfo.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tCU_UP_UserInfoTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._oF_LoginLogTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.OF_LoginLog.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._oF_LoginLogTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._oF_DownRecordTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.OF_DownRecord.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._oF_DownRecordTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._oF_NewsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.OF_News.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._oF_NewsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._oF_NewsFileTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.OF_NewsFile.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._oF_NewsFileTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._oF_NewsAudienceTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.OF_NewsAudience.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._oF_NewsAudienceTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._oF_CarBugStatusTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.OF_CarBugStatus.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._oF_CarBugStatusTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._oF_AnswerTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.OF_Answer.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._oF_AnswerTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._cCAR_QuestionTrackListTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CCAR_QuestionTrackList.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._cCAR_QuestionTrackListTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._oF_BillID_StatusTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.OF_BillID_Status.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._oF_BillID_StatusTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._oF_BugMessageInfoTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.OF_BugMessageInfo.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._oF_BugMessageInfoTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._oF_BugCodeTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.OF_BugCode.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._oF_BugCodeTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tCU_UP_DownloadLogTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TCU_UP_DownloadLog.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tCU_UP_DownloadLogTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._s_ServiceFileDownTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.S_ServiceFileDown.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._s_ServiceFileDownTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tCU_UP_FILETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TCU_UP_FILE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tCU_UP_FILETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tCU_UP_Program_Update_LogTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TCU_UP_Program_Update_Log.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tCU_UP_Program_Update_LogTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tCU_UP_LOGTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TCU_UP_LOG.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tCU_UP_LOGTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._s_ServiceFeedBackTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.S_ServiceFeedBack.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._s_ServiceFeedBackTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._s_AfterServiceTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.S_AfterService.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._s_AfterServiceTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._oF_OrderForm_ArrivalInfoTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.OF_OrderForm_ArrivalInfo.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._oF_OrderForm_ArrivalInfoTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._s_CommtionTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.S_Commtion.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._s_CommtionTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._s_ReplaceAccessoryTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.S_ReplaceAccessory.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._s_ReplaceAccessoryTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._s_MessageSourceTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.S_MessageSource.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._s_MessageSourceTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(RundarWebServerDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._oF_OrderFormInfoTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.OF_OrderFormInfo.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._oF_OrderFormInfoTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._oF_NewsTypeTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.OF_NewsType.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._oF_NewsTypeTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tCU_UP_ProgramTypeTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TCU_UP_ProgramType.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tCU_UP_ProgramTypeTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._oF_OrderFormGoodsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.OF_OrderFormGoods.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._oF_OrderFormGoodsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._cCAR_QuestionTrackBillTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CCAR_QuestionTrackBill.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._cCAR_QuestionTrackBillTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tCU_UP_VehicleModelTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TCU_UP_VehicleModel.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tCU_UP_VehicleModelTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tCU_UP_UserInfoTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TCU_UP_UserInfo.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tCU_UP_UserInfoTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._oF_LoginLogTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.OF_LoginLog.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._oF_LoginLogTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._oF_DownRecordTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.OF_DownRecord.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._oF_DownRecordTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._oF_NewsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.OF_News.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._oF_NewsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._oF_NewsFileTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.OF_NewsFile.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._oF_NewsFileTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._oF_NewsAudienceTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.OF_NewsAudience.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._oF_NewsAudienceTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._oF_CarBugStatusTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.OF_CarBugStatus.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._oF_CarBugStatusTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._oF_AnswerTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.OF_Answer.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._oF_AnswerTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._cCAR_QuestionTrackListTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CCAR_QuestionTrackList.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._cCAR_QuestionTrackListTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._oF_BillID_StatusTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.OF_BillID_Status.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._oF_BillID_StatusTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._oF_BugMessageInfoTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.OF_BugMessageInfo.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._oF_BugMessageInfoTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._oF_BugCodeTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.OF_BugCode.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._oF_BugCodeTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tCU_UP_DownloadLogTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TCU_UP_DownloadLog.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tCU_UP_DownloadLogTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._s_ServiceFileDownTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.S_ServiceFileDown.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._s_ServiceFileDownTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tCU_UP_FILETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TCU_UP_FILE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tCU_UP_FILETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tCU_UP_Program_Update_LogTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TCU_UP_Program_Update_Log.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tCU_UP_Program_Update_LogTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tCU_UP_LOGTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TCU_UP_LOG.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tCU_UP_LOGTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._s_ServiceFeedBackTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.S_ServiceFeedBack.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._s_ServiceFeedBackTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._s_AfterServiceTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.S_AfterService.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._s_AfterServiceTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._oF_OrderForm_ArrivalInfoTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.OF_OrderForm_ArrivalInfo.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._oF_OrderForm_ArrivalInfoTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._s_CommtionTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.S_Commtion.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._s_CommtionTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._s_ReplaceAccessoryTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.S_ReplaceAccessory.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._s_ReplaceAccessoryTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._s_MessageSourceTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.S_MessageSource.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._s_MessageSourceTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(RundarWebServerDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._s_MessageSourceTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.S_MessageSource.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._s_MessageSourceTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._s_ReplaceAccessoryTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.S_ReplaceAccessory.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._s_ReplaceAccessoryTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._s_CommtionTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.S_Commtion.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._s_CommtionTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._oF_OrderForm_ArrivalInfoTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.OF_OrderForm_ArrivalInfo.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._oF_OrderForm_ArrivalInfoTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._s_AfterServiceTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.S_AfterService.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._s_AfterServiceTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._s_ServiceFeedBackTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.S_ServiceFeedBack.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._s_ServiceFeedBackTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tCU_UP_LOGTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TCU_UP_LOG.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tCU_UP_LOGTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tCU_UP_Program_Update_LogTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TCU_UP_Program_Update_Log.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tCU_UP_Program_Update_LogTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tCU_UP_FILETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TCU_UP_FILE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tCU_UP_FILETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._s_ServiceFileDownTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.S_ServiceFileDown.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._s_ServiceFileDownTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tCU_UP_DownloadLogTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TCU_UP_DownloadLog.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tCU_UP_DownloadLogTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._oF_BugCodeTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.OF_BugCode.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._oF_BugCodeTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._oF_BugMessageInfoTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.OF_BugMessageInfo.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._oF_BugMessageInfoTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._oF_BillID_StatusTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.OF_BillID_Status.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._oF_BillID_StatusTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._cCAR_QuestionTrackListTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CCAR_QuestionTrackList.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._cCAR_QuestionTrackListTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._oF_AnswerTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.OF_Answer.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._oF_AnswerTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._oF_CarBugStatusTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.OF_CarBugStatus.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._oF_CarBugStatusTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._oF_NewsAudienceTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.OF_NewsAudience.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._oF_NewsAudienceTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._oF_NewsFileTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.OF_NewsFile.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._oF_NewsFileTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._oF_NewsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.OF_News.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._oF_NewsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._oF_DownRecordTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.OF_DownRecord.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._oF_DownRecordTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._oF_LoginLogTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.OF_LoginLog.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._oF_LoginLogTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tCU_UP_UserInfoTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TCU_UP_UserInfo.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tCU_UP_UserInfoTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tCU_UP_VehicleModelTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TCU_UP_VehicleModel.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tCU_UP_VehicleModelTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._cCAR_QuestionTrackBillTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CCAR_QuestionTrackBill.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._cCAR_QuestionTrackBillTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._oF_OrderFormGoodsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.OF_OrderFormGoods.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._oF_OrderFormGoodsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tCU_UP_ProgramTypeTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TCU_UP_ProgramType.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tCU_UP_ProgramTypeTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._oF_NewsTypeTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.OF_NewsType.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._oF_NewsTypeTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._oF_OrderFormInfoTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.OF_OrderFormInfo.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._oF_OrderFormInfoTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(RundarWebServerDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager 不包含任何连接信息。请将每个 TableAdapterManager TableAdapter 属性设置为有效的 Tabl" +
                        "eAdapter 实例。");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Closed) 
                        == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("事务无法开始。当前的数据连接不支持事务或当前状态不允许事务开始。");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._cCAR_QuestionTrackBillTableAdapter != null)) {
                    revertConnections.Add(this._cCAR_QuestionTrackBillTableAdapter, this._cCAR_QuestionTrackBillTableAdapter.Connection);
                    this._cCAR_QuestionTrackBillTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._cCAR_QuestionTrackBillTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._cCAR_QuestionTrackBillTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._cCAR_QuestionTrackBillTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._cCAR_QuestionTrackBillTableAdapter.Adapter);
                    }
                }
                if ((this._cCAR_QuestionTrackListTableAdapter != null)) {
                    revertConnections.Add(this._cCAR_QuestionTrackListTableAdapter, this._cCAR_QuestionTrackListTableAdapter.Connection);
                    this._cCAR_QuestionTrackListTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._cCAR_QuestionTrackListTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._cCAR_QuestionTrackListTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._cCAR_QuestionTrackListTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._cCAR_QuestionTrackListTableAdapter.Adapter);
                    }
                }
                if ((this._oF_AnswerTableAdapter != null)) {
                    revertConnections.Add(this._oF_AnswerTableAdapter, this._oF_AnswerTableAdapter.Connection);
                    this._oF_AnswerTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._oF_AnswerTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._oF_AnswerTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._oF_AnswerTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._oF_AnswerTableAdapter.Adapter);
                    }
                }
                if ((this._oF_BillID_StatusTableAdapter != null)) {
                    revertConnections.Add(this._oF_BillID_StatusTableAdapter, this._oF_BillID_StatusTableAdapter.Connection);
                    this._oF_BillID_StatusTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._oF_BillID_StatusTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._oF_BillID_StatusTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._oF_BillID_StatusTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._oF_BillID_StatusTableAdapter.Adapter);
                    }
                }
                if ((this._oF_BugCodeTableAdapter != null)) {
                    revertConnections.Add(this._oF_BugCodeTableAdapter, this._oF_BugCodeTableAdapter.Connection);
                    this._oF_BugCodeTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._oF_BugCodeTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._oF_BugCodeTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._oF_BugCodeTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._oF_BugCodeTableAdapter.Adapter);
                    }
                }
                if ((this._oF_BugMessageInfoTableAdapter != null)) {
                    revertConnections.Add(this._oF_BugMessageInfoTableAdapter, this._oF_BugMessageInfoTableAdapter.Connection);
                    this._oF_BugMessageInfoTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._oF_BugMessageInfoTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._oF_BugMessageInfoTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._oF_BugMessageInfoTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._oF_BugMessageInfoTableAdapter.Adapter);
                    }
                }
                if ((this._oF_CarBugStatusTableAdapter != null)) {
                    revertConnections.Add(this._oF_CarBugStatusTableAdapter, this._oF_CarBugStatusTableAdapter.Connection);
                    this._oF_CarBugStatusTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._oF_CarBugStatusTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._oF_CarBugStatusTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._oF_CarBugStatusTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._oF_CarBugStatusTableAdapter.Adapter);
                    }
                }
                if ((this._oF_DownRecordTableAdapter != null)) {
                    revertConnections.Add(this._oF_DownRecordTableAdapter, this._oF_DownRecordTableAdapter.Connection);
                    this._oF_DownRecordTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._oF_DownRecordTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._oF_DownRecordTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._oF_DownRecordTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._oF_DownRecordTableAdapter.Adapter);
                    }
                }
                if ((this._oF_LoginLogTableAdapter != null)) {
                    revertConnections.Add(this._oF_LoginLogTableAdapter, this._oF_LoginLogTableAdapter.Connection);
                    this._oF_LoginLogTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._oF_LoginLogTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._oF_LoginLogTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._oF_LoginLogTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._oF_LoginLogTableAdapter.Adapter);
                    }
                }
                if ((this._oF_NewsTableAdapter != null)) {
                    revertConnections.Add(this._oF_NewsTableAdapter, this._oF_NewsTableAdapter.Connection);
                    this._oF_NewsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._oF_NewsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._oF_NewsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._oF_NewsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._oF_NewsTableAdapter.Adapter);
                    }
                }
                if ((this._oF_NewsAudienceTableAdapter != null)) {
                    revertConnections.Add(this._oF_NewsAudienceTableAdapter, this._oF_NewsAudienceTableAdapter.Connection);
                    this._oF_NewsAudienceTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._oF_NewsAudienceTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._oF_NewsAudienceTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._oF_NewsAudienceTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._oF_NewsAudienceTableAdapter.Adapter);
                    }
                }
                if ((this._oF_NewsFileTableAdapter != null)) {
                    revertConnections.Add(this._oF_NewsFileTableAdapter, this._oF_NewsFileTableAdapter.Connection);
                    this._oF_NewsFileTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._oF_NewsFileTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._oF_NewsFileTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._oF_NewsFileTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._oF_NewsFileTableAdapter.Adapter);
                    }
                }
                if ((this._oF_NewsTypeTableAdapter != null)) {
                    revertConnections.Add(this._oF_NewsTypeTableAdapter, this._oF_NewsTypeTableAdapter.Connection);
                    this._oF_NewsTypeTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._oF_NewsTypeTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._oF_NewsTypeTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._oF_NewsTypeTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._oF_NewsTypeTableAdapter.Adapter);
                    }
                }
                if ((this._oF_OrderForm_ArrivalInfoTableAdapter != null)) {
                    revertConnections.Add(this._oF_OrderForm_ArrivalInfoTableAdapter, this._oF_OrderForm_ArrivalInfoTableAdapter.Connection);
                    this._oF_OrderForm_ArrivalInfoTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._oF_OrderForm_ArrivalInfoTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._oF_OrderForm_ArrivalInfoTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._oF_OrderForm_ArrivalInfoTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._oF_OrderForm_ArrivalInfoTableAdapter.Adapter);
                    }
                }
                if ((this._oF_OrderFormGoodsTableAdapter != null)) {
                    revertConnections.Add(this._oF_OrderFormGoodsTableAdapter, this._oF_OrderFormGoodsTableAdapter.Connection);
                    this._oF_OrderFormGoodsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._oF_OrderFormGoodsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._oF_OrderFormGoodsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._oF_OrderFormGoodsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._oF_OrderFormGoodsTableAdapter.Adapter);
                    }
                }
                if ((this._oF_OrderFormInfoTableAdapter != null)) {
                    revertConnections.Add(this._oF_OrderFormInfoTableAdapter, this._oF_OrderFormInfoTableAdapter.Connection);
                    this._oF_OrderFormInfoTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._oF_OrderFormInfoTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._oF_OrderFormInfoTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._oF_OrderFormInfoTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._oF_OrderFormInfoTableAdapter.Adapter);
                    }
                }
                if ((this._s_AfterServiceTableAdapter != null)) {
                    revertConnections.Add(this._s_AfterServiceTableAdapter, this._s_AfterServiceTableAdapter.Connection);
                    this._s_AfterServiceTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._s_AfterServiceTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._s_AfterServiceTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._s_AfterServiceTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._s_AfterServiceTableAdapter.Adapter);
                    }
                }
                if ((this._s_CommtionTableAdapter != null)) {
                    revertConnections.Add(this._s_CommtionTableAdapter, this._s_CommtionTableAdapter.Connection);
                    this._s_CommtionTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._s_CommtionTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._s_CommtionTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._s_CommtionTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._s_CommtionTableAdapter.Adapter);
                    }
                }
                if ((this._s_MessageSourceTableAdapter != null)) {
                    revertConnections.Add(this._s_MessageSourceTableAdapter, this._s_MessageSourceTableAdapter.Connection);
                    this._s_MessageSourceTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._s_MessageSourceTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._s_MessageSourceTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._s_MessageSourceTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._s_MessageSourceTableAdapter.Adapter);
                    }
                }
                if ((this._s_ReplaceAccessoryTableAdapter != null)) {
                    revertConnections.Add(this._s_ReplaceAccessoryTableAdapter, this._s_ReplaceAccessoryTableAdapter.Connection);
                    this._s_ReplaceAccessoryTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._s_ReplaceAccessoryTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._s_ReplaceAccessoryTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._s_ReplaceAccessoryTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._s_ReplaceAccessoryTableAdapter.Adapter);
                    }
                }
                if ((this._s_ServiceFeedBackTableAdapter != null)) {
                    revertConnections.Add(this._s_ServiceFeedBackTableAdapter, this._s_ServiceFeedBackTableAdapter.Connection);
                    this._s_ServiceFeedBackTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._s_ServiceFeedBackTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._s_ServiceFeedBackTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._s_ServiceFeedBackTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._s_ServiceFeedBackTableAdapter.Adapter);
                    }
                }
                if ((this._s_ServiceFileDownTableAdapter != null)) {
                    revertConnections.Add(this._s_ServiceFileDownTableAdapter, this._s_ServiceFileDownTableAdapter.Connection);
                    this._s_ServiceFileDownTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._s_ServiceFileDownTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._s_ServiceFileDownTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._s_ServiceFileDownTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._s_ServiceFileDownTableAdapter.Adapter);
                    }
                }
                if ((this._tCU_UP_DownloadLogTableAdapter != null)) {
                    revertConnections.Add(this._tCU_UP_DownloadLogTableAdapter, this._tCU_UP_DownloadLogTableAdapter.Connection);
                    this._tCU_UP_DownloadLogTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tCU_UP_DownloadLogTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tCU_UP_DownloadLogTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tCU_UP_DownloadLogTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tCU_UP_DownloadLogTableAdapter.Adapter);
                    }
                }
                if ((this._tCU_UP_FILETableAdapter != null)) {
                    revertConnections.Add(this._tCU_UP_FILETableAdapter, this._tCU_UP_FILETableAdapter.Connection);
                    this._tCU_UP_FILETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tCU_UP_FILETableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tCU_UP_FILETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tCU_UP_FILETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tCU_UP_FILETableAdapter.Adapter);
                    }
                }
                if ((this._tCU_UP_LOGTableAdapter != null)) {
                    revertConnections.Add(this._tCU_UP_LOGTableAdapter, this._tCU_UP_LOGTableAdapter.Connection);
                    this._tCU_UP_LOGTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tCU_UP_LOGTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tCU_UP_LOGTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tCU_UP_LOGTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tCU_UP_LOGTableAdapter.Adapter);
                    }
                }
                if ((this._tCU_UP_Program_Update_LogTableAdapter != null)) {
                    revertConnections.Add(this._tCU_UP_Program_Update_LogTableAdapter, this._tCU_UP_Program_Update_LogTableAdapter.Connection);
                    this._tCU_UP_Program_Update_LogTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tCU_UP_Program_Update_LogTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tCU_UP_Program_Update_LogTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tCU_UP_Program_Update_LogTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tCU_UP_Program_Update_LogTableAdapter.Adapter);
                    }
                }
                if ((this._tCU_UP_ProgramTypeTableAdapter != null)) {
                    revertConnections.Add(this._tCU_UP_ProgramTypeTableAdapter, this._tCU_UP_ProgramTypeTableAdapter.Connection);
                    this._tCU_UP_ProgramTypeTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tCU_UP_ProgramTypeTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tCU_UP_ProgramTypeTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tCU_UP_ProgramTypeTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tCU_UP_ProgramTypeTableAdapter.Adapter);
                    }
                }
                if ((this._tCU_UP_UserInfoTableAdapter != null)) {
                    revertConnections.Add(this._tCU_UP_UserInfoTableAdapter, this._tCU_UP_UserInfoTableAdapter.Connection);
                    this._tCU_UP_UserInfoTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tCU_UP_UserInfoTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tCU_UP_UserInfoTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tCU_UP_UserInfoTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tCU_UP_UserInfoTableAdapter.Adapter);
                    }
                }
                if ((this._tCU_UP_VehicleModelTableAdapter != null)) {
                    revertConnections.Add(this._tCU_UP_VehicleModelTableAdapter, this._tCU_UP_VehicleModelTableAdapter.Connection);
                    this._tCU_UP_VehicleModelTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tCU_UP_VehicleModelTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tCU_UP_VehicleModelTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tCU_UP_VehicleModelTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tCU_UP_VehicleModelTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._cCAR_QuestionTrackBillTableAdapter != null)) {
                    this._cCAR_QuestionTrackBillTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._cCAR_QuestionTrackBillTableAdapter]));
                    this._cCAR_QuestionTrackBillTableAdapter.Transaction = null;
                }
                if ((this._cCAR_QuestionTrackListTableAdapter != null)) {
                    this._cCAR_QuestionTrackListTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._cCAR_QuestionTrackListTableAdapter]));
                    this._cCAR_QuestionTrackListTableAdapter.Transaction = null;
                }
                if ((this._oF_AnswerTableAdapter != null)) {
                    this._oF_AnswerTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._oF_AnswerTableAdapter]));
                    this._oF_AnswerTableAdapter.Transaction = null;
                }
                if ((this._oF_BillID_StatusTableAdapter != null)) {
                    this._oF_BillID_StatusTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._oF_BillID_StatusTableAdapter]));
                    this._oF_BillID_StatusTableAdapter.Transaction = null;
                }
                if ((this._oF_BugCodeTableAdapter != null)) {
                    this._oF_BugCodeTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._oF_BugCodeTableAdapter]));
                    this._oF_BugCodeTableAdapter.Transaction = null;
                }
                if ((this._oF_BugMessageInfoTableAdapter != null)) {
                    this._oF_BugMessageInfoTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._oF_BugMessageInfoTableAdapter]));
                    this._oF_BugMessageInfoTableAdapter.Transaction = null;
                }
                if ((this._oF_CarBugStatusTableAdapter != null)) {
                    this._oF_CarBugStatusTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._oF_CarBugStatusTableAdapter]));
                    this._oF_CarBugStatusTableAdapter.Transaction = null;
                }
                if ((this._oF_DownRecordTableAdapter != null)) {
                    this._oF_DownRecordTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._oF_DownRecordTableAdapter]));
                    this._oF_DownRecordTableAdapter.Transaction = null;
                }
                if ((this._oF_LoginLogTableAdapter != null)) {
                    this._oF_LoginLogTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._oF_LoginLogTableAdapter]));
                    this._oF_LoginLogTableAdapter.Transaction = null;
                }
                if ((this._oF_NewsTableAdapter != null)) {
                    this._oF_NewsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._oF_NewsTableAdapter]));
                    this._oF_NewsTableAdapter.Transaction = null;
                }
                if ((this._oF_NewsAudienceTableAdapter != null)) {
                    this._oF_NewsAudienceTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._oF_NewsAudienceTableAdapter]));
                    this._oF_NewsAudienceTableAdapter.Transaction = null;
                }
                if ((this._oF_NewsFileTableAdapter != null)) {
                    this._oF_NewsFileTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._oF_NewsFileTableAdapter]));
                    this._oF_NewsFileTableAdapter.Transaction = null;
                }
                if ((this._oF_NewsTypeTableAdapter != null)) {
                    this._oF_NewsTypeTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._oF_NewsTypeTableAdapter]));
                    this._oF_NewsTypeTableAdapter.Transaction = null;
                }
                if ((this._oF_OrderForm_ArrivalInfoTableAdapter != null)) {
                    this._oF_OrderForm_ArrivalInfoTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._oF_OrderForm_ArrivalInfoTableAdapter]));
                    this._oF_OrderForm_ArrivalInfoTableAdapter.Transaction = null;
                }
                if ((this._oF_OrderFormGoodsTableAdapter != null)) {
                    this._oF_OrderFormGoodsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._oF_OrderFormGoodsTableAdapter]));
                    this._oF_OrderFormGoodsTableAdapter.Transaction = null;
                }
                if ((this._oF_OrderFormInfoTableAdapter != null)) {
                    this._oF_OrderFormInfoTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._oF_OrderFormInfoTableAdapter]));
                    this._oF_OrderFormInfoTableAdapter.Transaction = null;
                }
                if ((this._s_AfterServiceTableAdapter != null)) {
                    this._s_AfterServiceTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._s_AfterServiceTableAdapter]));
                    this._s_AfterServiceTableAdapter.Transaction = null;
                }
                if ((this._s_CommtionTableAdapter != null)) {
                    this._s_CommtionTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._s_CommtionTableAdapter]));
                    this._s_CommtionTableAdapter.Transaction = null;
                }
                if ((this._s_MessageSourceTableAdapter != null)) {
                    this._s_MessageSourceTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._s_MessageSourceTableAdapter]));
                    this._s_MessageSourceTableAdapter.Transaction = null;
                }
                if ((this._s_ReplaceAccessoryTableAdapter != null)) {
                    this._s_ReplaceAccessoryTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._s_ReplaceAccessoryTableAdapter]));
                    this._s_ReplaceAccessoryTableAdapter.Transaction = null;
                }
                if ((this._s_ServiceFeedBackTableAdapter != null)) {
                    this._s_ServiceFeedBackTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._s_ServiceFeedBackTableAdapter]));
                    this._s_ServiceFeedBackTableAdapter.Transaction = null;
                }
                if ((this._s_ServiceFileDownTableAdapter != null)) {
                    this._s_ServiceFileDownTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._s_ServiceFileDownTableAdapter]));
                    this._s_ServiceFileDownTableAdapter.Transaction = null;
                }
                if ((this._tCU_UP_DownloadLogTableAdapter != null)) {
                    this._tCU_UP_DownloadLogTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tCU_UP_DownloadLogTableAdapter]));
                    this._tCU_UP_DownloadLogTableAdapter.Transaction = null;
                }
                if ((this._tCU_UP_FILETableAdapter != null)) {
                    this._tCU_UP_FILETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tCU_UP_FILETableAdapter]));
                    this._tCU_UP_FILETableAdapter.Transaction = null;
                }
                if ((this._tCU_UP_LOGTableAdapter != null)) {
                    this._tCU_UP_LOGTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tCU_UP_LOGTableAdapter]));
                    this._tCU_UP_LOGTableAdapter.Transaction = null;
                }
                if ((this._tCU_UP_Program_Update_LogTableAdapter != null)) {
                    this._tCU_UP_Program_Update_LogTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tCU_UP_Program_Update_LogTableAdapter]));
                    this._tCU_UP_Program_Update_LogTableAdapter.Transaction = null;
                }
                if ((this._tCU_UP_ProgramTypeTableAdapter != null)) {
                    this._tCU_UP_ProgramTypeTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tCU_UP_ProgramTypeTableAdapter]));
                    this._tCU_UP_ProgramTypeTableAdapter.Transaction = null;
                }
                if ((this._tCU_UP_UserInfoTableAdapter != null)) {
                    this._tCU_UP_UserInfoTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tCU_UP_UserInfoTableAdapter]));
                    this._tCU_UP_UserInfoTableAdapter.Transaction = null;
                }
                if ((this._tCU_UP_VehicleModelTableAdapter != null)) {
                    this._tCU_UP_VehicleModelTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tCU_UP_VehicleModelTableAdapter]));
                    this._tCU_UP_VehicleModelTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591