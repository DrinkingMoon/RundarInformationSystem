#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.8745
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServerModule
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="PlatformService")]
	public partial class PlatformServiceDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertZPX_CCDResult(ZPX_CCDResult instance);
    partial void UpdateZPX_CCDResult(ZPX_CCDResult instance);
    partial void DeleteZPX_CCDResult(ZPX_CCDResult instance);
    partial void InsertZPX_IncompleteAssembly(ZPX_IncompleteAssembly instance);
    partial void UpdateZPX_IncompleteAssembly(ZPX_IncompleteAssembly instance);
    partial void DeleteZPX_IncompleteAssembly(ZPX_IncompleteAssembly instance);
    partial void InsertZPX_MeasureData(ZPX_MeasureData instance);
    partial void UpdateZPX_MeasureData(ZPX_MeasureData instance);
    partial void DeleteZPX_MeasureData(ZPX_MeasureData instance);
    partial void InsertZPX_PartNameWithUniqueCode(ZPX_PartNameWithUniqueCode instance);
    partial void UpdateZPX_PartNameWithUniqueCode(ZPX_PartNameWithUniqueCode instance);
    partial void DeleteZPX_PartNameWithUniqueCode(ZPX_PartNameWithUniqueCode instance);
    partial void InsertZPX_TorqueMachineResult(ZPX_TorqueMachineResult instance);
    partial void UpdateZPX_TorqueMachineResult(ZPX_TorqueMachineResult instance);
    partial void DeleteZPX_TorqueMachineResult(ZPX_TorqueMachineResult instance);
    partial void InsertZPX_WorkBenchType(ZPX_WorkBenchType instance);
    partial void UpdateZPX_WorkBenchType(ZPX_WorkBenchType instance);
    partial void DeleteZPX_WorkBenchType(ZPX_WorkBenchType instance);
    partial void InsertZZZ_MeasureData(ZZZ_MeasureData instance);
    partial void UpdateZZZ_MeasureData(ZZZ_MeasureData instance);
    partial void DeleteZZZ_MeasureData(ZZZ_MeasureData instance);
    partial void InsertZZZ_ParentInfoOfWorkBench(ZZZ_ParentInfoOfWorkBench instance);
    partial void UpdateZZZ_ParentInfoOfWorkBench(ZZZ_ParentInfoOfWorkBench instance);
    partial void DeleteZZZ_ParentInfoOfWorkBench(ZZZ_ParentInfoOfWorkBench instance);
    partial void InsertZZZ_MeasurePartConfig(ZZZ_MeasurePartConfig instance);
    partial void UpdateZZZ_MeasurePartConfig(ZZZ_MeasurePartConfig instance);
    partial void DeleteZZZ_MeasurePartConfig(ZZZ_MeasurePartConfig instance);
    partial void InsertZPX_ProductWorkbenchConfig(ZPX_ProductWorkbenchConfig instance);
    partial void UpdateZPX_ProductWorkbenchConfig(ZPX_ProductWorkbenchConfig instance);
    partial void DeleteZPX_ProductWorkbenchConfig(ZPX_ProductWorkbenchConfig instance);
    partial void InsertZPX_WorkBenchConfig(ZPX_WorkBenchConfig instance);
    partial void UpdateZPX_WorkBenchConfig(ZPX_WorkBenchConfig instance);
    partial void DeleteZPX_WorkBenchConfig(ZPX_WorkBenchConfig instance);
    partial void InsertZPX_LeakproofParts(ZPX_LeakproofParts instance);
    partial void UpdateZPX_LeakproofParts(ZPX_LeakproofParts instance);
    partial void DeleteZPX_LeakproofParts(ZPX_LeakproofParts instance);
    partial void InsertZPX_CCDConfig(ZPX_CCDConfig instance);
    partial void UpdateZPX_CCDConfig(ZPX_CCDConfig instance);
    partial void DeleteZPX_CCDConfig(ZPX_CCDConfig instance);
    #endregion
		
		public PlatformServiceDataContext() : 
				base(global::ServerModule.Properties.Settings.Default.PlatformServiceConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PlatformServiceDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlatformServiceDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlatformServiceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlatformServiceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ZPX_CCDResult> ZPX_CCDResult
		{
			get
			{
				return this.GetTable<ZPX_CCDResult>();
			}
		}
		
		public System.Data.Linq.Table<ZPX_IncompleteAssembly> ZPX_IncompleteAssembly
		{
			get
			{
				return this.GetTable<ZPX_IncompleteAssembly>();
			}
		}
		
		public System.Data.Linq.Table<ZPX_MeasureData> ZPX_MeasureData
		{
			get
			{
				return this.GetTable<ZPX_MeasureData>();
			}
		}
		
		public System.Data.Linq.Table<ZPX_PartNameWithUniqueCode> ZPX_PartNameWithUniqueCode
		{
			get
			{
				return this.GetTable<ZPX_PartNameWithUniqueCode>();
			}
		}
		
		public System.Data.Linq.Table<ZPX_TorqueMachineConfig> ZPX_TorqueMachineConfig
		{
			get
			{
				return this.GetTable<ZPX_TorqueMachineConfig>();
			}
		}
		
		public System.Data.Linq.Table<ZPX_TorqueMachineResult> ZPX_TorqueMachineResult
		{
			get
			{
				return this.GetTable<ZPX_TorqueMachineResult>();
			}
		}
		
		public System.Data.Linq.Table<ZPX_WorkBenchType> ZPX_WorkBenchType
		{
			get
			{
				return this.GetTable<ZPX_WorkBenchType>();
			}
		}
		
		public System.Data.Linq.Table<ZZZ_MeasureData> ZZZ_MeasureData
		{
			get
			{
				return this.GetTable<ZZZ_MeasureData>();
			}
		}
		
		public System.Data.Linq.Table<ZZZ_ParentInfoOfWorkBench> ZZZ_ParentInfoOfWorkBench
		{
			get
			{
				return this.GetTable<ZZZ_ParentInfoOfWorkBench>();
			}
		}
		
		public System.Data.Linq.Table<ZZZ_MeasurePartConfig> ZZZ_MeasurePartConfig
		{
			get
			{
				return this.GetTable<ZZZ_MeasurePartConfig>();
			}
		}
		
		public System.Data.Linq.Table<ZPX_ProductWorkbenchConfig> ZPX_ProductWorkbenchConfig
		{
			get
			{
				return this.GetTable<ZPX_ProductWorkbenchConfig>();
			}
		}
		
		public System.Data.Linq.Table<ZPX_WorkBenchConfig> ZPX_WorkBenchConfig
		{
			get
			{
				return this.GetTable<ZPX_WorkBenchConfig>();
			}
		}
		
		public System.Data.Linq.Table<View_ZPX_ProductWorkbenchConfig> View_ZPX_ProductWorkbenchConfig
		{
			get
			{
				return this.GetTable<View_ZPX_ProductWorkbenchConfig>();
			}
		}
		
		public System.Data.Linq.Table<View_ZPX_WorkBenchConfig> View_ZPX_WorkBenchConfig
		{
			get
			{
				return this.GetTable<View_ZPX_WorkBenchConfig>();
			}
		}
		
		public System.Data.Linq.Table<ZPX_LeakproofParts> ZPX_LeakproofParts
		{
			get
			{
				return this.GetTable<ZPX_LeakproofParts>();
			}
		}
		
		public System.Data.Linq.Table<ZPX_CCDConfig> ZPX_CCDConfig
		{
			get
			{
				return this.GetTable<ZPX_CCDConfig>();
			}
		}
	}
	
	[Table(Name="dbo.ZPX_CCDResult")]
	public partial class ZPX_CCDResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _测点号;
		
		private string _检测结果;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On测点号Changing(int value);
    partial void On测点号Changed();
    partial void On检测结果Changing(string value);
    partial void On检测结果Changed();
    #endregion
		
		public ZPX_CCDResult()
		{
			OnCreated();
		}
		
		[Column(Storage="_测点号", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int 测点号
		{
			get
			{
				return this._测点号;
			}
			set
			{
				if ((this._测点号 != value))
				{
					this.On测点号Changing(value);
					this.SendPropertyChanging();
					this._测点号 = value;
					this.SendPropertyChanged("测点号");
					this.On测点号Changed();
				}
			}
		}
		
		[Column(Storage="_检测结果", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 检测结果
		{
			get
			{
				return this._检测结果;
			}
			set
			{
				if ((this._检测结果 != value))
				{
					this.On检测结果Changing(value);
					this.SendPropertyChanging();
					this._检测结果 = value;
					this.SendPropertyChanged("检测结果");
					this.On检测结果Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ZPX_IncompleteAssembly")]
	public partial class ZPX_IncompleteAssembly : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _WorkBench;
		
		private string _ProductEdition;
		
		private string _ProductCode;
		
		private string _ParentCode;
		
		private string _ParentScanCode;
		
		private string _ParentName;
		
		private string _GoodsCode;
		
		private string _GoodsName;
		
		private string _Spec;
		
		private string _GoodsOnlyCode;
		
		private System.Nullable<int> _Counts;
		
		private string _Provider;
		
		private string _BatchNo;
		
		private string _CheckDatas;
		
		private string _FactDatas;
		
		private string _FittingPersonnel;
		
		private string _FittingTime;
		
		private string _Remark;
		
		private System.Nullable<int> _AssemblyFlag;
		
		private string _FinishTime;
		
		private string _AssemblingMode;
		
		private string _AssemblingStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnWorkBenchChanging(string value);
    partial void OnWorkBenchChanged();
    partial void OnProductEditionChanging(string value);
    partial void OnProductEditionChanged();
    partial void OnProductCodeChanging(string value);
    partial void OnProductCodeChanged();
    partial void OnParentCodeChanging(string value);
    partial void OnParentCodeChanged();
    partial void OnParentScanCodeChanging(string value);
    partial void OnParentScanCodeChanged();
    partial void OnParentNameChanging(string value);
    partial void OnParentNameChanged();
    partial void OnGoodsCodeChanging(string value);
    partial void OnGoodsCodeChanged();
    partial void OnGoodsNameChanging(string value);
    partial void OnGoodsNameChanged();
    partial void OnSpecChanging(string value);
    partial void OnSpecChanged();
    partial void OnGoodsOnlyCodeChanging(string value);
    partial void OnGoodsOnlyCodeChanged();
    partial void OnCountsChanging(System.Nullable<int> value);
    partial void OnCountsChanged();
    partial void OnProviderChanging(string value);
    partial void OnProviderChanged();
    partial void OnBatchNoChanging(string value);
    partial void OnBatchNoChanged();
    partial void OnCheckDatasChanging(string value);
    partial void OnCheckDatasChanged();
    partial void OnFactDatasChanging(string value);
    partial void OnFactDatasChanged();
    partial void OnFittingPersonnelChanging(string value);
    partial void OnFittingPersonnelChanged();
    partial void OnFittingTimeChanging(string value);
    partial void OnFittingTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnAssemblyFlagChanging(System.Nullable<int> value);
    partial void OnAssemblyFlagChanged();
    partial void OnFinishTimeChanging(string value);
    partial void OnFinishTimeChanged();
    partial void OnAssemblingModeChanging(string value);
    partial void OnAssemblingModeChanged();
    partial void OnAssemblingStatusChanging(string value);
    partial void OnAssemblingStatusChanged();
    #endregion
		
		public ZPX_IncompleteAssembly()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_WorkBench", DbType="NVarChar(50)")]
		public string WorkBench
		{
			get
			{
				return this._WorkBench;
			}
			set
			{
				if ((this._WorkBench != value))
				{
					this.OnWorkBenchChanging(value);
					this.SendPropertyChanging();
					this._WorkBench = value;
					this.SendPropertyChanged("WorkBench");
					this.OnWorkBenchChanged();
				}
			}
		}
		
		[Column(Storage="_ProductEdition", DbType="NVarChar(50)")]
		public string ProductEdition
		{
			get
			{
				return this._ProductEdition;
			}
			set
			{
				if ((this._ProductEdition != value))
				{
					this.OnProductEditionChanging(value);
					this.SendPropertyChanging();
					this._ProductEdition = value;
					this.SendPropertyChanged("ProductEdition");
					this.OnProductEditionChanged();
				}
			}
		}
		
		[Column(Storage="_ProductCode", DbType="NVarChar(50)")]
		public string ProductCode
		{
			get
			{
				return this._ProductCode;
			}
			set
			{
				if ((this._ProductCode != value))
				{
					this.OnProductCodeChanging(value);
					this.SendPropertyChanging();
					this._ProductCode = value;
					this.SendPropertyChanged("ProductCode");
					this.OnProductCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ParentCode", DbType="NVarChar(50)")]
		public string ParentCode
		{
			get
			{
				return this._ParentCode;
			}
			set
			{
				if ((this._ParentCode != value))
				{
					this.OnParentCodeChanging(value);
					this.SendPropertyChanging();
					this._ParentCode = value;
					this.SendPropertyChanged("ParentCode");
					this.OnParentCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ParentScanCode", DbType="NVarChar(50)")]
		public string ParentScanCode
		{
			get
			{
				return this._ParentScanCode;
			}
			set
			{
				if ((this._ParentScanCode != value))
				{
					this.OnParentScanCodeChanging(value);
					this.SendPropertyChanging();
					this._ParentScanCode = value;
					this.SendPropertyChanged("ParentScanCode");
					this.OnParentScanCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ParentName", DbType="NVarChar(50)")]
		public string ParentName
		{
			get
			{
				return this._ParentName;
			}
			set
			{
				if ((this._ParentName != value))
				{
					this.OnParentNameChanging(value);
					this.SendPropertyChanging();
					this._ParentName = value;
					this.SendPropertyChanged("ParentName");
					this.OnParentNameChanged();
				}
			}
		}
		
		[Column(Storage="_GoodsCode", DbType="NVarChar(50)")]
		public string GoodsCode
		{
			get
			{
				return this._GoodsCode;
			}
			set
			{
				if ((this._GoodsCode != value))
				{
					this.OnGoodsCodeChanging(value);
					this.SendPropertyChanging();
					this._GoodsCode = value;
					this.SendPropertyChanged("GoodsCode");
					this.OnGoodsCodeChanged();
				}
			}
		}
		
		[Column(Storage="_GoodsName", DbType="NVarChar(50)")]
		public string GoodsName
		{
			get
			{
				return this._GoodsName;
			}
			set
			{
				if ((this._GoodsName != value))
				{
					this.OnGoodsNameChanging(value);
					this.SendPropertyChanging();
					this._GoodsName = value;
					this.SendPropertyChanged("GoodsName");
					this.OnGoodsNameChanged();
				}
			}
		}
		
		[Column(Storage="_Spec", DbType="NVarChar(50)")]
		public string Spec
		{
			get
			{
				return this._Spec;
			}
			set
			{
				if ((this._Spec != value))
				{
					this.OnSpecChanging(value);
					this.SendPropertyChanging();
					this._Spec = value;
					this.SendPropertyChanged("Spec");
					this.OnSpecChanged();
				}
			}
		}
		
		[Column(Storage="_GoodsOnlyCode", DbType="NVarChar(50)")]
		public string GoodsOnlyCode
		{
			get
			{
				return this._GoodsOnlyCode;
			}
			set
			{
				if ((this._GoodsOnlyCode != value))
				{
					this.OnGoodsOnlyCodeChanging(value);
					this.SendPropertyChanging();
					this._GoodsOnlyCode = value;
					this.SendPropertyChanged("GoodsOnlyCode");
					this.OnGoodsOnlyCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Counts", DbType="Int")]
		public System.Nullable<int> Counts
		{
			get
			{
				return this._Counts;
			}
			set
			{
				if ((this._Counts != value))
				{
					this.OnCountsChanging(value);
					this.SendPropertyChanging();
					this._Counts = value;
					this.SendPropertyChanged("Counts");
					this.OnCountsChanged();
				}
			}
		}
		
		[Column(Storage="_Provider", DbType="VarChar(15)")]
		public string Provider
		{
			get
			{
				return this._Provider;
			}
			set
			{
				if ((this._Provider != value))
				{
					this.OnProviderChanging(value);
					this.SendPropertyChanging();
					this._Provider = value;
					this.SendPropertyChanged("Provider");
					this.OnProviderChanged();
				}
			}
		}
		
		[Column(Storage="_BatchNo", DbType="VarChar(26)")]
		public string BatchNo
		{
			get
			{
				return this._BatchNo;
			}
			set
			{
				if ((this._BatchNo != value))
				{
					this.OnBatchNoChanging(value);
					this.SendPropertyChanging();
					this._BatchNo = value;
					this.SendPropertyChanged("BatchNo");
					this.OnBatchNoChanged();
				}
			}
		}
		
		[Column(Storage="_CheckDatas", DbType="NVarChar(MAX)")]
		public string CheckDatas
		{
			get
			{
				return this._CheckDatas;
			}
			set
			{
				if ((this._CheckDatas != value))
				{
					this.OnCheckDatasChanging(value);
					this.SendPropertyChanging();
					this._CheckDatas = value;
					this.SendPropertyChanged("CheckDatas");
					this.OnCheckDatasChanged();
				}
			}
		}
		
		[Column(Storage="_FactDatas", DbType="NVarChar(MAX)")]
		public string FactDatas
		{
			get
			{
				return this._FactDatas;
			}
			set
			{
				if ((this._FactDatas != value))
				{
					this.OnFactDatasChanging(value);
					this.SendPropertyChanging();
					this._FactDatas = value;
					this.SendPropertyChanged("FactDatas");
					this.OnFactDatasChanged();
				}
			}
		}
		
		[Column(Storage="_FittingPersonnel", DbType="NVarChar(50)")]
		public string FittingPersonnel
		{
			get
			{
				return this._FittingPersonnel;
			}
			set
			{
				if ((this._FittingPersonnel != value))
				{
					this.OnFittingPersonnelChanging(value);
					this.SendPropertyChanging();
					this._FittingPersonnel = value;
					this.SendPropertyChanged("FittingPersonnel");
					this.OnFittingPersonnelChanged();
				}
			}
		}
		
		[Column(Storage="_FittingTime", DbType="NVarChar(50)")]
		public string FittingTime
		{
			get
			{
				return this._FittingTime;
			}
			set
			{
				if ((this._FittingTime != value))
				{
					this.OnFittingTimeChanging(value);
					this.SendPropertyChanging();
					this._FittingTime = value;
					this.SendPropertyChanged("FittingTime");
					this.OnFittingTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(MAX)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_AssemblyFlag", DbType="Int")]
		public System.Nullable<int> AssemblyFlag
		{
			get
			{
				return this._AssemblyFlag;
			}
			set
			{
				if ((this._AssemblyFlag != value))
				{
					this.OnAssemblyFlagChanging(value);
					this.SendPropertyChanging();
					this._AssemblyFlag = value;
					this.SendPropertyChanged("AssemblyFlag");
					this.OnAssemblyFlagChanged();
				}
			}
		}
		
		[Column(Storage="_FinishTime", DbType="NVarChar(50)")]
		public string FinishTime
		{
			get
			{
				return this._FinishTime;
			}
			set
			{
				if ((this._FinishTime != value))
				{
					this.OnFinishTimeChanging(value);
					this.SendPropertyChanging();
					this._FinishTime = value;
					this.SendPropertyChanged("FinishTime");
					this.OnFinishTimeChanged();
				}
			}
		}
		
		[Column(Storage="_AssemblingMode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AssemblingMode
		{
			get
			{
				return this._AssemblingMode;
			}
			set
			{
				if ((this._AssemblingMode != value))
				{
					this.OnAssemblingModeChanging(value);
					this.SendPropertyChanging();
					this._AssemblingMode = value;
					this.SendPropertyChanged("AssemblingMode");
					this.OnAssemblingModeChanged();
				}
			}
		}
		
		[Column(Storage="_AssemblingStatus", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AssemblingStatus
		{
			get
			{
				return this._AssemblingStatus;
			}
			set
			{
				if ((this._AssemblingStatus != value))
				{
					this.OnAssemblingStatusChanging(value);
					this.SendPropertyChanging();
					this._AssemblingStatus = value;
					this.SendPropertyChanged("AssemblingStatus");
					this.OnAssemblingStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ZPX_MeasureData")]
	public partial class ZPX_MeasureData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _零件扫描码;
		
		private System.Nullable<decimal> _测量数据;
		
		private System.DateTime _装配时间;
		
		private string _装配人员;
		
		private string _备注;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void On零件扫描码Changing(string value);
    partial void On零件扫描码Changed();
    partial void On测量数据Changing(System.Nullable<decimal> value);
    partial void On测量数据Changed();
    partial void On装配时间Changing(System.DateTime value);
    partial void On装配时间Changed();
    partial void On装配人员Changing(string value);
    partial void On装配人员Changed();
    partial void On备注Changing(string value);
    partial void On备注Changed();
    #endregion
		
		public ZPX_MeasureData()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_零件扫描码", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 零件扫描码
		{
			get
			{
				return this._零件扫描码;
			}
			set
			{
				if ((this._零件扫描码 != value))
				{
					this.On零件扫描码Changing(value);
					this.SendPropertyChanging();
					this._零件扫描码 = value;
					this.SendPropertyChanged("零件扫描码");
					this.On零件扫描码Changed();
				}
			}
		}
		
		[Column(Storage="_测量数据", DbType="Money")]
		public System.Nullable<decimal> 测量数据
		{
			get
			{
				return this._测量数据;
			}
			set
			{
				if ((this._测量数据 != value))
				{
					this.On测量数据Changing(value);
					this.SendPropertyChanging();
					this._测量数据 = value;
					this.SendPropertyChanged("测量数据");
					this.On测量数据Changed();
				}
			}
		}
		
		[Column(Storage="_装配时间", DbType="DateTime NOT NULL")]
		public System.DateTime 装配时间
		{
			get
			{
				return this._装配时间;
			}
			set
			{
				if ((this._装配时间 != value))
				{
					this.On装配时间Changing(value);
					this.SendPropertyChanging();
					this._装配时间 = value;
					this.SendPropertyChanged("装配时间");
					this.On装配时间Changed();
				}
			}
		}
		
		[Column(Storage="_装配人员", DbType="NVarChar(50)")]
		public string 装配人员
		{
			get
			{
				return this._装配人员;
			}
			set
			{
				if ((this._装配人员 != value))
				{
					this.On装配人员Changing(value);
					this.SendPropertyChanging();
					this._装配人员 = value;
					this.SendPropertyChanged("装配人员");
					this.On装配人员Changed();
				}
			}
		}
		
		[Column(Storage="_备注", DbType="NVarChar(MAX)")]
		public string 备注
		{
			get
			{
				return this._备注;
			}
			set
			{
				if ((this._备注 != value))
				{
					this.On备注Changing(value);
					this.SendPropertyChanging();
					this._备注 = value;
					this.SendPropertyChanged("备注");
					this.On备注Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ZPX_PartNameWithUniqueCode")]
	public partial class ZPX_PartNameWithUniqueCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _GoodsName;
		
		private bool _AllowReiteration;
		
		private string _PreUniqueCode;
		
		private string _Position;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGoodsNameChanging(string value);
    partial void OnGoodsNameChanged();
    partial void OnAllowReiterationChanging(bool value);
    partial void OnAllowReiterationChanged();
    partial void OnPreUniqueCodeChanging(string value);
    partial void OnPreUniqueCodeChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    #endregion
		
		public ZPX_PartNameWithUniqueCode()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_GoodsName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GoodsName
		{
			get
			{
				return this._GoodsName;
			}
			set
			{
				if ((this._GoodsName != value))
				{
					this.OnGoodsNameChanging(value);
					this.SendPropertyChanging();
					this._GoodsName = value;
					this.SendPropertyChanged("GoodsName");
					this.OnGoodsNameChanged();
				}
			}
		}
		
		[Column(Storage="_AllowReiteration", DbType="Bit NOT NULL")]
		public bool AllowReiteration
		{
			get
			{
				return this._AllowReiteration;
			}
			set
			{
				if ((this._AllowReiteration != value))
				{
					this.OnAllowReiterationChanging(value);
					this.SendPropertyChanging();
					this._AllowReiteration = value;
					this.SendPropertyChanged("AllowReiteration");
					this.OnAllowReiterationChanged();
				}
			}
		}
		
		[Column(Storage="_PreUniqueCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PreUniqueCode
		{
			get
			{
				return this._PreUniqueCode;
			}
			set
			{
				if ((this._PreUniqueCode != value))
				{
					this.OnPreUniqueCodeChanging(value);
					this.SendPropertyChanging();
					this._PreUniqueCode = value;
					this.SendPropertyChanged("PreUniqueCode");
					this.OnPreUniqueCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ZPX_TorqueMachineConfig")]
	public partial class ZPX_TorqueMachineConfig
	{
		
		private int _ID;
		
		private string _工位;
		
		private string _零件图号;
		
		private string _零件名称;
		
		private string _零件规格;
		
		private int _拧紧机端口号;
		
		private string _记录模式;
		
		private float _目标扭矩;
		
		private float _扭矩上限;
		
		private float _扭矩下限;
		
		public ZPX_TorqueMachineConfig()
		{
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_工位", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 工位
		{
			get
			{
				return this._工位;
			}
			set
			{
				if ((this._工位 != value))
				{
					this._工位 = value;
				}
			}
		}
		
		[Column(Storage="_零件图号", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 零件图号
		{
			get
			{
				return this._零件图号;
			}
			set
			{
				if ((this._零件图号 != value))
				{
					this._零件图号 = value;
				}
			}
		}
		
		[Column(Storage="_零件名称", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 零件名称
		{
			get
			{
				return this._零件名称;
			}
			set
			{
				if ((this._零件名称 != value))
				{
					this._零件名称 = value;
				}
			}
		}
		
		[Column(Storage="_零件规格", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 零件规格
		{
			get
			{
				return this._零件规格;
			}
			set
			{
				if ((this._零件规格 != value))
				{
					this._零件规格 = value;
				}
			}
		}
		
		[Column(Storage="_拧紧机端口号", DbType="Int NOT NULL")]
		public int 拧紧机端口号
		{
			get
			{
				return this._拧紧机端口号;
			}
			set
			{
				if ((this._拧紧机端口号 != value))
				{
					this._拧紧机端口号 = value;
				}
			}
		}
		
		[Column(Storage="_记录模式", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string 记录模式
		{
			get
			{
				return this._记录模式;
			}
			set
			{
				if ((this._记录模式 != value))
				{
					this._记录模式 = value;
				}
			}
		}
		
		[Column(Storage="_目标扭矩", DbType="Real NOT NULL")]
		public float 目标扭矩
		{
			get
			{
				return this._目标扭矩;
			}
			set
			{
				if ((this._目标扭矩 != value))
				{
					this._目标扭矩 = value;
				}
			}
		}
		
		[Column(Storage="_扭矩上限", DbType="Real NOT NULL")]
		public float 扭矩上限
		{
			get
			{
				return this._扭矩上限;
			}
			set
			{
				if ((this._扭矩上限 != value))
				{
					this._扭矩上限 = value;
				}
			}
		}
		
		[Column(Storage="_扭矩下限", DbType="Real NOT NULL")]
		public float 扭矩下限
		{
			get
			{
				return this._扭矩下限;
			}
			set
			{
				if ((this._扭矩下限 != value))
				{
					this._扭矩下限 = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.ZPX_TorqueMachineResult")]
	public partial class ZPX_TorqueMachineResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _工位;
		
		private string _结果;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On工位Changing(string value);
    partial void On工位Changed();
    partial void On结果Changing(string value);
    partial void On结果Changed();
    #endregion
		
		public ZPX_TorqueMachineResult()
		{
			OnCreated();
		}
		
		[Column(Storage="_工位", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string 工位
		{
			get
			{
				return this._工位;
			}
			set
			{
				if ((this._工位 != value))
				{
					this.On工位Changing(value);
					this.SendPropertyChanging();
					this._工位 = value;
					this.SendPropertyChanged("工位");
					this.On工位Changed();
				}
			}
		}
		
		[Column(Storage="_结果", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string 结果
		{
			get
			{
				return this._结果;
			}
			set
			{
				if ((this._结果 != value))
				{
					this.On结果Changing(value);
					this.SendPropertyChanging();
					this._结果 = value;
					this.SendPropertyChanged("结果");
					this.On结果Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ZPX_WorkBenchType")]
	public partial class ZPX_WorkBenchType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _WorkBench;
		
		private string _WorkBenchType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkBenchChanging(string value);
    partial void OnWorkBenchChanged();
    partial void OnWorkBenchTypeChanging(string value);
    partial void OnWorkBenchTypeChanged();
    #endregion
		
		public ZPX_WorkBenchType()
		{
			OnCreated();
		}
		
		[Column(Storage="_WorkBench", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string WorkBench
		{
			get
			{
				return this._WorkBench;
			}
			set
			{
				if ((this._WorkBench != value))
				{
					this.OnWorkBenchChanging(value);
					this.SendPropertyChanging();
					this._WorkBench = value;
					this.SendPropertyChanged("WorkBench");
					this.OnWorkBenchChanged();
				}
			}
		}
		
		[Column(Storage="_WorkBenchType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string WorkBenchType
		{
			get
			{
				return this._WorkBenchType;
			}
			set
			{
				if ((this._WorkBenchType != value))
				{
					this.OnWorkBenchTypeChanging(value);
					this.SendPropertyChanging();
					this._WorkBenchType = value;
					this.SendPropertyChanged("WorkBenchType");
					this.OnWorkBenchTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ZZZ_MeasureData")]
	public partial class ZZZ_MeasureData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _变速箱号;
		
		private string _零件名称;
		
		private double _测量数据;
		
		private System.DateTime _装配时间;
		
		private string _装配人员;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void On变速箱号Changing(string value);
    partial void On变速箱号Changed();
    partial void On零件名称Changing(string value);
    partial void On零件名称Changed();
    partial void On测量数据Changing(double value);
    partial void On测量数据Changed();
    partial void On装配时间Changing(System.DateTime value);
    partial void On装配时间Changed();
    partial void On装配人员Changing(string value);
    partial void On装配人员Changed();
    #endregion
		
		public ZZZ_MeasureData()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_变速箱号", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 变速箱号
		{
			get
			{
				return this._变速箱号;
			}
			set
			{
				if ((this._变速箱号 != value))
				{
					this.On变速箱号Changing(value);
					this.SendPropertyChanging();
					this._变速箱号 = value;
					this.SendPropertyChanged("变速箱号");
					this.On变速箱号Changed();
				}
			}
		}
		
		[Column(Storage="_零件名称", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 零件名称
		{
			get
			{
				return this._零件名称;
			}
			set
			{
				if ((this._零件名称 != value))
				{
					this.On零件名称Changing(value);
					this.SendPropertyChanging();
					this._零件名称 = value;
					this.SendPropertyChanged("零件名称");
					this.On零件名称Changed();
				}
			}
		}
		
		[Column(Storage="_测量数据", DbType="Float NOT NULL")]
		public double 测量数据
		{
			get
			{
				return this._测量数据;
			}
			set
			{
				if ((this._测量数据 != value))
				{
					this.On测量数据Changing(value);
					this.SendPropertyChanging();
					this._测量数据 = value;
					this.SendPropertyChanged("测量数据");
					this.On测量数据Changed();
				}
			}
		}
		
		[Column(Storage="_装配时间", DbType="DateTime NOT NULL")]
		public System.DateTime 装配时间
		{
			get
			{
				return this._装配时间;
			}
			set
			{
				if ((this._装配时间 != value))
				{
					this.On装配时间Changing(value);
					this.SendPropertyChanging();
					this._装配时间 = value;
					this.SendPropertyChanged("装配时间");
					this.On装配时间Changed();
				}
			}
		}
		
		[Column(Storage="_装配人员", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 装配人员
		{
			get
			{
				return this._装配人员;
			}
			set
			{
				if ((this._装配人员 != value))
				{
					this.On装配人员Changing(value);
					this.SendPropertyChanging();
					this._装配人员 = value;
					this.SendPropertyChanged("装配人员");
					this.On装配人员Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ZZZ_ParentInfoOfWorkBench")]
	public partial class ZZZ_ParentInfoOfWorkBench : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Workbench;
		
		private string _ParentName;
		
		private string _Remark;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkbenchChanging(string value);
    partial void OnWorkbenchChanged();
    partial void OnParentNameChanging(string value);
    partial void OnParentNameChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public ZZZ_ParentInfoOfWorkBench()
		{
			OnCreated();
		}
		
		[Column(Storage="_Workbench", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Workbench
		{
			get
			{
				return this._Workbench;
			}
			set
			{
				if ((this._Workbench != value))
				{
					this.OnWorkbenchChanging(value);
					this.SendPropertyChanging();
					this._Workbench = value;
					this.SendPropertyChanged("Workbench");
					this.OnWorkbenchChanged();
				}
			}
		}
		
		[Column(Storage="_ParentName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ParentName
		{
			get
			{
				return this._ParentName;
			}
			set
			{
				if ((this._ParentName != value))
				{
					this.OnParentNameChanging(value);
					this.SendPropertyChanging();
					this._ParentName = value;
					this.SendPropertyChanged("ParentName");
					this.OnParentNameChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ZZZ_MeasurePartConfig")]
	public partial class ZZZ_MeasurePartConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _产品名称;
		
		private string _零件名称;
		
		private string _提示信息;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On产品名称Changing(string value);
    partial void On产品名称Changed();
    partial void On零件名称Changing(string value);
    partial void On零件名称Changed();
    partial void On提示信息Changing(string value);
    partial void On提示信息Changed();
    #endregion
		
		public ZZZ_MeasurePartConfig()
		{
			OnCreated();
		}
		
		[Column(Storage="_产品名称", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string 产品名称
		{
			get
			{
				return this._产品名称;
			}
			set
			{
				if ((this._产品名称 != value))
				{
					this.On产品名称Changing(value);
					this.SendPropertyChanging();
					this._产品名称 = value;
					this.SendPropertyChanged("产品名称");
					this.On产品名称Changed();
				}
			}
		}
		
		[Column(Storage="_零件名称", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string 零件名称
		{
			get
			{
				return this._零件名称;
			}
			set
			{
				if ((this._零件名称 != value))
				{
					this.On零件名称Changing(value);
					this.SendPropertyChanging();
					this._零件名称 = value;
					this.SendPropertyChanged("零件名称");
					this.On零件名称Changed();
				}
			}
		}
		
		[Column(Storage="_提示信息", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string 提示信息
		{
			get
			{
				return this._提示信息;
			}
			set
			{
				if ((this._提示信息 != value))
				{
					this.On提示信息Changing(value);
					this.SendPropertyChanging();
					this._提示信息 = value;
					this.SendPropertyChanged("提示信息");
					this.On提示信息Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ZPX_ProductWorkbenchConfig")]
	public partial class ZPX_ProductWorkbenchConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _产品类型;
		
		private string _当前工位;
		
		private string _分总成名称;
		
		private string _上道工位;
		
		private bool _是本阶段起始工位;
		
		private bool _是本阶段末工位;
		
		private bool _是气密性检测工位;
		
		private bool _是所有产品通用工位;
		
		private bool _是按顺序流水号装配;
		
		private string _需测量总成名称;
		
		private int _按序装配末道工序值;
		
		private int _按序装配端口号;
		
		private System.Nullable<System.DateTime> _屏蔽开始时间;
		
		private System.Nullable<System.DateTime> _屏蔽终止时间;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On产品类型Changing(string value);
    partial void On产品类型Changed();
    partial void On当前工位Changing(string value);
    partial void On当前工位Changed();
    partial void On分总成名称Changing(string value);
    partial void On分总成名称Changed();
    partial void On上道工位Changing(string value);
    partial void On上道工位Changed();
    partial void On是本阶段起始工位Changing(bool value);
    partial void On是本阶段起始工位Changed();
    partial void On是本阶段末工位Changing(bool value);
    partial void On是本阶段末工位Changed();
    partial void On是气密性检测工位Changing(bool value);
    partial void On是气密性检测工位Changed();
    partial void On是所有产品通用工位Changing(bool value);
    partial void On是所有产品通用工位Changed();
    partial void On是按顺序流水号装配Changing(bool value);
    partial void On是按顺序流水号装配Changed();
    partial void On需测量总成名称Changing(string value);
    partial void On需测量总成名称Changed();
    partial void On按序装配末道工序值Changing(int value);
    partial void On按序装配末道工序值Changed();
    partial void On按序装配端口号Changing(int value);
    partial void On按序装配端口号Changed();
    partial void On屏蔽开始时间Changing(System.Nullable<System.DateTime> value);
    partial void On屏蔽开始时间Changed();
    partial void On屏蔽终止时间Changing(System.Nullable<System.DateTime> value);
    partial void On屏蔽终止时间Changed();
    #endregion
		
		public ZPX_ProductWorkbenchConfig()
		{
			OnCreated();
		}
		
		[Column(Storage="_产品类型", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string 产品类型
		{
			get
			{
				return this._产品类型;
			}
			set
			{
				if ((this._产品类型 != value))
				{
					this.On产品类型Changing(value);
					this.SendPropertyChanging();
					this._产品类型 = value;
					this.SendPropertyChanged("产品类型");
					this.On产品类型Changed();
				}
			}
		}
		
		[Column(Storage="_当前工位", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string 当前工位
		{
			get
			{
				return this._当前工位;
			}
			set
			{
				if ((this._当前工位 != value))
				{
					this.On当前工位Changing(value);
					this.SendPropertyChanging();
					this._当前工位 = value;
					this.SendPropertyChanged("当前工位");
					this.On当前工位Changed();
				}
			}
		}
		
		[Column(Storage="_分总成名称", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string 分总成名称
		{
			get
			{
				return this._分总成名称;
			}
			set
			{
				if ((this._分总成名称 != value))
				{
					this.On分总成名称Changing(value);
					this.SendPropertyChanging();
					this._分总成名称 = value;
					this.SendPropertyChanged("分总成名称");
					this.On分总成名称Changed();
				}
			}
		}
		
		[Column(Storage="_上道工位", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 上道工位
		{
			get
			{
				return this._上道工位;
			}
			set
			{
				if ((this._上道工位 != value))
				{
					this.On上道工位Changing(value);
					this.SendPropertyChanging();
					this._上道工位 = value;
					this.SendPropertyChanged("上道工位");
					this.On上道工位Changed();
				}
			}
		}
		
		[Column(Storage="_是本阶段起始工位", DbType="Bit NOT NULL")]
		public bool 是本阶段起始工位
		{
			get
			{
				return this._是本阶段起始工位;
			}
			set
			{
				if ((this._是本阶段起始工位 != value))
				{
					this.On是本阶段起始工位Changing(value);
					this.SendPropertyChanging();
					this._是本阶段起始工位 = value;
					this.SendPropertyChanged("是本阶段起始工位");
					this.On是本阶段起始工位Changed();
				}
			}
		}
		
		[Column(Storage="_是本阶段末工位", DbType="Bit NOT NULL")]
		public bool 是本阶段末工位
		{
			get
			{
				return this._是本阶段末工位;
			}
			set
			{
				if ((this._是本阶段末工位 != value))
				{
					this.On是本阶段末工位Changing(value);
					this.SendPropertyChanging();
					this._是本阶段末工位 = value;
					this.SendPropertyChanged("是本阶段末工位");
					this.On是本阶段末工位Changed();
				}
			}
		}
		
		[Column(Storage="_是气密性检测工位", DbType="Bit NOT NULL")]
		public bool 是气密性检测工位
		{
			get
			{
				return this._是气密性检测工位;
			}
			set
			{
				if ((this._是气密性检测工位 != value))
				{
					this.On是气密性检测工位Changing(value);
					this.SendPropertyChanging();
					this._是气密性检测工位 = value;
					this.SendPropertyChanged("是气密性检测工位");
					this.On是气密性检测工位Changed();
				}
			}
		}
		
		[Column(Storage="_是所有产品通用工位", DbType="Bit NOT NULL")]
		public bool 是所有产品通用工位
		{
			get
			{
				return this._是所有产品通用工位;
			}
			set
			{
				if ((this._是所有产品通用工位 != value))
				{
					this.On是所有产品通用工位Changing(value);
					this.SendPropertyChanging();
					this._是所有产品通用工位 = value;
					this.SendPropertyChanged("是所有产品通用工位");
					this.On是所有产品通用工位Changed();
				}
			}
		}
		
		[Column(Storage="_是按顺序流水号装配", DbType="Bit NOT NULL")]
		public bool 是按顺序流水号装配
		{
			get
			{
				return this._是按顺序流水号装配;
			}
			set
			{
				if ((this._是按顺序流水号装配 != value))
				{
					this.On是按顺序流水号装配Changing(value);
					this.SendPropertyChanging();
					this._是按顺序流水号装配 = value;
					this.SendPropertyChanged("是按顺序流水号装配");
					this.On是按顺序流水号装配Changed();
				}
			}
		}
		
		[Column(Storage="_需测量总成名称", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string 需测量总成名称
		{
			get
			{
				return this._需测量总成名称;
			}
			set
			{
				if ((this._需测量总成名称 != value))
				{
					this.On需测量总成名称Changing(value);
					this.SendPropertyChanging();
					this._需测量总成名称 = value;
					this.SendPropertyChanged("需测量总成名称");
					this.On需测量总成名称Changed();
				}
			}
		}
		
		[Column(Storage="_按序装配末道工序值", DbType="Int NOT NULL")]
		public int 按序装配末道工序值
		{
			get
			{
				return this._按序装配末道工序值;
			}
			set
			{
				if ((this._按序装配末道工序值 != value))
				{
					this.On按序装配末道工序值Changing(value);
					this.SendPropertyChanging();
					this._按序装配末道工序值 = value;
					this.SendPropertyChanged("按序装配末道工序值");
					this.On按序装配末道工序值Changed();
				}
			}
		}
		
		[Column(Storage="_按序装配端口号", DbType="Int NOT NULL")]
		public int 按序装配端口号
		{
			get
			{
				return this._按序装配端口号;
			}
			set
			{
				if ((this._按序装配端口号 != value))
				{
					this.On按序装配端口号Changing(value);
					this.SendPropertyChanging();
					this._按序装配端口号 = value;
					this.SendPropertyChanged("按序装配端口号");
					this.On按序装配端口号Changed();
				}
			}
		}
		
		[Column(Storage="_屏蔽开始时间", DbType="DateTime")]
		public System.Nullable<System.DateTime> 屏蔽开始时间
		{
			get
			{
				return this._屏蔽开始时间;
			}
			set
			{
				if ((this._屏蔽开始时间 != value))
				{
					this.On屏蔽开始时间Changing(value);
					this.SendPropertyChanging();
					this._屏蔽开始时间 = value;
					this.SendPropertyChanged("屏蔽开始时间");
					this.On屏蔽开始时间Changed();
				}
			}
		}
		
		[Column(Storage="_屏蔽终止时间", DbType="DateTime")]
		public System.Nullable<System.DateTime> 屏蔽终止时间
		{
			get
			{
				return this._屏蔽终止时间;
			}
			set
			{
				if ((this._屏蔽终止时间 != value))
				{
					this.On屏蔽终止时间Changing(value);
					this.SendPropertyChanging();
					this._屏蔽终止时间 = value;
					this.SendPropertyChanged("屏蔽终止时间");
					this.On屏蔽终止时间Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ZPX_WorkBenchConfig")]
	public partial class ZPX_WorkBenchConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _启用标志;
		
		private string _工位;
		
		private string _新工位;
		
		private string _服务器IP地址;
		
		private int _服务器端口;
		
		private int _应答延时;
		
		private string _允许实例个数;
		
		private bool _是否清除总成装配信息;
		
		private string _工位类型;
		
		private int _端口号1;
		
		private int _端口号2;
		
		private string _高级用户;
		
		private bool _是按顺序流水号装配;
		
		private string _需测量总成名称;
		
		private int _按序装配末道工序值;
		
		private int _按序装配端口号;
		
		private int _用途编号;
		
		private bool _是气密性检测工位;
		
		private string _备注;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On启用标志Changing(bool value);
    partial void On启用标志Changed();
    partial void On工位Changing(string value);
    partial void On工位Changed();
    partial void On新工位Changing(string value);
    partial void On新工位Changed();
    partial void On服务器IP地址Changing(string value);
    partial void On服务器IP地址Changed();
    partial void On服务器端口Changing(int value);
    partial void On服务器端口Changed();
    partial void On应答延时Changing(int value);
    partial void On应答延时Changed();
    partial void On允许实例个数Changing(string value);
    partial void On允许实例个数Changed();
    partial void On是否清除总成装配信息Changing(bool value);
    partial void On是否清除总成装配信息Changed();
    partial void On工位类型Changing(string value);
    partial void On工位类型Changed();
    partial void On端口号1Changing(int value);
    partial void On端口号1Changed();
    partial void On端口号2Changing(int value);
    partial void On端口号2Changed();
    partial void On高级用户Changing(string value);
    partial void On高级用户Changed();
    partial void On是按顺序流水号装配Changing(bool value);
    partial void On是按顺序流水号装配Changed();
    partial void On需测量总成名称Changing(string value);
    partial void On需测量总成名称Changed();
    partial void On按序装配末道工序值Changing(int value);
    partial void On按序装配末道工序值Changed();
    partial void On按序装配端口号Changing(int value);
    partial void On按序装配端口号Changed();
    partial void On用途编号Changing(int value);
    partial void On用途编号Changed();
    partial void On是气密性检测工位Changing(bool value);
    partial void On是气密性检测工位Changed();
    partial void On备注Changing(string value);
    partial void On备注Changed();
    #endregion
		
		public ZPX_WorkBenchConfig()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_启用标志", DbType="Bit NOT NULL")]
		public bool 启用标志
		{
			get
			{
				return this._启用标志;
			}
			set
			{
				if ((this._启用标志 != value))
				{
					this.On启用标志Changing(value);
					this.SendPropertyChanging();
					this._启用标志 = value;
					this.SendPropertyChanged("启用标志");
					this.On启用标志Changed();
				}
			}
		}
		
		[Column(Storage="_工位", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 工位
		{
			get
			{
				return this._工位;
			}
			set
			{
				if ((this._工位 != value))
				{
					this.On工位Changing(value);
					this.SendPropertyChanging();
					this._工位 = value;
					this.SendPropertyChanged("工位");
					this.On工位Changed();
				}
			}
		}
		
		[Column(Storage="_新工位", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 新工位
		{
			get
			{
				return this._新工位;
			}
			set
			{
				if ((this._新工位 != value))
				{
					this.On新工位Changing(value);
					this.SendPropertyChanging();
					this._新工位 = value;
					this.SendPropertyChanged("新工位");
					this.On新工位Changed();
				}
			}
		}
		
		[Column(Storage="_服务器IP地址", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 服务器IP地址
		{
			get
			{
				return this._服务器IP地址;
			}
			set
			{
				if ((this._服务器IP地址 != value))
				{
					this.On服务器IP地址Changing(value);
					this.SendPropertyChanging();
					this._服务器IP地址 = value;
					this.SendPropertyChanged("服务器IP地址");
					this.On服务器IP地址Changed();
				}
			}
		}
		
		[Column(Storage="_服务器端口", DbType="Int NOT NULL")]
		public int 服务器端口
		{
			get
			{
				return this._服务器端口;
			}
			set
			{
				if ((this._服务器端口 != value))
				{
					this.On服务器端口Changing(value);
					this.SendPropertyChanging();
					this._服务器端口 = value;
					this.SendPropertyChanged("服务器端口");
					this.On服务器端口Changed();
				}
			}
		}
		
		[Column(Storage="_应答延时", DbType="Int NOT NULL")]
		public int 应答延时
		{
			get
			{
				return this._应答延时;
			}
			set
			{
				if ((this._应答延时 != value))
				{
					this.On应答延时Changing(value);
					this.SendPropertyChanging();
					this._应答延时 = value;
					this.SendPropertyChanged("应答延时");
					this.On应答延时Changed();
				}
			}
		}
		
		[Column(Storage="_允许实例个数", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string 允许实例个数
		{
			get
			{
				return this._允许实例个数;
			}
			set
			{
				if ((this._允许实例个数 != value))
				{
					this.On允许实例个数Changing(value);
					this.SendPropertyChanging();
					this._允许实例个数 = value;
					this.SendPropertyChanged("允许实例个数");
					this.On允许实例个数Changed();
				}
			}
		}
		
		[Column(Storage="_是否清除总成装配信息", DbType="Bit NOT NULL")]
		public bool 是否清除总成装配信息
		{
			get
			{
				return this._是否清除总成装配信息;
			}
			set
			{
				if ((this._是否清除总成装配信息 != value))
				{
					this.On是否清除总成装配信息Changing(value);
					this.SendPropertyChanging();
					this._是否清除总成装配信息 = value;
					this.SendPropertyChanged("是否清除总成装配信息");
					this.On是否清除总成装配信息Changed();
				}
			}
		}
		
		[Column(Storage="_工位类型", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 工位类型
		{
			get
			{
				return this._工位类型;
			}
			set
			{
				if ((this._工位类型 != value))
				{
					this.On工位类型Changing(value);
					this.SendPropertyChanging();
					this._工位类型 = value;
					this.SendPropertyChanged("工位类型");
					this.On工位类型Changed();
				}
			}
		}
		
		[Column(Storage="_端口号1", DbType="Int NOT NULL")]
		public int 端口号1
		{
			get
			{
				return this._端口号1;
			}
			set
			{
				if ((this._端口号1 != value))
				{
					this.On端口号1Changing(value);
					this.SendPropertyChanging();
					this._端口号1 = value;
					this.SendPropertyChanged("端口号1");
					this.On端口号1Changed();
				}
			}
		}
		
		[Column(Storage="_端口号2", DbType="Int NOT NULL")]
		public int 端口号2
		{
			get
			{
				return this._端口号2;
			}
			set
			{
				if ((this._端口号2 != value))
				{
					this.On端口号2Changing(value);
					this.SendPropertyChanging();
					this._端口号2 = value;
					this.SendPropertyChanged("端口号2");
					this.On端口号2Changed();
				}
			}
		}
		
		[Column(Storage="_高级用户", DbType="VarChar(50)")]
		public string 高级用户
		{
			get
			{
				return this._高级用户;
			}
			set
			{
				if ((this._高级用户 != value))
				{
					this.On高级用户Changing(value);
					this.SendPropertyChanging();
					this._高级用户 = value;
					this.SendPropertyChanged("高级用户");
					this.On高级用户Changed();
				}
			}
		}
		
		[Column(Storage="_是按顺序流水号装配", DbType="Bit NOT NULL")]
		public bool 是按顺序流水号装配
		{
			get
			{
				return this._是按顺序流水号装配;
			}
			set
			{
				if ((this._是按顺序流水号装配 != value))
				{
					this.On是按顺序流水号装配Changing(value);
					this.SendPropertyChanging();
					this._是按顺序流水号装配 = value;
					this.SendPropertyChanged("是按顺序流水号装配");
					this.On是按顺序流水号装配Changed();
				}
			}
		}
		
		[Column(Storage="_需测量总成名称", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string 需测量总成名称
		{
			get
			{
				return this._需测量总成名称;
			}
			set
			{
				if ((this._需测量总成名称 != value))
				{
					this.On需测量总成名称Changing(value);
					this.SendPropertyChanging();
					this._需测量总成名称 = value;
					this.SendPropertyChanged("需测量总成名称");
					this.On需测量总成名称Changed();
				}
			}
		}
		
		[Column(Storage="_按序装配末道工序值", DbType="Int NOT NULL")]
		public int 按序装配末道工序值
		{
			get
			{
				return this._按序装配末道工序值;
			}
			set
			{
				if ((this._按序装配末道工序值 != value))
				{
					this.On按序装配末道工序值Changing(value);
					this.SendPropertyChanging();
					this._按序装配末道工序值 = value;
					this.SendPropertyChanged("按序装配末道工序值");
					this.On按序装配末道工序值Changed();
				}
			}
		}
		
		[Column(Storage="_按序装配端口号", DbType="Int NOT NULL")]
		public int 按序装配端口号
		{
			get
			{
				return this._按序装配端口号;
			}
			set
			{
				if ((this._按序装配端口号 != value))
				{
					this.On按序装配端口号Changing(value);
					this.SendPropertyChanging();
					this._按序装配端口号 = value;
					this.SendPropertyChanged("按序装配端口号");
					this.On按序装配端口号Changed();
				}
			}
		}
		
		[Column(Storage="_用途编号", DbType="Int NOT NULL")]
		public int 用途编号
		{
			get
			{
				return this._用途编号;
			}
			set
			{
				if ((this._用途编号 != value))
				{
					this.On用途编号Changing(value);
					this.SendPropertyChanging();
					this._用途编号 = value;
					this.SendPropertyChanged("用途编号");
					this.On用途编号Changed();
				}
			}
		}
		
		[Column(Storage="_是气密性检测工位", DbType="Bit NOT NULL")]
		public bool 是气密性检测工位
		{
			get
			{
				return this._是气密性检测工位;
			}
			set
			{
				if ((this._是气密性检测工位 != value))
				{
					this.On是气密性检测工位Changing(value);
					this.SendPropertyChanging();
					this._是气密性检测工位 = value;
					this.SendPropertyChanged("是气密性检测工位");
					this.On是气密性检测工位Changed();
				}
			}
		}
		
		[Column(Storage="_备注", DbType="VarChar(100)")]
		public string 备注
		{
			get
			{
				return this._备注;
			}
			set
			{
				if ((this._备注 != value))
				{
					this.On备注Changing(value);
					this.SendPropertyChanging();
					this._备注 = value;
					this.SendPropertyChanged("备注");
					this.On备注Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.View_ZPX_ProductWorkbenchConfig")]
	public partial class View_ZPX_ProductWorkbenchConfig
	{
		
		private string _产品类型;
		
		private string _当前工位;
		
		private string _分总成名称;
		
		private string _上道工位;
		
		private bool _是本阶段起始工位;
		
		private bool _是本阶段末工位;
		
		private bool _是气密性检测工位;
		
		private bool _是所有产品通用工位;
		
		private string _允许实例个数;
		
		private int _端口号1;
		
		private int _端口号2;
		
		private string _高级用户;
		
		private bool _是按顺序流水号装配;
		
		private string _需测量总成名称;
		
		private int _按序装配末道工序值;
		
		private int _按序装配端口号;
		
		private int _用途编号;
		
		private string _用途;
		
		public View_ZPX_ProductWorkbenchConfig()
		{
		}
		
		[Column(Storage="_产品类型", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string 产品类型
		{
			get
			{
				return this._产品类型;
			}
			set
			{
				if ((this._产品类型 != value))
				{
					this._产品类型 = value;
				}
			}
		}
		
		[Column(Storage="_当前工位", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 当前工位
		{
			get
			{
				return this._当前工位;
			}
			set
			{
				if ((this._当前工位 != value))
				{
					this._当前工位 = value;
				}
			}
		}
		
		[Column(Storage="_分总成名称", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string 分总成名称
		{
			get
			{
				return this._分总成名称;
			}
			set
			{
				if ((this._分总成名称 != value))
				{
					this._分总成名称 = value;
				}
			}
		}
		
		[Column(Storage="_上道工位", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 上道工位
		{
			get
			{
				return this._上道工位;
			}
			set
			{
				if ((this._上道工位 != value))
				{
					this._上道工位 = value;
				}
			}
		}
		
		[Column(Storage="_是本阶段起始工位", DbType="Bit NOT NULL")]
		public bool 是本阶段起始工位
		{
			get
			{
				return this._是本阶段起始工位;
			}
			set
			{
				if ((this._是本阶段起始工位 != value))
				{
					this._是本阶段起始工位 = value;
				}
			}
		}
		
		[Column(Storage="_是本阶段末工位", DbType="Bit NOT NULL")]
		public bool 是本阶段末工位
		{
			get
			{
				return this._是本阶段末工位;
			}
			set
			{
				if ((this._是本阶段末工位 != value))
				{
					this._是本阶段末工位 = value;
				}
			}
		}
		
		[Column(Storage="_是气密性检测工位", DbType="Bit NOT NULL")]
		public bool 是气密性检测工位
		{
			get
			{
				return this._是气密性检测工位;
			}
			set
			{
				if ((this._是气密性检测工位 != value))
				{
					this._是气密性检测工位 = value;
				}
			}
		}
		
		[Column(Storage="_是所有产品通用工位", DbType="Bit NOT NULL")]
		public bool 是所有产品通用工位
		{
			get
			{
				return this._是所有产品通用工位;
			}
			set
			{
				if ((this._是所有产品通用工位 != value))
				{
					this._是所有产品通用工位 = value;
				}
			}
		}
		
		[Column(Storage="_允许实例个数", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string 允许实例个数
		{
			get
			{
				return this._允许实例个数;
			}
			set
			{
				if ((this._允许实例个数 != value))
				{
					this._允许实例个数 = value;
				}
			}
		}
		
		[Column(Storage="_端口号1", DbType="Int NOT NULL")]
		public int 端口号1
		{
			get
			{
				return this._端口号1;
			}
			set
			{
				if ((this._端口号1 != value))
				{
					this._端口号1 = value;
				}
			}
		}
		
		[Column(Storage="_端口号2", DbType="Int NOT NULL")]
		public int 端口号2
		{
			get
			{
				return this._端口号2;
			}
			set
			{
				if ((this._端口号2 != value))
				{
					this._端口号2 = value;
				}
			}
		}
		
		[Column(Storage="_高级用户", DbType="VarChar(50)")]
		public string 高级用户
		{
			get
			{
				return this._高级用户;
			}
			set
			{
				if ((this._高级用户 != value))
				{
					this._高级用户 = value;
				}
			}
		}
		
		[Column(Storage="_是按顺序流水号装配", DbType="Bit NOT NULL")]
		public bool 是按顺序流水号装配
		{
			get
			{
				return this._是按顺序流水号装配;
			}
			set
			{
				if ((this._是按顺序流水号装配 != value))
				{
					this._是按顺序流水号装配 = value;
				}
			}
		}
		
		[Column(Storage="_需测量总成名称", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string 需测量总成名称
		{
			get
			{
				return this._需测量总成名称;
			}
			set
			{
				if ((this._需测量总成名称 != value))
				{
					this._需测量总成名称 = value;
				}
			}
		}
		
		[Column(Storage="_按序装配末道工序值", DbType="Int NOT NULL")]
		public int 按序装配末道工序值
		{
			get
			{
				return this._按序装配末道工序值;
			}
			set
			{
				if ((this._按序装配末道工序值 != value))
				{
					this._按序装配末道工序值 = value;
				}
			}
		}
		
		[Column(Storage="_按序装配端口号", DbType="Int NOT NULL")]
		public int 按序装配端口号
		{
			get
			{
				return this._按序装配端口号;
			}
			set
			{
				if ((this._按序装配端口号 != value))
				{
					this._按序装配端口号 = value;
				}
			}
		}
		
		[Column(Storage="_用途编号", DbType="Int NOT NULL")]
		public int 用途编号
		{
			get
			{
				return this._用途编号;
			}
			set
			{
				if ((this._用途编号 != value))
				{
					this._用途编号 = value;
				}
			}
		}
		
		[Column(Storage="_用途", DbType="VarChar(50)")]
		public string 用途
		{
			get
			{
				return this._用途;
			}
			set
			{
				if ((this._用途 != value))
				{
					this._用途 = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.View_ZPX_WorkBenchConfig")]
	public partial class View_ZPX_WorkBenchConfig
	{
		
		private int _ID;
		
		private string _工位;
		
		private string _新工位;
		
		private bool _启用标志;
		
		private string _服务器IP地址;
		
		private int _服务器端口;
		
		private int _应答延时;
		
		private string _允许实例个数;
		
		private bool _是否清除总成装配信息;
		
		private string _工位类型;
		
		private int _端口号1;
		
		private int _端口号2;
		
		private string _高级用户;
		
		private bool _是按顺序流水号装配;
		
		private string _需测量总成名称;
		
		private int _按序装配末道工序值;
		
		private int _按序装配端口号;
		
		private int _用途编号;
		
		private string _用途;
		
		private bool _是气密性检测工位;
		
		private string _备注;
		
		public View_ZPX_WorkBenchConfig()
		{
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_工位", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 工位
		{
			get
			{
				return this._工位;
			}
			set
			{
				if ((this._工位 != value))
				{
					this._工位 = value;
				}
			}
		}
		
		[Column(Storage="_新工位", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 新工位
		{
			get
			{
				return this._新工位;
			}
			set
			{
				if ((this._新工位 != value))
				{
					this._新工位 = value;
				}
			}
		}
		
		[Column(Storage="_启用标志", DbType="Bit NOT NULL")]
		public bool 启用标志
		{
			get
			{
				return this._启用标志;
			}
			set
			{
				if ((this._启用标志 != value))
				{
					this._启用标志 = value;
				}
			}
		}
		
		[Column(Storage="_服务器IP地址", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 服务器IP地址
		{
			get
			{
				return this._服务器IP地址;
			}
			set
			{
				if ((this._服务器IP地址 != value))
				{
					this._服务器IP地址 = value;
				}
			}
		}
		
		[Column(Storage="_服务器端口", DbType="Int NOT NULL")]
		public int 服务器端口
		{
			get
			{
				return this._服务器端口;
			}
			set
			{
				if ((this._服务器端口 != value))
				{
					this._服务器端口 = value;
				}
			}
		}
		
		[Column(Storage="_应答延时", DbType="Int NOT NULL")]
		public int 应答延时
		{
			get
			{
				return this._应答延时;
			}
			set
			{
				if ((this._应答延时 != value))
				{
					this._应答延时 = value;
				}
			}
		}
		
		[Column(Storage="_允许实例个数", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string 允许实例个数
		{
			get
			{
				return this._允许实例个数;
			}
			set
			{
				if ((this._允许实例个数 != value))
				{
					this._允许实例个数 = value;
				}
			}
		}
		
		[Column(Storage="_是否清除总成装配信息", DbType="Bit NOT NULL")]
		public bool 是否清除总成装配信息
		{
			get
			{
				return this._是否清除总成装配信息;
			}
			set
			{
				if ((this._是否清除总成装配信息 != value))
				{
					this._是否清除总成装配信息 = value;
				}
			}
		}
		
		[Column(Storage="_工位类型", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 工位类型
		{
			get
			{
				return this._工位类型;
			}
			set
			{
				if ((this._工位类型 != value))
				{
					this._工位类型 = value;
				}
			}
		}
		
		[Column(Storage="_端口号1", DbType="Int NOT NULL")]
		public int 端口号1
		{
			get
			{
				return this._端口号1;
			}
			set
			{
				if ((this._端口号1 != value))
				{
					this._端口号1 = value;
				}
			}
		}
		
		[Column(Storage="_端口号2", DbType="Int NOT NULL")]
		public int 端口号2
		{
			get
			{
				return this._端口号2;
			}
			set
			{
				if ((this._端口号2 != value))
				{
					this._端口号2 = value;
				}
			}
		}
		
		[Column(Storage="_高级用户", DbType="VarChar(50)")]
		public string 高级用户
		{
			get
			{
				return this._高级用户;
			}
			set
			{
				if ((this._高级用户 != value))
				{
					this._高级用户 = value;
				}
			}
		}
		
		[Column(Storage="_是按顺序流水号装配", DbType="Bit NOT NULL")]
		public bool 是按顺序流水号装配
		{
			get
			{
				return this._是按顺序流水号装配;
			}
			set
			{
				if ((this._是按顺序流水号装配 != value))
				{
					this._是按顺序流水号装配 = value;
				}
			}
		}
		
		[Column(Storage="_需测量总成名称", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string 需测量总成名称
		{
			get
			{
				return this._需测量总成名称;
			}
			set
			{
				if ((this._需测量总成名称 != value))
				{
					this._需测量总成名称 = value;
				}
			}
		}
		
		[Column(Storage="_按序装配末道工序值", DbType="Int NOT NULL")]
		public int 按序装配末道工序值
		{
			get
			{
				return this._按序装配末道工序值;
			}
			set
			{
				if ((this._按序装配末道工序值 != value))
				{
					this._按序装配末道工序值 = value;
				}
			}
		}
		
		[Column(Storage="_按序装配端口号", DbType="Int NOT NULL")]
		public int 按序装配端口号
		{
			get
			{
				return this._按序装配端口号;
			}
			set
			{
				if ((this._按序装配端口号 != value))
				{
					this._按序装配端口号 = value;
				}
			}
		}
		
		[Column(Storage="_用途编号", DbType="Int NOT NULL")]
		public int 用途编号
		{
			get
			{
				return this._用途编号;
			}
			set
			{
				if ((this._用途编号 != value))
				{
					this._用途编号 = value;
				}
			}
		}
		
		[Column(Storage="_用途", DbType="VarChar(50)")]
		public string 用途
		{
			get
			{
				return this._用途;
			}
			set
			{
				if ((this._用途 != value))
				{
					this._用途 = value;
				}
			}
		}
		
		[Column(Storage="_是气密性检测工位", DbType="Bit NOT NULL")]
		public bool 是气密性检测工位
		{
			get
			{
				return this._是气密性检测工位;
			}
			set
			{
				if ((this._是气密性检测工位 != value))
				{
					this._是气密性检测工位 = value;
				}
			}
		}
		
		[Column(Storage="_备注", DbType="VarChar(100)")]
		public string 备注
		{
			get
			{
				return this._备注;
			}
			set
			{
				if ((this._备注 != value))
				{
					this._备注 = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.ZPX_LeakproofParts")]
	public partial class ZPX_LeakproofParts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _工位;
		
		private string _防漏装零件图号;
		
		private string _防漏装零件名称;
		
		private string _防漏装零件规格;
		
		private int _电子秤端口号;
		
		private string _防错模式;
		
		private double _零件单重;
		
		private System.Nullable<System.DateTime> _屏蔽开始时间;
		
		private System.Nullable<System.DateTime> _屏蔽终止时间;
		
		private System.Nullable<double> _公差;
		
		private string _备注;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On工位Changing(string value);
    partial void On工位Changed();
    partial void On防漏装零件图号Changing(string value);
    partial void On防漏装零件图号Changed();
    partial void On防漏装零件名称Changing(string value);
    partial void On防漏装零件名称Changed();
    partial void On防漏装零件规格Changing(string value);
    partial void On防漏装零件规格Changed();
    partial void On电子秤端口号Changing(int value);
    partial void On电子秤端口号Changed();
    partial void On防错模式Changing(string value);
    partial void On防错模式Changed();
    partial void On零件单重Changing(double value);
    partial void On零件单重Changed();
    partial void On屏蔽开始时间Changing(System.Nullable<System.DateTime> value);
    partial void On屏蔽开始时间Changed();
    partial void On屏蔽终止时间Changing(System.Nullable<System.DateTime> value);
    partial void On屏蔽终止时间Changed();
    partial void On公差Changing(System.Nullable<double> value);
    partial void On公差Changed();
    partial void On备注Changing(string value);
    partial void On备注Changed();
    #endregion
		
		public ZPX_LeakproofParts()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_工位", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 工位
		{
			get
			{
				return this._工位;
			}
			set
			{
				if ((this._工位 != value))
				{
					this.On工位Changing(value);
					this.SendPropertyChanging();
					this._工位 = value;
					this.SendPropertyChanged("工位");
					this.On工位Changed();
				}
			}
		}
		
		[Column(Storage="_防漏装零件图号", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 防漏装零件图号
		{
			get
			{
				return this._防漏装零件图号;
			}
			set
			{
				if ((this._防漏装零件图号 != value))
				{
					this.On防漏装零件图号Changing(value);
					this.SendPropertyChanging();
					this._防漏装零件图号 = value;
					this.SendPropertyChanged("防漏装零件图号");
					this.On防漏装零件图号Changed();
				}
			}
		}
		
		[Column(Storage="_防漏装零件名称", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 防漏装零件名称
		{
			get
			{
				return this._防漏装零件名称;
			}
			set
			{
				if ((this._防漏装零件名称 != value))
				{
					this.On防漏装零件名称Changing(value);
					this.SendPropertyChanging();
					this._防漏装零件名称 = value;
					this.SendPropertyChanged("防漏装零件名称");
					this.On防漏装零件名称Changed();
				}
			}
		}
		
		[Column(Storage="_防漏装零件规格", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 防漏装零件规格
		{
			get
			{
				return this._防漏装零件规格;
			}
			set
			{
				if ((this._防漏装零件规格 != value))
				{
					this.On防漏装零件规格Changing(value);
					this.SendPropertyChanging();
					this._防漏装零件规格 = value;
					this.SendPropertyChanged("防漏装零件规格");
					this.On防漏装零件规格Changed();
				}
			}
		}
		
		[Column(Storage="_电子秤端口号", DbType="Int NOT NULL")]
		public int 电子秤端口号
		{
			get
			{
				return this._电子秤端口号;
			}
			set
			{
				if ((this._电子秤端口号 != value))
				{
					this.On电子秤端口号Changing(value);
					this.SendPropertyChanging();
					this._电子秤端口号 = value;
					this.SendPropertyChanged("电子秤端口号");
					this.On电子秤端口号Changed();
				}
			}
		}
		
		[Column(Storage="_防错模式", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string 防错模式
		{
			get
			{
				return this._防错模式;
			}
			set
			{
				if ((this._防错模式 != value))
				{
					this.On防错模式Changing(value);
					this.SendPropertyChanging();
					this._防错模式 = value;
					this.SendPropertyChanged("防错模式");
					this.On防错模式Changed();
				}
			}
		}
		
		[Column(Storage="_零件单重", DbType="Float NOT NULL")]
		public double 零件单重
		{
			get
			{
				return this._零件单重;
			}
			set
			{
				if ((this._零件单重 != value))
				{
					this.On零件单重Changing(value);
					this.SendPropertyChanging();
					this._零件单重 = value;
					this.SendPropertyChanged("零件单重");
					this.On零件单重Changed();
				}
			}
		}
		
		[Column(Storage="_屏蔽开始时间", DbType="DateTime")]
		public System.Nullable<System.DateTime> 屏蔽开始时间
		{
			get
			{
				return this._屏蔽开始时间;
			}
			set
			{
				if ((this._屏蔽开始时间 != value))
				{
					this.On屏蔽开始时间Changing(value);
					this.SendPropertyChanging();
					this._屏蔽开始时间 = value;
					this.SendPropertyChanged("屏蔽开始时间");
					this.On屏蔽开始时间Changed();
				}
			}
		}
		
		[Column(Storage="_屏蔽终止时间", DbType="DateTime")]
		public System.Nullable<System.DateTime> 屏蔽终止时间
		{
			get
			{
				return this._屏蔽终止时间;
			}
			set
			{
				if ((this._屏蔽终止时间 != value))
				{
					this.On屏蔽终止时间Changing(value);
					this.SendPropertyChanging();
					this._屏蔽终止时间 = value;
					this.SendPropertyChanged("屏蔽终止时间");
					this.On屏蔽终止时间Changed();
				}
			}
		}
		
		[Column(Storage="_公差", DbType="Float")]
		public System.Nullable<double> 公差
		{
			get
			{
				return this._公差;
			}
			set
			{
				if ((this._公差 != value))
				{
					this.On公差Changing(value);
					this.SendPropertyChanging();
					this._公差 = value;
					this.SendPropertyChanged("公差");
					this.On公差Changed();
				}
			}
		}
		
		[Column(Storage="_备注", DbType="VarChar(500)")]
		public string 备注
		{
			get
			{
				return this._备注;
			}
			set
			{
				if ((this._备注 != value))
				{
					this.On备注Changing(value);
					this.SendPropertyChanging();
					this._备注 = value;
					this.SendPropertyChanged("备注");
					this.On备注Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ZPX_CCDConfig")]
	public partial class ZPX_CCDConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _工位;
		
		private string _零件图号;
		
		private string _零件名称;
		
		private string _零件规格;
		
		private string _测点号;
		
		private string _通信模式;
		
		private byte _通信端口;
		
		private string _适用产品类型;
		
		private System.Nullable<System.DateTime> _屏蔽开始时间;
		
		private System.Nullable<System.DateTime> _屏蔽终止时间;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On工位Changing(string value);
    partial void On工位Changed();
    partial void On零件图号Changing(string value);
    partial void On零件图号Changed();
    partial void On零件名称Changing(string value);
    partial void On零件名称Changed();
    partial void On零件规格Changing(string value);
    partial void On零件规格Changed();
    partial void On测点号Changing(string value);
    partial void On测点号Changed();
    partial void On通信模式Changing(string value);
    partial void On通信模式Changed();
    partial void On通信端口Changing(byte value);
    partial void On通信端口Changed();
    partial void On适用产品类型Changing(string value);
    partial void On适用产品类型Changed();
    partial void On屏蔽开始时间Changing(System.Nullable<System.DateTime> value);
    partial void On屏蔽开始时间Changed();
    partial void On屏蔽终止时间Changing(System.Nullable<System.DateTime> value);
    partial void On屏蔽终止时间Changed();
    #endregion
		
		public ZPX_CCDConfig()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_工位", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 工位
		{
			get
			{
				return this._工位;
			}
			set
			{
				if ((this._工位 != value))
				{
					this.On工位Changing(value);
					this.SendPropertyChanging();
					this._工位 = value;
					this.SendPropertyChanged("工位");
					this.On工位Changed();
				}
			}
		}
		
		[Column(Storage="_零件图号", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 零件图号
		{
			get
			{
				return this._零件图号;
			}
			set
			{
				if ((this._零件图号 != value))
				{
					this.On零件图号Changing(value);
					this.SendPropertyChanging();
					this._零件图号 = value;
					this.SendPropertyChanged("零件图号");
					this.On零件图号Changed();
				}
			}
		}
		
		[Column(Storage="_零件名称", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 零件名称
		{
			get
			{
				return this._零件名称;
			}
			set
			{
				if ((this._零件名称 != value))
				{
					this.On零件名称Changing(value);
					this.SendPropertyChanging();
					this._零件名称 = value;
					this.SendPropertyChanged("零件名称");
					this.On零件名称Changed();
				}
			}
		}
		
		[Column(Storage="_零件规格", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 零件规格
		{
			get
			{
				return this._零件规格;
			}
			set
			{
				if ((this._零件规格 != value))
				{
					this.On零件规格Changing(value);
					this.SendPropertyChanging();
					this._零件规格 = value;
					this.SendPropertyChanged("零件规格");
					this.On零件规格Changed();
				}
			}
		}
		
		[Column(Storage="_测点号", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 测点号
		{
			get
			{
				return this._测点号;
			}
			set
			{
				if ((this._测点号 != value))
				{
					this.On测点号Changing(value);
					this.SendPropertyChanging();
					this._测点号 = value;
					this.SendPropertyChanged("测点号");
					this.On测点号Changed();
				}
			}
		}
		
		[Column(Storage="_通信模式", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 通信模式
		{
			get
			{
				return this._通信模式;
			}
			set
			{
				if ((this._通信模式 != value))
				{
					this.On通信模式Changing(value);
					this.SendPropertyChanging();
					this._通信模式 = value;
					this.SendPropertyChanged("通信模式");
					this.On通信模式Changed();
				}
			}
		}
		
		[Column(Storage="_通信端口", DbType="TinyInt NOT NULL")]
		public byte 通信端口
		{
			get
			{
				return this._通信端口;
			}
			set
			{
				if ((this._通信端口 != value))
				{
					this.On通信端口Changing(value);
					this.SendPropertyChanging();
					this._通信端口 = value;
					this.SendPropertyChanged("通信端口");
					this.On通信端口Changed();
				}
			}
		}
		
		[Column(Storage="_适用产品类型", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string 适用产品类型
		{
			get
			{
				return this._适用产品类型;
			}
			set
			{
				if ((this._适用产品类型 != value))
				{
					this.On适用产品类型Changing(value);
					this.SendPropertyChanging();
					this._适用产品类型 = value;
					this.SendPropertyChanged("适用产品类型");
					this.On适用产品类型Changed();
				}
			}
		}
		
		[Column(Storage="_屏蔽开始时间", DbType="DateTime")]
		public System.Nullable<System.DateTime> 屏蔽开始时间
		{
			get
			{
				return this._屏蔽开始时间;
			}
			set
			{
				if ((this._屏蔽开始时间 != value))
				{
					this.On屏蔽开始时间Changing(value);
					this.SendPropertyChanging();
					this._屏蔽开始时间 = value;
					this.SendPropertyChanged("屏蔽开始时间");
					this.On屏蔽开始时间Changed();
				}
			}
		}
		
		[Column(Storage="_屏蔽终止时间", DbType="DateTime")]
		public System.Nullable<System.DateTime> 屏蔽终止时间
		{
			get
			{
				return this._屏蔽终止时间;
			}
			set
			{
				if ((this._屏蔽终止时间 != value))
				{
					this.On屏蔽终止时间Changing(value);
					this.SendPropertyChanging();
					this._屏蔽终止时间 = value;
					this.SendPropertyChanged("屏蔽终止时间");
					this.On屏蔽终止时间Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
