//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.8009
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Expression.报表 {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DepotManagementDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DepotManagementDataSet : global::System.Data.DataSet {
        
        private View_ZPX_ValveTestDataItemsDataTable tableView_ZPX_ValveTestDataItems;
        
        private View_ZPX_CVTTestDataItemsDataTable tableView_ZPX_CVTTestDataItems;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DepotManagementDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DepotManagementDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["View_ZPX_ValveTestDataItems"] != null)) {
                    base.Tables.Add(new View_ZPX_ValveTestDataItemsDataTable(ds.Tables["View_ZPX_ValveTestDataItems"]));
                }
                if ((ds.Tables["View_ZPX_CVTTestDataItems"] != null)) {
                    base.Tables.Add(new View_ZPX_CVTTestDataItemsDataTable(ds.Tables["View_ZPX_CVTTestDataItems"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View_ZPX_ValveTestDataItemsDataTable View_ZPX_ValveTestDataItems {
            get {
                return this.tableView_ZPX_ValveTestDataItems;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View_ZPX_CVTTestDataItemsDataTable View_ZPX_CVTTestDataItems {
            get {
                return this.tableView_ZPX_CVTTestDataItems;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DepotManagementDataSet cln = ((DepotManagementDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["View_ZPX_ValveTestDataItems"] != null)) {
                    base.Tables.Add(new View_ZPX_ValveTestDataItemsDataTable(ds.Tables["View_ZPX_ValveTestDataItems"]));
                }
                if ((ds.Tables["View_ZPX_CVTTestDataItems"] != null)) {
                    base.Tables.Add(new View_ZPX_CVTTestDataItemsDataTable(ds.Tables["View_ZPX_CVTTestDataItems"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableView_ZPX_ValveTestDataItems = ((View_ZPX_ValveTestDataItemsDataTable)(base.Tables["View_ZPX_ValveTestDataItems"]));
            if ((initTable == true)) {
                if ((this.tableView_ZPX_ValveTestDataItems != null)) {
                    this.tableView_ZPX_ValveTestDataItems.InitVars();
                }
            }
            this.tableView_ZPX_CVTTestDataItems = ((View_ZPX_CVTTestDataItemsDataTable)(base.Tables["View_ZPX_CVTTestDataItems"]));
            if ((initTable == true)) {
                if ((this.tableView_ZPX_CVTTestDataItems != null)) {
                    this.tableView_ZPX_CVTTestDataItems.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DepotManagementDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DepotManagementDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableView_ZPX_ValveTestDataItems = new View_ZPX_ValveTestDataItemsDataTable();
            base.Tables.Add(this.tableView_ZPX_ValveTestDataItems);
            this.tableView_ZPX_CVTTestDataItems = new View_ZPX_CVTTestDataItemsDataTable();
            base.Tables.Add(this.tableView_ZPX_CVTTestDataItems);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView_ZPX_ValveTestDataItems() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView_ZPX_CVTTestDataItems() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DepotManagementDataSet ds = new DepotManagementDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void View_ZPX_ValveTestDataItemsRowChangeEventHandler(object sender, View_ZPX_ValveTestDataItemsRowChangeEvent e);
        
        public delegate void View_ZPX_CVTTestDataItemsRowChangeEventHandler(object sender, View_ZPX_CVTTestDataItemsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View_ZPX_ValveTestDataItemsDataTable : global::System.Data.TypedTableBase<View_ZPX_ValveTestDataItemsRow> {
            
            private global::System.Data.DataColumn column序号;
            
            private global::System.Data.DataColumn column阀块总成编号;
            
            private global::System.Data.DataColumn column试验结果;
            
            private global::System.Data.DataColumn column实验员;
            
            private global::System.Data.DataColumn column备注;
            
            private global::System.Data.DataColumn column日期;
            
            private global::System.Data.DataColumn column试验项目;
            
            private global::System.Data.DataColumn column数据名称;
            
            private global::System.Data.DataColumn column试验结果A;
            
            private global::System.Data.DataColumn column试验结果B;
            
            private global::System.Data.DataColumn column项目说明;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_ZPX_ValveTestDataItemsDataTable() {
                this.TableName = "View_ZPX_ValveTestDataItems";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_ZPX_ValveTestDataItemsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View_ZPX_ValveTestDataItemsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 序号Column {
                get {
                    return this.column序号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 阀块总成编号Column {
                get {
                    return this.column阀块总成编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 试验结果Column {
                get {
                    return this.column试验结果;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 实验员Column {
                get {
                    return this.column实验员;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 备注Column {
                get {
                    return this.column备注;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 日期Column {
                get {
                    return this.column日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 试验项目Column {
                get {
                    return this.column试验项目;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 数据名称Column {
                get {
                    return this.column数据名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 试验结果AColumn {
                get {
                    return this.column试验结果A;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 试验结果BColumn {
                get {
                    return this.column试验结果B;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 项目说明Column {
                get {
                    return this.column项目说明;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_ZPX_ValveTestDataItemsRow this[int index] {
                get {
                    return ((View_ZPX_ValveTestDataItemsRow)(this.Rows[index]));
                }
            }
            
            public event View_ZPX_ValveTestDataItemsRowChangeEventHandler View_ZPX_ValveTestDataItemsRowChanging;
            
            public event View_ZPX_ValveTestDataItemsRowChangeEventHandler View_ZPX_ValveTestDataItemsRowChanged;
            
            public event View_ZPX_ValveTestDataItemsRowChangeEventHandler View_ZPX_ValveTestDataItemsRowDeleting;
            
            public event View_ZPX_ValveTestDataItemsRowChangeEventHandler View_ZPX_ValveTestDataItemsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView_ZPX_ValveTestDataItemsRow(View_ZPX_ValveTestDataItemsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_ZPX_ValveTestDataItemsRow AddView_ZPX_ValveTestDataItemsRow(long 序号, string 阀块总成编号, string 试验结果, string 实验员, string 备注, System.DateTime 日期, string 试验项目, string 数据名称, string 试验结果A, string 试验结果B, string 项目说明) {
                View_ZPX_ValveTestDataItemsRow rowView_ZPX_ValveTestDataItemsRow = ((View_ZPX_ValveTestDataItemsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        序号,
                        阀块总成编号,
                        试验结果,
                        实验员,
                        备注,
                        日期,
                        试验项目,
                        数据名称,
                        试验结果A,
                        试验结果B,
                        项目说明};
                rowView_ZPX_ValveTestDataItemsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowView_ZPX_ValveTestDataItemsRow);
                return rowView_ZPX_ValveTestDataItemsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_ZPX_ValveTestDataItemsRow FindBy序号(long 序号) {
                return ((View_ZPX_ValveTestDataItemsRow)(this.Rows.Find(new object[] {
                            序号})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View_ZPX_ValveTestDataItemsDataTable cln = ((View_ZPX_ValveTestDataItemsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View_ZPX_ValveTestDataItemsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column序号 = base.Columns["序号"];
                this.column阀块总成编号 = base.Columns["阀块总成编号"];
                this.column试验结果 = base.Columns["试验结果"];
                this.column实验员 = base.Columns["实验员"];
                this.column备注 = base.Columns["备注"];
                this.column日期 = base.Columns["日期"];
                this.column试验项目 = base.Columns["试验项目"];
                this.column数据名称 = base.Columns["数据名称"];
                this.column试验结果A = base.Columns["试验结果A"];
                this.column试验结果B = base.Columns["试验结果B"];
                this.column项目说明 = base.Columns["项目说明"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column序号 = new global::System.Data.DataColumn("序号", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column序号);
                this.column阀块总成编号 = new global::System.Data.DataColumn("阀块总成编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column阀块总成编号);
                this.column试验结果 = new global::System.Data.DataColumn("试验结果", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column试验结果);
                this.column实验员 = new global::System.Data.DataColumn("实验员", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column实验员);
                this.column备注 = new global::System.Data.DataColumn("备注", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column备注);
                this.column日期 = new global::System.Data.DataColumn("日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column日期);
                this.column试验项目 = new global::System.Data.DataColumn("试验项目", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column试验项目);
                this.column数据名称 = new global::System.Data.DataColumn("数据名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column数据名称);
                this.column试验结果A = new global::System.Data.DataColumn("试验结果A", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column试验结果A);
                this.column试验结果B = new global::System.Data.DataColumn("试验结果B", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column试验结果B);
                this.column项目说明 = new global::System.Data.DataColumn("项目说明", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column项目说明);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.column序号}, true));
                this.column序号.AllowDBNull = false;
                this.column序号.Unique = true;
                this.column阀块总成编号.AllowDBNull = false;
                this.column阀块总成编号.MaxLength = 50;
                this.column试验结果.AllowDBNull = false;
                this.column试验结果.MaxLength = 200;
                this.column实验员.MaxLength = 50;
                this.column备注.MaxLength = 200;
                this.column日期.AllowDBNull = false;
                this.column试验项目.AllowDBNull = false;
                this.column试验项目.MaxLength = 100;
                this.column数据名称.AllowDBNull = false;
                this.column数据名称.MaxLength = 100;
                this.column试验结果A.AllowDBNull = false;
                this.column试验结果A.MaxLength = 50;
                this.column试验结果B.AllowDBNull = false;
                this.column试验结果B.MaxLength = 50;
                this.column项目说明.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_ZPX_ValveTestDataItemsRow NewView_ZPX_ValveTestDataItemsRow() {
                return ((View_ZPX_ValveTestDataItemsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View_ZPX_ValveTestDataItemsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View_ZPX_ValveTestDataItemsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View_ZPX_ValveTestDataItemsRowChanged != null)) {
                    this.View_ZPX_ValveTestDataItemsRowChanged(this, new View_ZPX_ValveTestDataItemsRowChangeEvent(((View_ZPX_ValveTestDataItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View_ZPX_ValveTestDataItemsRowChanging != null)) {
                    this.View_ZPX_ValveTestDataItemsRowChanging(this, new View_ZPX_ValveTestDataItemsRowChangeEvent(((View_ZPX_ValveTestDataItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View_ZPX_ValveTestDataItemsRowDeleted != null)) {
                    this.View_ZPX_ValveTestDataItemsRowDeleted(this, new View_ZPX_ValveTestDataItemsRowChangeEvent(((View_ZPX_ValveTestDataItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View_ZPX_ValveTestDataItemsRowDeleting != null)) {
                    this.View_ZPX_ValveTestDataItemsRowDeleting(this, new View_ZPX_ValveTestDataItemsRowChangeEvent(((View_ZPX_ValveTestDataItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView_ZPX_ValveTestDataItemsRow(View_ZPX_ValveTestDataItemsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DepotManagementDataSet ds = new DepotManagementDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View_ZPX_ValveTestDataItemsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View_ZPX_CVTTestDataItemsDataTable : global::System.Data.TypedTableBase<View_ZPX_CVTTestDataItemsRow> {
            
            private global::System.Data.DataColumn column序号;
            
            private global::System.Data.DataColumn column产品型号;
            
            private global::System.Data.DataColumn column产品编号;
            
            private global::System.Data.DataColumn column试验设备;
            
            private global::System.Data.DataColumn column试验油;
            
            private global::System.Data.DataColumn column结论;
            
            private global::System.Data.DataColumn column试验员;
            
            private global::System.Data.DataColumn column预装员;
            
            private global::System.Data.DataColumn column备注;
            
            private global::System.Data.DataColumn column试验日期;
            
            private global::System.Data.DataColumn column检验项目;
            
            private global::System.Data.DataColumn column试验项目;
            
            private global::System.Data.DataColumn column试验条件;
            
            private global::System.Data.DataColumn column要求;
            
            private global::System.Data.DataColumn column检测数据;
            
            private global::System.Data.DataColumn column判定;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_ZPX_CVTTestDataItemsDataTable() {
                this.TableName = "View_ZPX_CVTTestDataItems";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_ZPX_CVTTestDataItemsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View_ZPX_CVTTestDataItemsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 序号Column {
                get {
                    return this.column序号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品型号Column {
                get {
                    return this.column产品型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 产品编号Column {
                get {
                    return this.column产品编号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 试验设备Column {
                get {
                    return this.column试验设备;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 试验油Column {
                get {
                    return this.column试验油;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 结论Column {
                get {
                    return this.column结论;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 试验员Column {
                get {
                    return this.column试验员;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 预装员Column {
                get {
                    return this.column预装员;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 备注Column {
                get {
                    return this.column备注;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 试验日期Column {
                get {
                    return this.column试验日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 检验项目Column {
                get {
                    return this.column检验项目;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 试验项目Column {
                get {
                    return this.column试验项目;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 试验条件Column {
                get {
                    return this.column试验条件;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 要求Column {
                get {
                    return this.column要求;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 检测数据Column {
                get {
                    return this.column检测数据;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 判定Column {
                get {
                    return this.column判定;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_ZPX_CVTTestDataItemsRow this[int index] {
                get {
                    return ((View_ZPX_CVTTestDataItemsRow)(this.Rows[index]));
                }
            }
            
            public event View_ZPX_CVTTestDataItemsRowChangeEventHandler View_ZPX_CVTTestDataItemsRowChanging;
            
            public event View_ZPX_CVTTestDataItemsRowChangeEventHandler View_ZPX_CVTTestDataItemsRowChanged;
            
            public event View_ZPX_CVTTestDataItemsRowChangeEventHandler View_ZPX_CVTTestDataItemsRowDeleting;
            
            public event View_ZPX_CVTTestDataItemsRowChangeEventHandler View_ZPX_CVTTestDataItemsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView_ZPX_CVTTestDataItemsRow(View_ZPX_CVTTestDataItemsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_ZPX_CVTTestDataItemsRow AddView_ZPX_CVTTestDataItemsRow(
                        long 序号, 
                        string 产品型号, 
                        string 产品编号, 
                        string 试验设备, 
                        string 试验油, 
                        string 结论, 
                        string 试验员, 
                        string 预装员, 
                        string 备注, 
                        string 试验日期, 
                        string 检验项目, 
                        string 试验项目, 
                        string 试验条件, 
                        string 要求, 
                        string 检测数据, 
                        string 判定) {
                View_ZPX_CVTTestDataItemsRow rowView_ZPX_CVTTestDataItemsRow = ((View_ZPX_CVTTestDataItemsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        序号,
                        产品型号,
                        产品编号,
                        试验设备,
                        试验油,
                        结论,
                        试验员,
                        预装员,
                        备注,
                        试验日期,
                        检验项目,
                        试验项目,
                        试验条件,
                        要求,
                        检测数据,
                        判定};
                rowView_ZPX_CVTTestDataItemsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowView_ZPX_CVTTestDataItemsRow);
                return rowView_ZPX_CVTTestDataItemsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_ZPX_CVTTestDataItemsRow FindBy序号(long 序号) {
                return ((View_ZPX_CVTTestDataItemsRow)(this.Rows.Find(new object[] {
                            序号})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View_ZPX_CVTTestDataItemsDataTable cln = ((View_ZPX_CVTTestDataItemsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View_ZPX_CVTTestDataItemsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column序号 = base.Columns["序号"];
                this.column产品型号 = base.Columns["产品型号"];
                this.column产品编号 = base.Columns["产品编号"];
                this.column试验设备 = base.Columns["试验设备"];
                this.column试验油 = base.Columns["试验油"];
                this.column结论 = base.Columns["结论"];
                this.column试验员 = base.Columns["试验员"];
                this.column预装员 = base.Columns["预装员"];
                this.column备注 = base.Columns["备注"];
                this.column试验日期 = base.Columns["试验日期"];
                this.column检验项目 = base.Columns["检验项目"];
                this.column试验项目 = base.Columns["试验项目"];
                this.column试验条件 = base.Columns["试验条件"];
                this.column要求 = base.Columns["要求"];
                this.column检测数据 = base.Columns["检测数据"];
                this.column判定 = base.Columns["判定"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column序号 = new global::System.Data.DataColumn("序号", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column序号);
                this.column产品型号 = new global::System.Data.DataColumn("产品型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品型号);
                this.column产品编号 = new global::System.Data.DataColumn("产品编号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column产品编号);
                this.column试验设备 = new global::System.Data.DataColumn("试验设备", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column试验设备);
                this.column试验油 = new global::System.Data.DataColumn("试验油", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column试验油);
                this.column结论 = new global::System.Data.DataColumn("结论", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column结论);
                this.column试验员 = new global::System.Data.DataColumn("试验员", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column试验员);
                this.column预装员 = new global::System.Data.DataColumn("预装员", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column预装员);
                this.column备注 = new global::System.Data.DataColumn("备注", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column备注);
                this.column试验日期 = new global::System.Data.DataColumn("试验日期", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column试验日期);
                this.column检验项目 = new global::System.Data.DataColumn("检验项目", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column检验项目);
                this.column试验项目 = new global::System.Data.DataColumn("试验项目", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column试验项目);
                this.column试验条件 = new global::System.Data.DataColumn("试验条件", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column试验条件);
                this.column要求 = new global::System.Data.DataColumn("要求", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column要求);
                this.column检测数据 = new global::System.Data.DataColumn("检测数据", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column检测数据);
                this.column判定 = new global::System.Data.DataColumn("判定", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column判定);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.column序号}, true));
                this.column序号.AllowDBNull = false;
                this.column序号.Unique = true;
                this.column产品型号.AllowDBNull = false;
                this.column产品型号.MaxLength = 20;
                this.column产品编号.AllowDBNull = false;
                this.column产品编号.MaxLength = 50;
                this.column试验设备.AllowDBNull = false;
                this.column试验设备.MaxLength = 50;
                this.column试验油.AllowDBNull = false;
                this.column试验油.MaxLength = 50;
                this.column结论.AllowDBNull = false;
                this.column结论.MaxLength = 50;
                this.column试验员.AllowDBNull = false;
                this.column试验员.MaxLength = 50;
                this.column预装员.AllowDBNull = false;
                this.column预装员.MaxLength = 50;
                this.column备注.MaxLength = 2147483647;
                this.column试验日期.ReadOnly = true;
                this.column试验日期.MaxLength = 10;
                this.column检验项目.AllowDBNull = false;
                this.column检验项目.MaxLength = 50;
                this.column试验项目.AllowDBNull = false;
                this.column试验项目.MaxLength = 100;
                this.column试验条件.AllowDBNull = false;
                this.column试验条件.MaxLength = 100;
                this.column要求.AllowDBNull = false;
                this.column要求.MaxLength = 100;
                this.column检测数据.AllowDBNull = false;
                this.column检测数据.MaxLength = 50;
                this.column判定.AllowDBNull = false;
                this.column判定.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_ZPX_CVTTestDataItemsRow NewView_ZPX_CVTTestDataItemsRow() {
                return ((View_ZPX_CVTTestDataItemsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View_ZPX_CVTTestDataItemsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View_ZPX_CVTTestDataItemsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View_ZPX_CVTTestDataItemsRowChanged != null)) {
                    this.View_ZPX_CVTTestDataItemsRowChanged(this, new View_ZPX_CVTTestDataItemsRowChangeEvent(((View_ZPX_CVTTestDataItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View_ZPX_CVTTestDataItemsRowChanging != null)) {
                    this.View_ZPX_CVTTestDataItemsRowChanging(this, new View_ZPX_CVTTestDataItemsRowChangeEvent(((View_ZPX_CVTTestDataItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View_ZPX_CVTTestDataItemsRowDeleted != null)) {
                    this.View_ZPX_CVTTestDataItemsRowDeleted(this, new View_ZPX_CVTTestDataItemsRowChangeEvent(((View_ZPX_CVTTestDataItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View_ZPX_CVTTestDataItemsRowDeleting != null)) {
                    this.View_ZPX_CVTTestDataItemsRowDeleting(this, new View_ZPX_CVTTestDataItemsRowChangeEvent(((View_ZPX_CVTTestDataItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView_ZPX_CVTTestDataItemsRow(View_ZPX_CVTTestDataItemsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DepotManagementDataSet ds = new DepotManagementDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View_ZPX_CVTTestDataItemsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View_ZPX_ValveTestDataItemsRow : global::System.Data.DataRow {
            
            private View_ZPX_ValveTestDataItemsDataTable tableView_ZPX_ValveTestDataItems;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_ZPX_ValveTestDataItemsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView_ZPX_ValveTestDataItems = ((View_ZPX_ValveTestDataItemsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long 序号 {
                get {
                    return ((long)(this[this.tableView_ZPX_ValveTestDataItems.序号Column]));
                }
                set {
                    this[this.tableView_ZPX_ValveTestDataItems.序号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 阀块总成编号 {
                get {
                    return ((string)(this[this.tableView_ZPX_ValveTestDataItems.阀块总成编号Column]));
                }
                set {
                    this[this.tableView_ZPX_ValveTestDataItems.阀块总成编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 试验结果 {
                get {
                    return ((string)(this[this.tableView_ZPX_ValveTestDataItems.试验结果Column]));
                }
                set {
                    this[this.tableView_ZPX_ValveTestDataItems.试验结果Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 实验员 {
                get {
                    try {
                        return ((string)(this[this.tableView_ZPX_ValveTestDataItems.实验员Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_ZPX_ValveTestDataItems”中列“实验员”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_ZPX_ValveTestDataItems.实验员Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 备注 {
                get {
                    try {
                        return ((string)(this[this.tableView_ZPX_ValveTestDataItems.备注Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_ZPX_ValveTestDataItems”中列“备注”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_ZPX_ValveTestDataItems.备注Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 日期 {
                get {
                    return ((global::System.DateTime)(this[this.tableView_ZPX_ValveTestDataItems.日期Column]));
                }
                set {
                    this[this.tableView_ZPX_ValveTestDataItems.日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 试验项目 {
                get {
                    return ((string)(this[this.tableView_ZPX_ValveTestDataItems.试验项目Column]));
                }
                set {
                    this[this.tableView_ZPX_ValveTestDataItems.试验项目Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 数据名称 {
                get {
                    return ((string)(this[this.tableView_ZPX_ValveTestDataItems.数据名称Column]));
                }
                set {
                    this[this.tableView_ZPX_ValveTestDataItems.数据名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 试验结果A {
                get {
                    return ((string)(this[this.tableView_ZPX_ValveTestDataItems.试验结果AColumn]));
                }
                set {
                    this[this.tableView_ZPX_ValveTestDataItems.试验结果AColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 试验结果B {
                get {
                    return ((string)(this[this.tableView_ZPX_ValveTestDataItems.试验结果BColumn]));
                }
                set {
                    this[this.tableView_ZPX_ValveTestDataItems.试验结果BColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 项目说明 {
                get {
                    try {
                        return ((string)(this[this.tableView_ZPX_ValveTestDataItems.项目说明Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_ZPX_ValveTestDataItems”中列“项目说明”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_ZPX_ValveTestDataItems.项目说明Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is实验员Null() {
                return this.IsNull(this.tableView_ZPX_ValveTestDataItems.实验员Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set实验员Null() {
                this[this.tableView_ZPX_ValveTestDataItems.实验员Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is备注Null() {
                return this.IsNull(this.tableView_ZPX_ValveTestDataItems.备注Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set备注Null() {
                this[this.tableView_ZPX_ValveTestDataItems.备注Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is项目说明Null() {
                return this.IsNull(this.tableView_ZPX_ValveTestDataItems.项目说明Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set项目说明Null() {
                this[this.tableView_ZPX_ValveTestDataItems.项目说明Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View_ZPX_CVTTestDataItemsRow : global::System.Data.DataRow {
            
            private View_ZPX_CVTTestDataItemsDataTable tableView_ZPX_CVTTestDataItems;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_ZPX_CVTTestDataItemsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView_ZPX_CVTTestDataItems = ((View_ZPX_CVTTestDataItemsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long 序号 {
                get {
                    return ((long)(this[this.tableView_ZPX_CVTTestDataItems.序号Column]));
                }
                set {
                    this[this.tableView_ZPX_CVTTestDataItems.序号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品型号 {
                get {
                    return ((string)(this[this.tableView_ZPX_CVTTestDataItems.产品型号Column]));
                }
                set {
                    this[this.tableView_ZPX_CVTTestDataItems.产品型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 产品编号 {
                get {
                    return ((string)(this[this.tableView_ZPX_CVTTestDataItems.产品编号Column]));
                }
                set {
                    this[this.tableView_ZPX_CVTTestDataItems.产品编号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 试验设备 {
                get {
                    return ((string)(this[this.tableView_ZPX_CVTTestDataItems.试验设备Column]));
                }
                set {
                    this[this.tableView_ZPX_CVTTestDataItems.试验设备Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 试验油 {
                get {
                    return ((string)(this[this.tableView_ZPX_CVTTestDataItems.试验油Column]));
                }
                set {
                    this[this.tableView_ZPX_CVTTestDataItems.试验油Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 结论 {
                get {
                    return ((string)(this[this.tableView_ZPX_CVTTestDataItems.结论Column]));
                }
                set {
                    this[this.tableView_ZPX_CVTTestDataItems.结论Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 试验员 {
                get {
                    return ((string)(this[this.tableView_ZPX_CVTTestDataItems.试验员Column]));
                }
                set {
                    this[this.tableView_ZPX_CVTTestDataItems.试验员Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 预装员 {
                get {
                    return ((string)(this[this.tableView_ZPX_CVTTestDataItems.预装员Column]));
                }
                set {
                    this[this.tableView_ZPX_CVTTestDataItems.预装员Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 备注 {
                get {
                    try {
                        return ((string)(this[this.tableView_ZPX_CVTTestDataItems.备注Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_ZPX_CVTTestDataItems”中列“备注”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_ZPX_CVTTestDataItems.备注Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 试验日期 {
                get {
                    try {
                        return ((string)(this[this.tableView_ZPX_CVTTestDataItems.试验日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_ZPX_CVTTestDataItems”中列“试验日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_ZPX_CVTTestDataItems.试验日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 检验项目 {
                get {
                    return ((string)(this[this.tableView_ZPX_CVTTestDataItems.检验项目Column]));
                }
                set {
                    this[this.tableView_ZPX_CVTTestDataItems.检验项目Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 试验项目 {
                get {
                    return ((string)(this[this.tableView_ZPX_CVTTestDataItems.试验项目Column]));
                }
                set {
                    this[this.tableView_ZPX_CVTTestDataItems.试验项目Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 试验条件 {
                get {
                    return ((string)(this[this.tableView_ZPX_CVTTestDataItems.试验条件Column]));
                }
                set {
                    this[this.tableView_ZPX_CVTTestDataItems.试验条件Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 要求 {
                get {
                    return ((string)(this[this.tableView_ZPX_CVTTestDataItems.要求Column]));
                }
                set {
                    this[this.tableView_ZPX_CVTTestDataItems.要求Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 检测数据 {
                get {
                    return ((string)(this[this.tableView_ZPX_CVTTestDataItems.检测数据Column]));
                }
                set {
                    this[this.tableView_ZPX_CVTTestDataItems.检测数据Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 判定 {
                get {
                    return ((string)(this[this.tableView_ZPX_CVTTestDataItems.判定Column]));
                }
                set {
                    this[this.tableView_ZPX_CVTTestDataItems.判定Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is备注Null() {
                return this.IsNull(this.tableView_ZPX_CVTTestDataItems.备注Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set备注Null() {
                this[this.tableView_ZPX_CVTTestDataItems.备注Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is试验日期Null() {
                return this.IsNull(this.tableView_ZPX_CVTTestDataItems.试验日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set试验日期Null() {
                this[this.tableView_ZPX_CVTTestDataItems.试验日期Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View_ZPX_ValveTestDataItemsRowChangeEvent : global::System.EventArgs {
            
            private View_ZPX_ValveTestDataItemsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_ZPX_ValveTestDataItemsRowChangeEvent(View_ZPX_ValveTestDataItemsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_ZPX_ValveTestDataItemsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View_ZPX_CVTTestDataItemsRowChangeEvent : global::System.EventArgs {
            
            private View_ZPX_CVTTestDataItemsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_ZPX_CVTTestDataItemsRowChangeEvent(View_ZPX_CVTTestDataItemsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_ZPX_CVTTestDataItemsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Expression.报表.DepotManagementDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View_ZPX_ValveTestDataItemsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View_ZPX_ValveTestDataItemsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View_ZPX_ValveTestDataItems";
            tableMapping.ColumnMappings.Add("序号", "序号");
            tableMapping.ColumnMappings.Add("阀块总成编号", "阀块总成编号");
            tableMapping.ColumnMappings.Add("试验结果", "试验结果");
            tableMapping.ColumnMappings.Add("实验员", "实验员");
            tableMapping.ColumnMappings.Add("备注", "备注");
            tableMapping.ColumnMappings.Add("日期", "日期");
            tableMapping.ColumnMappings.Add("试验项目", "试验项目");
            tableMapping.ColumnMappings.Add("数据名称", "数据名称");
            tableMapping.ColumnMappings.Add("试验结果A", "试验结果A");
            tableMapping.ColumnMappings.Add("试验结果B", "试验结果B");
            tableMapping.ColumnMappings.Add("项目说明", "项目说明");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.DepotManagementConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT 序号, 阀块总成编号, 试验结果, 实验员, 备注, 日期, 试验项目, 数据名称, 试验结果A, 试验结果B, 项目说明 FROM dbo.Vie" +
                "w_ZPX_ValveTestDataItems";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DepotManagementDataSet.View_ZPX_ValveTestDataItemsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DepotManagementDataSet.View_ZPX_ValveTestDataItemsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DepotManagementDataSet.View_ZPX_ValveTestDataItemsDataTable dataTable = new DepotManagementDataSet.View_ZPX_ValveTestDataItemsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View_ZPX_CVTTestDataItemsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View_ZPX_CVTTestDataItemsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View_ZPX_CVTTestDataItems";
            tableMapping.ColumnMappings.Add("序号", "序号");
            tableMapping.ColumnMappings.Add("产品型号", "产品型号");
            tableMapping.ColumnMappings.Add("产品编号", "产品编号");
            tableMapping.ColumnMappings.Add("试验设备", "试验设备");
            tableMapping.ColumnMappings.Add("试验油", "试验油");
            tableMapping.ColumnMappings.Add("结论", "结论");
            tableMapping.ColumnMappings.Add("试验员", "试验员");
            tableMapping.ColumnMappings.Add("预装员", "预装员");
            tableMapping.ColumnMappings.Add("备注", "备注");
            tableMapping.ColumnMappings.Add("试验日期", "试验日期");
            tableMapping.ColumnMappings.Add("检验项目", "检验项目");
            tableMapping.ColumnMappings.Add("试验项目", "试验项目");
            tableMapping.ColumnMappings.Add("试验条件", "试验条件");
            tableMapping.ColumnMappings.Add("要求", "要求");
            tableMapping.ColumnMappings.Add("检测数据", "检测数据");
            tableMapping.ColumnMappings.Add("判定", "判定");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Expression.Properties.Settings.Default.DepotManagementConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT 序号, 产品型号, 产品编号, 试验设备, 试验油, 结论, 试验员, 预装员, 备注, 试验日期, 检验项目, 试验项目, 试验条件, 要求, 检" +
                "测数据, 判定 FROM dbo.View_ZPX_CVTTestDataItems";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DepotManagementDataSet.View_ZPX_CVTTestDataItemsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DepotManagementDataSet.View_ZPX_CVTTestDataItemsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DepotManagementDataSet.View_ZPX_CVTTestDataItemsDataTable dataTable = new DepotManagementDataSet.View_ZPX_CVTTestDataItemsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(DepotManagementDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(DepotManagementDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(DepotManagementDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(DepotManagementDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager 不包含任何连接信息。请将每个 TableAdapterManager TableAdapter 属性设置为有效的 Tabl" +
                        "eAdapter 实例。");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("事务无法开始。当前的数据连接不支持事务或当前状态不允许事务开始。");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591