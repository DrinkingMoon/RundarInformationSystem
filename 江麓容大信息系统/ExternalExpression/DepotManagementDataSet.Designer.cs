//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.8745
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Form_Peripheral_External {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DepotManagementDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DepotManagementDataSet : global::System.Data.DataSet {
        
        private View_Out_ManeuverBillDataTable tableView_Out_ManeuverBill;
        
        private View_Out_ManeuverListDataTable tableView_Out_ManeuverList;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DepotManagementDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DepotManagementDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["View_Out_ManeuverBill"] != null)) {
                    base.Tables.Add(new View_Out_ManeuverBillDataTable(ds.Tables["View_Out_ManeuverBill"]));
                }
                if ((ds.Tables["View_Out_ManeuverList"] != null)) {
                    base.Tables.Add(new View_Out_ManeuverListDataTable(ds.Tables["View_Out_ManeuverList"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View_Out_ManeuverBillDataTable View_Out_ManeuverBill {
            get {
                return this.tableView_Out_ManeuverBill;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View_Out_ManeuverListDataTable View_Out_ManeuverList {
            get {
                return this.tableView_Out_ManeuverList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DepotManagementDataSet cln = ((DepotManagementDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["View_Out_ManeuverBill"] != null)) {
                    base.Tables.Add(new View_Out_ManeuverBillDataTable(ds.Tables["View_Out_ManeuverBill"]));
                }
                if ((ds.Tables["View_Out_ManeuverList"] != null)) {
                    base.Tables.Add(new View_Out_ManeuverListDataTable(ds.Tables["View_Out_ManeuverList"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableView_Out_ManeuverBill = ((View_Out_ManeuverBillDataTable)(base.Tables["View_Out_ManeuverBill"]));
            if ((initTable == true)) {
                if ((this.tableView_Out_ManeuverBill != null)) {
                    this.tableView_Out_ManeuverBill.InitVars();
                }
            }
            this.tableView_Out_ManeuverList = ((View_Out_ManeuverListDataTable)(base.Tables["View_Out_ManeuverList"]));
            if ((initTable == true)) {
                if ((this.tableView_Out_ManeuverList != null)) {
                    this.tableView_Out_ManeuverList.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DepotManagementDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DepotManagementDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableView_Out_ManeuverBill = new View_Out_ManeuverBillDataTable();
            base.Tables.Add(this.tableView_Out_ManeuverBill);
            this.tableView_Out_ManeuverList = new View_Out_ManeuverListDataTable();
            base.Tables.Add(this.tableView_Out_ManeuverList);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView_Out_ManeuverBill() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView_Out_ManeuverList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DepotManagementDataSet ds = new DepotManagementDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void View_Out_ManeuverBillRowChangeEventHandler(object sender, View_Out_ManeuverBillRowChangeEvent e);
        
        public delegate void View_Out_ManeuverListRowChangeEventHandler(object sender, View_Out_ManeuverListRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View_Out_ManeuverBillDataTable : global::System.Data.TypedTableBase<View_Out_ManeuverBillRow> {
            
            private global::System.Data.DataColumn column单据号;
            
            private global::System.Data.DataColumn column单据状态;
            
            private global::System.Data.DataColumn column关联单据号;
            
            private global::System.Data.DataColumn column物流名称;
            
            private global::System.Data.DataColumn column物流单号;
            
            private global::System.Data.DataColumn column出库库房;
            
            private global::System.Data.DataColumn column入库库房;
            
            private global::System.Data.DataColumn column申请人;
            
            private global::System.Data.DataColumn column申请日期;
            
            private global::System.Data.DataColumn column审核人;
            
            private global::System.Data.DataColumn column审核日期;
            
            private global::System.Data.DataColumn column出库人;
            
            private global::System.Data.DataColumn column出库日期;
            
            private global::System.Data.DataColumn column发货人;
            
            private global::System.Data.DataColumn column发货日期;
            
            private global::System.Data.DataColumn column收货人;
            
            private global::System.Data.DataColumn column收货日期;
            
            private global::System.Data.DataColumn column入库人;
            
            private global::System.Data.DataColumn column入库日期;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_Out_ManeuverBillDataTable() {
                this.TableName = "View_Out_ManeuverBill";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_Out_ManeuverBillDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View_Out_ManeuverBillDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 单据号Column {
                get {
                    return this.column单据号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 单据状态Column {
                get {
                    return this.column单据状态;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 关联单据号Column {
                get {
                    return this.column关联单据号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 物流名称Column {
                get {
                    return this.column物流名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 物流单号Column {
                get {
                    return this.column物流单号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 出库库房Column {
                get {
                    return this.column出库库房;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 入库库房Column {
                get {
                    return this.column入库库房;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 申请人Column {
                get {
                    return this.column申请人;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 申请日期Column {
                get {
                    return this.column申请日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 审核人Column {
                get {
                    return this.column审核人;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 审核日期Column {
                get {
                    return this.column审核日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 出库人Column {
                get {
                    return this.column出库人;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 出库日期Column {
                get {
                    return this.column出库日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 发货人Column {
                get {
                    return this.column发货人;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 发货日期Column {
                get {
                    return this.column发货日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 收货人Column {
                get {
                    return this.column收货人;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 收货日期Column {
                get {
                    return this.column收货日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 入库人Column {
                get {
                    return this.column入库人;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 入库日期Column {
                get {
                    return this.column入库日期;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_Out_ManeuverBillRow this[int index] {
                get {
                    return ((View_Out_ManeuverBillRow)(this.Rows[index]));
                }
            }
            
            public event View_Out_ManeuverBillRowChangeEventHandler View_Out_ManeuverBillRowChanging;
            
            public event View_Out_ManeuverBillRowChangeEventHandler View_Out_ManeuverBillRowChanged;
            
            public event View_Out_ManeuverBillRowChangeEventHandler View_Out_ManeuverBillRowDeleting;
            
            public event View_Out_ManeuverBillRowChangeEventHandler View_Out_ManeuverBillRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView_Out_ManeuverBillRow(View_Out_ManeuverBillRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_Out_ManeuverBillRow AddView_Out_ManeuverBillRow(
                        string 单据号, 
                        string 单据状态, 
                        string 关联单据号, 
                        string 物流名称, 
                        string 物流单号, 
                        string 出库库房, 
                        string 入库库房, 
                        string 申请人, 
                        System.DateTime 申请日期, 
                        string 审核人, 
                        System.DateTime 审核日期, 
                        string 出库人, 
                        System.DateTime 出库日期, 
                        string 发货人, 
                        System.DateTime 发货日期, 
                        string 收货人, 
                        System.DateTime 收货日期, 
                        string 入库人, 
                        System.DateTime 入库日期) {
                View_Out_ManeuverBillRow rowView_Out_ManeuverBillRow = ((View_Out_ManeuverBillRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        单据号,
                        单据状态,
                        关联单据号,
                        物流名称,
                        物流单号,
                        出库库房,
                        入库库房,
                        申请人,
                        申请日期,
                        审核人,
                        审核日期,
                        出库人,
                        出库日期,
                        发货人,
                        发货日期,
                        收货人,
                        收货日期,
                        入库人,
                        入库日期};
                rowView_Out_ManeuverBillRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowView_Out_ManeuverBillRow);
                return rowView_Out_ManeuverBillRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_Out_ManeuverBillRow FindBy单据号(string 单据号) {
                return ((View_Out_ManeuverBillRow)(this.Rows.Find(new object[] {
                            单据号})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View_Out_ManeuverBillDataTable cln = ((View_Out_ManeuverBillDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View_Out_ManeuverBillDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column单据号 = base.Columns["单据号"];
                this.column单据状态 = base.Columns["单据状态"];
                this.column关联单据号 = base.Columns["关联单据号"];
                this.column物流名称 = base.Columns["物流名称"];
                this.column物流单号 = base.Columns["物流单号"];
                this.column出库库房 = base.Columns["出库库房"];
                this.column入库库房 = base.Columns["入库库房"];
                this.column申请人 = base.Columns["申请人"];
                this.column申请日期 = base.Columns["申请日期"];
                this.column审核人 = base.Columns["审核人"];
                this.column审核日期 = base.Columns["审核日期"];
                this.column出库人 = base.Columns["出库人"];
                this.column出库日期 = base.Columns["出库日期"];
                this.column发货人 = base.Columns["发货人"];
                this.column发货日期 = base.Columns["发货日期"];
                this.column收货人 = base.Columns["收货人"];
                this.column收货日期 = base.Columns["收货日期"];
                this.column入库人 = base.Columns["入库人"];
                this.column入库日期 = base.Columns["入库日期"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column单据号 = new global::System.Data.DataColumn("单据号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column单据号);
                this.column单据状态 = new global::System.Data.DataColumn("单据状态", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column单据状态);
                this.column关联单据号 = new global::System.Data.DataColumn("关联单据号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column关联单据号);
                this.column物流名称 = new global::System.Data.DataColumn("物流名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column物流名称);
                this.column物流单号 = new global::System.Data.DataColumn("物流单号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column物流单号);
                this.column出库库房 = new global::System.Data.DataColumn("出库库房", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column出库库房);
                this.column入库库房 = new global::System.Data.DataColumn("入库库房", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column入库库房);
                this.column申请人 = new global::System.Data.DataColumn("申请人", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column申请人);
                this.column申请日期 = new global::System.Data.DataColumn("申请日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column申请日期);
                this.column审核人 = new global::System.Data.DataColumn("审核人", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column审核人);
                this.column审核日期 = new global::System.Data.DataColumn("审核日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column审核日期);
                this.column出库人 = new global::System.Data.DataColumn("出库人", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column出库人);
                this.column出库日期 = new global::System.Data.DataColumn("出库日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column出库日期);
                this.column发货人 = new global::System.Data.DataColumn("发货人", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column发货人);
                this.column发货日期 = new global::System.Data.DataColumn("发货日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column发货日期);
                this.column收货人 = new global::System.Data.DataColumn("收货人", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column收货人);
                this.column收货日期 = new global::System.Data.DataColumn("收货日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column收货日期);
                this.column入库人 = new global::System.Data.DataColumn("入库人", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column入库人);
                this.column入库日期 = new global::System.Data.DataColumn("入库日期", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column入库日期);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.column单据号}, true));
                this.column单据号.AllowDBNull = false;
                this.column单据号.Unique = true;
                this.column单据号.MaxLength = 50;
                this.column单据状态.MaxLength = 50;
                this.column关联单据号.MaxLength = 50;
                this.column物流名称.MaxLength = 50;
                this.column物流单号.MaxLength = 50;
                this.column出库库房.ReadOnly = true;
                this.column出库库房.MaxLength = 4000;
                this.column入库库房.ReadOnly = true;
                this.column入库库房.MaxLength = 4000;
                this.column申请人.AllowDBNull = false;
                this.column申请人.MaxLength = 50;
                this.column审核人.MaxLength = 50;
                this.column出库人.MaxLength = 50;
                this.column发货人.MaxLength = 50;
                this.column收货人.MaxLength = 50;
                this.column入库人.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_Out_ManeuverBillRow NewView_Out_ManeuverBillRow() {
                return ((View_Out_ManeuverBillRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View_Out_ManeuverBillRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View_Out_ManeuverBillRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View_Out_ManeuverBillRowChanged != null)) {
                    this.View_Out_ManeuverBillRowChanged(this, new View_Out_ManeuverBillRowChangeEvent(((View_Out_ManeuverBillRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View_Out_ManeuverBillRowChanging != null)) {
                    this.View_Out_ManeuverBillRowChanging(this, new View_Out_ManeuverBillRowChangeEvent(((View_Out_ManeuverBillRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View_Out_ManeuverBillRowDeleted != null)) {
                    this.View_Out_ManeuverBillRowDeleted(this, new View_Out_ManeuverBillRowChangeEvent(((View_Out_ManeuverBillRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View_Out_ManeuverBillRowDeleting != null)) {
                    this.View_Out_ManeuverBillRowDeleting(this, new View_Out_ManeuverBillRowChangeEvent(((View_Out_ManeuverBillRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView_Out_ManeuverBillRow(View_Out_ManeuverBillRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DepotManagementDataSet ds = new DepotManagementDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View_Out_ManeuverBillDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View_Out_ManeuverListDataTable : global::System.Data.TypedTableBase<View_Out_ManeuverListRow> {
            
            private global::System.Data.DataColumn column图号型号;
            
            private global::System.Data.DataColumn column物品名称;
            
            private global::System.Data.DataColumn column规格;
            
            private global::System.Data.DataColumn column账务库房;
            
            private global::System.Data.DataColumn column申请数量;
            
            private global::System.Data.DataColumn column发货数量;
            
            private global::System.Data.DataColumn column收货数量;
            
            private global::System.Data.DataColumn column单位;
            
            private global::System.Data.DataColumn column备注;
            
            private global::System.Data.DataColumn column物品ID;
            
            private global::System.Data.DataColumn column账务库房ID;
            
            private global::System.Data.DataColumn columnBill_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_Out_ManeuverListDataTable() {
                this.TableName = "View_Out_ManeuverList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_Out_ManeuverListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View_Out_ManeuverListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 图号型号Column {
                get {
                    return this.column图号型号;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 物品名称Column {
                get {
                    return this.column物品名称;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 规格Column {
                get {
                    return this.column规格;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 账务库房Column {
                get {
                    return this.column账务库房;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 申请数量Column {
                get {
                    return this.column申请数量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 发货数量Column {
                get {
                    return this.column发货数量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 收货数量Column {
                get {
                    return this.column收货数量;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 单位Column {
                get {
                    return this.column单位;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 备注Column {
                get {
                    return this.column备注;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 物品IDColumn {
                get {
                    return this.column物品ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn 账务库房IDColumn {
                get {
                    return this.column账务库房ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Bill_IDColumn {
                get {
                    return this.columnBill_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_Out_ManeuverListRow this[int index] {
                get {
                    return ((View_Out_ManeuverListRow)(this.Rows[index]));
                }
            }
            
            public event View_Out_ManeuverListRowChangeEventHandler View_Out_ManeuverListRowChanging;
            
            public event View_Out_ManeuverListRowChangeEventHandler View_Out_ManeuverListRowChanged;
            
            public event View_Out_ManeuverListRowChangeEventHandler View_Out_ManeuverListRowDeleting;
            
            public event View_Out_ManeuverListRowChangeEventHandler View_Out_ManeuverListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView_Out_ManeuverListRow(View_Out_ManeuverListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_Out_ManeuverListRow AddView_Out_ManeuverListRow(string 图号型号, string 物品名称, string 规格, string 账务库房, decimal 申请数量, decimal 发货数量, decimal 收货数量, string 单位, string 备注, int 物品ID, string 账务库房ID, string Bill_ID) {
                View_Out_ManeuverListRow rowView_Out_ManeuverListRow = ((View_Out_ManeuverListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        图号型号,
                        物品名称,
                        规格,
                        账务库房,
                        申请数量,
                        发货数量,
                        收货数量,
                        单位,
                        备注,
                        物品ID,
                        账务库房ID,
                        Bill_ID};
                rowView_Out_ManeuverListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowView_Out_ManeuverListRow);
                return rowView_Out_ManeuverListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View_Out_ManeuverListDataTable cln = ((View_Out_ManeuverListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View_Out_ManeuverListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column图号型号 = base.Columns["图号型号"];
                this.column物品名称 = base.Columns["物品名称"];
                this.column规格 = base.Columns["规格"];
                this.column账务库房 = base.Columns["账务库房"];
                this.column申请数量 = base.Columns["申请数量"];
                this.column发货数量 = base.Columns["发货数量"];
                this.column收货数量 = base.Columns["收货数量"];
                this.column单位 = base.Columns["单位"];
                this.column备注 = base.Columns["备注"];
                this.column物品ID = base.Columns["物品ID"];
                this.column账务库房ID = base.Columns["账务库房ID"];
                this.columnBill_ID = base.Columns["Bill_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column图号型号 = new global::System.Data.DataColumn("图号型号", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column图号型号);
                this.column物品名称 = new global::System.Data.DataColumn("物品名称", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column物品名称);
                this.column规格 = new global::System.Data.DataColumn("规格", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column规格);
                this.column账务库房 = new global::System.Data.DataColumn("账务库房", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column账务库房);
                this.column申请数量 = new global::System.Data.DataColumn("申请数量", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column申请数量);
                this.column发货数量 = new global::System.Data.DataColumn("发货数量", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column发货数量);
                this.column收货数量 = new global::System.Data.DataColumn("收货数量", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column收货数量);
                this.column单位 = new global::System.Data.DataColumn("单位", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column单位);
                this.column备注 = new global::System.Data.DataColumn("备注", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column备注);
                this.column物品ID = new global::System.Data.DataColumn("物品ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column物品ID);
                this.column账务库房ID = new global::System.Data.DataColumn("账务库房ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column账务库房ID);
                this.columnBill_ID = new global::System.Data.DataColumn("Bill_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBill_ID);
                this.column图号型号.AllowDBNull = false;
                this.column图号型号.MaxLength = 50;
                this.column物品名称.AllowDBNull = false;
                this.column物品名称.MaxLength = 50;
                this.column规格.AllowDBNull = false;
                this.column规格.MaxLength = 50;
                this.column账务库房.MaxLength = 50;
                this.column申请数量.AllowDBNull = false;
                this.column单位.ReadOnly = true;
                this.column单位.MaxLength = 57;
                this.column备注.MaxLength = 200;
                this.column物品ID.AllowDBNull = false;
                this.column账务库房ID.AllowDBNull = false;
                this.column账务库房ID.MaxLength = 50;
                this.columnBill_ID.AllowDBNull = false;
                this.columnBill_ID.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_Out_ManeuverListRow NewView_Out_ManeuverListRow() {
                return ((View_Out_ManeuverListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View_Out_ManeuverListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View_Out_ManeuverListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View_Out_ManeuverListRowChanged != null)) {
                    this.View_Out_ManeuverListRowChanged(this, new View_Out_ManeuverListRowChangeEvent(((View_Out_ManeuverListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View_Out_ManeuverListRowChanging != null)) {
                    this.View_Out_ManeuverListRowChanging(this, new View_Out_ManeuverListRowChangeEvent(((View_Out_ManeuverListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View_Out_ManeuverListRowDeleted != null)) {
                    this.View_Out_ManeuverListRowDeleted(this, new View_Out_ManeuverListRowChangeEvent(((View_Out_ManeuverListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View_Out_ManeuverListRowDeleting != null)) {
                    this.View_Out_ManeuverListRowDeleting(this, new View_Out_ManeuverListRowChangeEvent(((View_Out_ManeuverListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView_Out_ManeuverListRow(View_Out_ManeuverListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DepotManagementDataSet ds = new DepotManagementDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View_Out_ManeuverListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View_Out_ManeuverBillRow : global::System.Data.DataRow {
            
            private View_Out_ManeuverBillDataTable tableView_Out_ManeuverBill;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_Out_ManeuverBillRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView_Out_ManeuverBill = ((View_Out_ManeuverBillDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 单据号 {
                get {
                    return ((string)(this[this.tableView_Out_ManeuverBill.单据号Column]));
                }
                set {
                    this[this.tableView_Out_ManeuverBill.单据号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 单据状态 {
                get {
                    try {
                        return ((string)(this[this.tableView_Out_ManeuverBill.单据状态Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverBill”中列“单据状态”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverBill.单据状态Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 关联单据号 {
                get {
                    try {
                        return ((string)(this[this.tableView_Out_ManeuverBill.关联单据号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverBill”中列“关联单据号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverBill.关联单据号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 物流名称 {
                get {
                    try {
                        return ((string)(this[this.tableView_Out_ManeuverBill.物流名称Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverBill”中列“物流名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverBill.物流名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 物流单号 {
                get {
                    try {
                        return ((string)(this[this.tableView_Out_ManeuverBill.物流单号Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverBill”中列“物流单号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverBill.物流单号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 出库库房 {
                get {
                    try {
                        return ((string)(this[this.tableView_Out_ManeuverBill.出库库房Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverBill”中列“出库库房”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverBill.出库库房Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 入库库房 {
                get {
                    try {
                        return ((string)(this[this.tableView_Out_ManeuverBill.入库库房Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverBill”中列“入库库房”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverBill.入库库房Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 申请人 {
                get {
                    return ((string)(this[this.tableView_Out_ManeuverBill.申请人Column]));
                }
                set {
                    this[this.tableView_Out_ManeuverBill.申请人Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 申请日期 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableView_Out_ManeuverBill.申请日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverBill”中列“申请日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverBill.申请日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 审核人 {
                get {
                    try {
                        return ((string)(this[this.tableView_Out_ManeuverBill.审核人Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverBill”中列“审核人”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverBill.审核人Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 审核日期 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableView_Out_ManeuverBill.审核日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverBill”中列“审核日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverBill.审核日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 出库人 {
                get {
                    try {
                        return ((string)(this[this.tableView_Out_ManeuverBill.出库人Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverBill”中列“出库人”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverBill.出库人Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 出库日期 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableView_Out_ManeuverBill.出库日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverBill”中列“出库日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverBill.出库日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 发货人 {
                get {
                    try {
                        return ((string)(this[this.tableView_Out_ManeuverBill.发货人Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverBill”中列“发货人”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverBill.发货人Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 发货日期 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableView_Out_ManeuverBill.发货日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverBill”中列“发货日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverBill.发货日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 收货人 {
                get {
                    try {
                        return ((string)(this[this.tableView_Out_ManeuverBill.收货人Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverBill”中列“收货人”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverBill.收货人Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 收货日期 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableView_Out_ManeuverBill.收货日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverBill”中列“收货日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverBill.收货日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 入库人 {
                get {
                    try {
                        return ((string)(this[this.tableView_Out_ManeuverBill.入库人Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverBill”中列“入库人”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverBill.入库人Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 入库日期 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableView_Out_ManeuverBill.入库日期Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverBill”中列“入库日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverBill.入库日期Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is单据状态Null() {
                return this.IsNull(this.tableView_Out_ManeuverBill.单据状态Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set单据状态Null() {
                this[this.tableView_Out_ManeuverBill.单据状态Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is关联单据号Null() {
                return this.IsNull(this.tableView_Out_ManeuverBill.关联单据号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set关联单据号Null() {
                this[this.tableView_Out_ManeuverBill.关联单据号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is物流名称Null() {
                return this.IsNull(this.tableView_Out_ManeuverBill.物流名称Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set物流名称Null() {
                this[this.tableView_Out_ManeuverBill.物流名称Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is物流单号Null() {
                return this.IsNull(this.tableView_Out_ManeuverBill.物流单号Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set物流单号Null() {
                this[this.tableView_Out_ManeuverBill.物流单号Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is出库库房Null() {
                return this.IsNull(this.tableView_Out_ManeuverBill.出库库房Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set出库库房Null() {
                this[this.tableView_Out_ManeuverBill.出库库房Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is入库库房Null() {
                return this.IsNull(this.tableView_Out_ManeuverBill.入库库房Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set入库库房Null() {
                this[this.tableView_Out_ManeuverBill.入库库房Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is申请日期Null() {
                return this.IsNull(this.tableView_Out_ManeuverBill.申请日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set申请日期Null() {
                this[this.tableView_Out_ManeuverBill.申请日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is审核人Null() {
                return this.IsNull(this.tableView_Out_ManeuverBill.审核人Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set审核人Null() {
                this[this.tableView_Out_ManeuverBill.审核人Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is审核日期Null() {
                return this.IsNull(this.tableView_Out_ManeuverBill.审核日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set审核日期Null() {
                this[this.tableView_Out_ManeuverBill.审核日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is出库人Null() {
                return this.IsNull(this.tableView_Out_ManeuverBill.出库人Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set出库人Null() {
                this[this.tableView_Out_ManeuverBill.出库人Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is出库日期Null() {
                return this.IsNull(this.tableView_Out_ManeuverBill.出库日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set出库日期Null() {
                this[this.tableView_Out_ManeuverBill.出库日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is发货人Null() {
                return this.IsNull(this.tableView_Out_ManeuverBill.发货人Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set发货人Null() {
                this[this.tableView_Out_ManeuverBill.发货人Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is发货日期Null() {
                return this.IsNull(this.tableView_Out_ManeuverBill.发货日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set发货日期Null() {
                this[this.tableView_Out_ManeuverBill.发货日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is收货人Null() {
                return this.IsNull(this.tableView_Out_ManeuverBill.收货人Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set收货人Null() {
                this[this.tableView_Out_ManeuverBill.收货人Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is收货日期Null() {
                return this.IsNull(this.tableView_Out_ManeuverBill.收货日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set收货日期Null() {
                this[this.tableView_Out_ManeuverBill.收货日期Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is入库人Null() {
                return this.IsNull(this.tableView_Out_ManeuverBill.入库人Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set入库人Null() {
                this[this.tableView_Out_ManeuverBill.入库人Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is入库日期Null() {
                return this.IsNull(this.tableView_Out_ManeuverBill.入库日期Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set入库日期Null() {
                this[this.tableView_Out_ManeuverBill.入库日期Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View_Out_ManeuverListRow : global::System.Data.DataRow {
            
            private View_Out_ManeuverListDataTable tableView_Out_ManeuverList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_Out_ManeuverListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView_Out_ManeuverList = ((View_Out_ManeuverListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 图号型号 {
                get {
                    return ((string)(this[this.tableView_Out_ManeuverList.图号型号Column]));
                }
                set {
                    this[this.tableView_Out_ManeuverList.图号型号Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 物品名称 {
                get {
                    return ((string)(this[this.tableView_Out_ManeuverList.物品名称Column]));
                }
                set {
                    this[this.tableView_Out_ManeuverList.物品名称Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 规格 {
                get {
                    return ((string)(this[this.tableView_Out_ManeuverList.规格Column]));
                }
                set {
                    this[this.tableView_Out_ManeuverList.规格Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 账务库房 {
                get {
                    try {
                        return ((string)(this[this.tableView_Out_ManeuverList.账务库房Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverList”中列“账务库房”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverList.账务库房Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 申请数量 {
                get {
                    return ((decimal)(this[this.tableView_Out_ManeuverList.申请数量Column]));
                }
                set {
                    this[this.tableView_Out_ManeuverList.申请数量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 发货数量 {
                get {
                    try {
                        return ((decimal)(this[this.tableView_Out_ManeuverList.发货数量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverList”中列“发货数量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverList.发货数量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 收货数量 {
                get {
                    try {
                        return ((decimal)(this[this.tableView_Out_ManeuverList.收货数量Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverList”中列“收货数量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverList.收货数量Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 单位 {
                get {
                    try {
                        return ((string)(this[this.tableView_Out_ManeuverList.单位Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverList”中列“单位”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverList.单位Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 备注 {
                get {
                    try {
                        return ((string)(this[this.tableView_Out_ManeuverList.备注Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“View_Out_ManeuverList”中列“备注”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableView_Out_ManeuverList.备注Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int 物品ID {
                get {
                    return ((int)(this[this.tableView_Out_ManeuverList.物品IDColumn]));
                }
                set {
                    this[this.tableView_Out_ManeuverList.物品IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 账务库房ID {
                get {
                    return ((string)(this[this.tableView_Out_ManeuverList.账务库房IDColumn]));
                }
                set {
                    this[this.tableView_Out_ManeuverList.账务库房IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Bill_ID {
                get {
                    return ((string)(this[this.tableView_Out_ManeuverList.Bill_IDColumn]));
                }
                set {
                    this[this.tableView_Out_ManeuverList.Bill_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is账务库房Null() {
                return this.IsNull(this.tableView_Out_ManeuverList.账务库房Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set账务库房Null() {
                this[this.tableView_Out_ManeuverList.账务库房Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is发货数量Null() {
                return this.IsNull(this.tableView_Out_ManeuverList.发货数量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set发货数量Null() {
                this[this.tableView_Out_ManeuverList.发货数量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is收货数量Null() {
                return this.IsNull(this.tableView_Out_ManeuverList.收货数量Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set收货数量Null() {
                this[this.tableView_Out_ManeuverList.收货数量Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is单位Null() {
                return this.IsNull(this.tableView_Out_ManeuverList.单位Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set单位Null() {
                this[this.tableView_Out_ManeuverList.单位Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is备注Null() {
                return this.IsNull(this.tableView_Out_ManeuverList.备注Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set备注Null() {
                this[this.tableView_Out_ManeuverList.备注Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View_Out_ManeuverBillRowChangeEvent : global::System.EventArgs {
            
            private View_Out_ManeuverBillRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_Out_ManeuverBillRowChangeEvent(View_Out_ManeuverBillRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_Out_ManeuverBillRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View_Out_ManeuverListRowChangeEvent : global::System.EventArgs {
            
            private View_Out_ManeuverListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_Out_ManeuverListRowChangeEvent(View_Out_ManeuverListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_Out_ManeuverListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Form_Peripheral_External.DepotManagementDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View_Out_ManeuverBillTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View_Out_ManeuverBillTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View_Out_ManeuverBill";
            tableMapping.ColumnMappings.Add("单据号", "单据号");
            tableMapping.ColumnMappings.Add("单据状态", "单据状态");
            tableMapping.ColumnMappings.Add("关联单据号", "关联单据号");
            tableMapping.ColumnMappings.Add("物流名称", "物流名称");
            tableMapping.ColumnMappings.Add("物流单号", "物流单号");
            tableMapping.ColumnMappings.Add("出库库房", "出库库房");
            tableMapping.ColumnMappings.Add("入库库房", "入库库房");
            tableMapping.ColumnMappings.Add("申请人", "申请人");
            tableMapping.ColumnMappings.Add("申请日期", "申请日期");
            tableMapping.ColumnMappings.Add("审核人", "审核人");
            tableMapping.ColumnMappings.Add("审核日期", "审核日期");
            tableMapping.ColumnMappings.Add("出库人", "出库人");
            tableMapping.ColumnMappings.Add("出库日期", "出库日期");
            tableMapping.ColumnMappings.Add("发货人", "发货人");
            tableMapping.ColumnMappings.Add("发货日期", "发货日期");
            tableMapping.ColumnMappings.Add("收货人", "收货人");
            tableMapping.ColumnMappings.Add("收货日期", "收货日期");
            tableMapping.ColumnMappings.Add("入库人", "入库人");
            tableMapping.ColumnMappings.Add("入库日期", "入库日期");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Form_Peripheral_External.Properties.Settings.Default.DepotManagementConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT 单据号, 单据状态, 关联单据号, 物流名称, 物流单号, 出库库房, 入库库房, 申请人, 申请日期, 审核人, 审核日期, 出库人, 出库日期," +
                " 发货人, 发货日期, 收货人, 收货日期, 入库人, 入库日期 FROM dbo.View_Out_ManeuverBill";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DepotManagementDataSet.View_Out_ManeuverBillDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DepotManagementDataSet.View_Out_ManeuverBillDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DepotManagementDataSet.View_Out_ManeuverBillDataTable dataTable = new DepotManagementDataSet.View_Out_ManeuverBillDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View_Out_ManeuverListTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View_Out_ManeuverListTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View_Out_ManeuverList";
            tableMapping.ColumnMappings.Add("图号型号", "图号型号");
            tableMapping.ColumnMappings.Add("物品名称", "物品名称");
            tableMapping.ColumnMappings.Add("规格", "规格");
            tableMapping.ColumnMappings.Add("账务库房", "账务库房");
            tableMapping.ColumnMappings.Add("申请数量", "申请数量");
            tableMapping.ColumnMappings.Add("发货数量", "发货数量");
            tableMapping.ColumnMappings.Add("收货数量", "收货数量");
            tableMapping.ColumnMappings.Add("单位", "单位");
            tableMapping.ColumnMappings.Add("备注", "备注");
            tableMapping.ColumnMappings.Add("物品ID", "物品ID");
            tableMapping.ColumnMappings.Add("账务库房ID", "账务库房ID");
            tableMapping.ColumnMappings.Add("Bill_ID", "Bill_ID");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Form_Peripheral_External.Properties.Settings.Default.DepotManagementConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT 图号型号, 物品名称, 规格, 账务库房, 申请数量, 发货数量, 收货数量, 单位, 备注, 物品ID, 账务库房ID, Bill_ID FROM" +
                " dbo.View_Out_ManeuverList";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DepotManagementDataSet.View_Out_ManeuverListDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DepotManagementDataSet.View_Out_ManeuverListDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DepotManagementDataSet.View_Out_ManeuverListDataTable dataTable = new DepotManagementDataSet.View_Out_ManeuverListDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(DepotManagementDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(DepotManagementDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(DepotManagementDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(DepotManagementDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager 不包含任何连接信息。请将每个 TableAdapterManager TableAdapter 属性设置为有效的 Tabl" +
                        "eAdapter 实例。");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("事务无法开始。当前的数据连接不支持事务或当前状态不允许事务开始。");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591